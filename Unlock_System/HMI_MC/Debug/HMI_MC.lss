
HMI_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000284c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  0000284c  000028e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800176  00800176  000029f6  2**0
                  ALLOC
  3 .stab         0000273c  00000000  00000000  000029f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001043  00000000  00000000  00005134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006177  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000062b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006427  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a8c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_3>
      10:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__vector_8>
      24:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <main>
      8a:	0c 94 24 14 	jmp	0x2848	; 0x2848 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <_delayForMoveingTheDoor>:

/*
 * Description: delay function for 15 seconds
 */
void _delayForMoveingTheDoor(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick ++ ;
     b4e:	80 91 77 01 	lds	r24, 0x0177
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 77 01 	sts	0x0177, r24
	if (g_tick == NUMBER_OF_COMPARE_MATCH_PER_5_SECOND)
     b58:	80 91 77 01 	lds	r24, 0x0177
     b5c:	83 30       	cpi	r24, 0x03	; 3
     b5e:	29 f4       	brne	.+10     	; 0xb6a <_delayForMoveingTheDoor+0x24>
	{
		g_tick = 0 ;
     b60:	10 92 77 01 	sts	0x0177, r1
		g_doorIsMovingFlag = TRUE ;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	80 93 78 01 	sts	0x0178, r24
	}
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <_delayForAlarm>:

/*
 * Description: delay function for 60 seconds
 */
void _delayForAlarm(void)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
	g_tick ++ ;
     b78:	80 91 77 01 	lds	r24, 0x0177
     b7c:	8f 5f       	subi	r24, 0xFF	; 255
     b7e:	80 93 77 01 	sts	0x0177, r24
	if (g_tick == NUMBER_OF_COMPARE_MATCH_PER_1_MINUTE)
     b82:	80 91 77 01 	lds	r24, 0x0177
     b86:	8c 30       	cpi	r24, 0x0C	; 12
     b88:	29 f4       	brne	.+10     	; 0xb94 <_delayForAlarm+0x24>
	{
		g_tick = 0 ;
     b8a:	10 92 77 01 	sts	0x0177, r1
		g_alarmIsONFlag = TRUE ;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	80 93 79 01 	sts	0x0179, r24
	}
}
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <enterPassword>:

/*
 * Description: Get the password from the user and send to it
 */
void enterPassword(void)
{
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	a5 97       	sbiw	r28, 0x25	; 37
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
	uint8 key ;
	uint8 num ;
	uint8 pass[PASSWORD_LENGHT];
	for (num = 0; num<PASSWORD_LENGHT-1; num++)
     bae:	1d 8e       	std	Y+29, r1	; 0x1d
     bb0:	17 c1       	rjmp	.+558    	; 0xde0 <enterPassword+0x246>
	{

		if (num == PASSWORD_LENGHT-2)
     bb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bb4:	85 30       	cpi	r24, 0x05	; 5
     bb6:	09 f0       	breq	.+2      	; 0xbba <enterPassword+0x20>
     bb8:	7a c0       	rjmp	.+244    	; 0xcae <enterPassword+0x114>
			/*
			 * Insure the to get only # to send password
			 * Ignore error inputs from the user
			 */
			do{
				key= Keypad_getPressedKey();
     bba:	0e 94 a6 09 	call	0x134c	; 0x134c <Keypad_getPressedKey>
     bbe:	8e 8f       	std	Y+30, r24	; 0x1e
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	aa e7       	ldi	r26, 0x7A	; 122
     bc6:	b3 e4       	ldi	r27, 0x43	; 67
     bc8:	89 8f       	std	Y+25, r24	; 0x19
     bca:	9a 8f       	std	Y+26, r25	; 0x1a
     bcc:	ab 8f       	std	Y+27, r26	; 0x1b
     bce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd0:	69 8d       	ldd	r22, Y+25	; 0x19
     bd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	4a ef       	ldi	r20, 0xFA	; 250
     bde:	54 e4       	ldi	r21, 0x44	; 68
     be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	8d 8b       	std	Y+21, r24	; 0x15
     bea:	9e 8b       	std	Y+22, r25	; 0x16
     bec:	af 8b       	std	Y+23, r26	; 0x17
     bee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bf0:	6d 89       	ldd	r22, Y+21	; 0x15
     bf2:	7e 89       	ldd	r23, Y+22	; 0x16
     bf4:	8f 89       	ldd	r24, Y+23	; 0x17
     bf6:	98 8d       	ldd	r25, Y+24	; 0x18
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e8       	ldi	r20, 0x80	; 128
     bfe:	5f e3       	ldi	r21, 0x3F	; 63
     c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c04:	88 23       	and	r24, r24
     c06:	2c f4       	brge	.+10     	; 0xc12 <enterPassword+0x78>
		__ticks = 1;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9c 8b       	std	Y+20, r25	; 0x14
     c0e:	8b 8b       	std	Y+19, r24	; 0x13
     c10:	3f c0       	rjmp	.+126    	; 0xc90 <enterPassword+0xf6>
	else if (__tmp > 65535)
     c12:	6d 89       	ldd	r22, Y+21	; 0x15
     c14:	7e 89       	ldd	r23, Y+22	; 0x16
     c16:	8f 89       	ldd	r24, Y+23	; 0x17
     c18:	98 8d       	ldd	r25, Y+24	; 0x18
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	3f ef       	ldi	r19, 0xFF	; 255
     c1e:	4f e7       	ldi	r20, 0x7F	; 127
     c20:	57 e4       	ldi	r21, 0x47	; 71
     c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c26:	18 16       	cp	r1, r24
     c28:	4c f5       	brge	.+82     	; 0xc7c <enterPassword+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2a:	69 8d       	ldd	r22, Y+25	; 0x19
     c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e2       	ldi	r20, 0x20	; 32
     c38:	51 e4       	ldi	r21, 0x41	; 65
     c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	bc 01       	movw	r22, r24
     c44:	cd 01       	movw	r24, r26
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9c 8b       	std	Y+20, r25	; 0x14
     c50:	8b 8b       	std	Y+19, r24	; 0x13
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <enterPassword+0xd8>
     c54:	88 ec       	ldi	r24, 0xC8	; 200
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9a 8b       	std	Y+18, r25	; 0x12
     c5a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c5c:	89 89       	ldd	r24, Y+17	; 0x11
     c5e:	9a 89       	ldd	r25, Y+18	; 0x12
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <enterPassword+0xc6>
     c64:	9a 8b       	std	Y+18, r25	; 0x12
     c66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c68:	8b 89       	ldd	r24, Y+19	; 0x13
     c6a:	9c 89       	ldd	r25, Y+20	; 0x14
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9c 8b       	std	Y+20, r25	; 0x14
     c70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c72:	8b 89       	ldd	r24, Y+19	; 0x13
     c74:	9c 89       	ldd	r25, Y+20	; 0x14
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	69 f7       	brne	.-38     	; 0xc54 <enterPassword+0xba>
     c7a:	14 c0       	rjmp	.+40     	; 0xca4 <enterPassword+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7c:	6d 89       	ldd	r22, Y+21	; 0x15
     c7e:	7e 89       	ldd	r23, Y+22	; 0x16
     c80:	8f 89       	ldd	r24, Y+23	; 0x17
     c82:	98 8d       	ldd	r25, Y+24	; 0x18
     c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	9c 8b       	std	Y+20, r25	; 0x14
     c8e:	8b 8b       	std	Y+19, r24	; 0x13
     c90:	8b 89       	ldd	r24, Y+19	; 0x13
     c92:	9c 89       	ldd	r25, Y+20	; 0x14
     c94:	98 8b       	std	Y+16, r25	; 0x10
     c96:	8f 87       	std	Y+15, r24	; 0x0f
     c98:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9a:	98 89       	ldd	r25, Y+16	; 0x10
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <enterPassword+0x102>
     ca0:	98 8b       	std	Y+16, r25	; 0x10
     ca2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(250);
			}while(!((key == '#')));
     ca4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ca6:	83 32       	cpi	r24, 0x23	; 35
     ca8:	09 f0       	breq	.+2      	; 0xcac <enterPassword+0x112>
     caa:	87 cf       	rjmp	.-242    	; 0xbba <enterPassword+0x20>
     cac:	79 c0       	rjmp	.+242    	; 0xda0 <enterPassword+0x206>
			/*
			 * Insure the to get only numbers to wirte password
			 * Ignore error inputs from the user
			 */
			do{
				key= Keypad_getPressedKey();
     cae:	0e 94 a6 09 	call	0x134c	; 0x134c <Keypad_getPressedKey>
     cb2:	8e 8f       	std	Y+30, r24	; 0x1e
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	aa e7       	ldi	r26, 0x7A	; 122
     cba:	b3 e4       	ldi	r27, 0x43	; 67
     cbc:	8b 87       	std	Y+11, r24	; 0x0b
     cbe:	9c 87       	std	Y+12, r25	; 0x0c
     cc0:	ad 87       	std	Y+13, r26	; 0x0d
     cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cca:	9e 85       	ldd	r25, Y+14	; 0x0e
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	4a ef       	ldi	r20, 0xFA	; 250
     cd2:	54 e4       	ldi	r21, 0x44	; 68
     cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	8f 83       	std	Y+7, r24	; 0x07
     cde:	98 87       	std	Y+8, r25	; 0x08
     ce0:	a9 87       	std	Y+9, r26	; 0x09
     ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce4:	6f 81       	ldd	r22, Y+7	; 0x07
     ce6:	78 85       	ldd	r23, Y+8	; 0x08
     ce8:	89 85       	ldd	r24, Y+9	; 0x09
     cea:	9a 85       	ldd	r25, Y+10	; 0x0a
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	2c f4       	brge	.+10     	; 0xd06 <enterPassword+0x16c>
		__ticks = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9e 83       	std	Y+6, r25	; 0x06
     d02:	8d 83       	std	Y+5, r24	; 0x05
     d04:	3f c0       	rjmp	.+126    	; 0xd84 <enterPassword+0x1ea>
	else if (__tmp > 65535)
     d06:	6f 81       	ldd	r22, Y+7	; 0x07
     d08:	78 85       	ldd	r23, Y+8	; 0x08
     d0a:	89 85       	ldd	r24, Y+9	; 0x09
     d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	4f e7       	ldi	r20, 0x7F	; 127
     d14:	57 e4       	ldi	r21, 0x47	; 71
     d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	4c f5       	brge	.+82     	; 0xd70 <enterPassword+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d20:	7c 85       	ldd	r23, Y+12	; 0x0c
     d22:	8d 85       	ldd	r24, Y+13	; 0x0d
     d24:	9e 85       	ldd	r25, Y+14	; 0x0e
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e2       	ldi	r20, 0x20	; 32
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	9e 83       	std	Y+6, r25	; 0x06
     d44:	8d 83       	std	Y+5, r24	; 0x05
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <enterPassword+0x1cc>
     d48:	88 ec       	ldi	r24, 0xC8	; 200
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9c 83       	std	Y+4, r25	; 0x04
     d4e:	8b 83       	std	Y+3, r24	; 0x03
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	9c 81       	ldd	r25, Y+4	; 0x04
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <enterPassword+0x1ba>
     d58:	9c 83       	std	Y+4, r25	; 0x04
     d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	9e 83       	std	Y+6, r25	; 0x06
     d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	69 f7       	brne	.-38     	; 0xd48 <enterPassword+0x1ae>
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <enterPassword+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d70:	6f 81       	ldd	r22, Y+7	; 0x07
     d72:	78 85       	ldd	r23, Y+8	; 0x08
     d74:	89 85       	ldd	r24, Y+9	; 0x09
     d76:	9a 85       	ldd	r25, Y+10	; 0x0a
     d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	9e 83       	std	Y+6, r25	; 0x06
     d82:	8d 83       	std	Y+5, r24	; 0x05
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <enterPassword+0x1f6>
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(250);
			}while(!((key >= 0) && (key <= 9)));
     d98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d9a:	8a 30       	cpi	r24, 0x0A	; 10
     d9c:	08 f0       	brcs	.+2      	; 0xda0 <enterPassword+0x206>
     d9e:	87 cf       	rjmp	.-242    	; 0xcae <enterPassword+0x114>
		}

		if (key != '#')
     da0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     da2:	83 32       	cpi	r24, 0x23	; 35
     da4:	81 f0       	breq	.+32     	; 0xdc6 <enterPassword+0x22c>
		{
			pass[num]= key+'0';  //Convert from intger to character
     da6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dae:	48 2f       	mov	r20, r24
     db0:	40 5d       	subi	r20, 0xD0	; 208
     db2:	ce 01       	movw	r24, r28
     db4:	4f 96       	adiw	r24, 0x1f	; 31
     db6:	fc 01       	movw	r30, r24
     db8:	e2 0f       	add	r30, r18
     dba:	f3 1f       	adc	r31, r19
     dbc:	40 83       	st	Z, r20
			LCD_displayCharacter('*');
     dbe:	8a e2       	ldi	r24, 0x2A	; 42
     dc0:	0e 94 bb 0c 	call	0x1976	; 0x1976 <LCD_displayCharacter>
     dc4:	0a c0       	rjmp	.+20     	; 0xdda <enterPassword+0x240>

		}
		else
		{
			pass[num] = key;
     dc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	ce 01       	movw	r24, r28
     dce:	4f 96       	adiw	r24, 0x1f	; 31
     dd0:	fc 01       	movw	r30, r24
     dd2:	e2 0f       	add	r30, r18
     dd4:	f3 1f       	adc	r31, r19
     dd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd8:	80 83       	st	Z, r24
void enterPassword(void)
{
	uint8 key ;
	uint8 num ;
	uint8 pass[PASSWORD_LENGHT];
	for (num = 0; num<PASSWORD_LENGHT-1; num++)
     dda:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	8d 8f       	std	Y+29, r24	; 0x1d
     de0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de2:	86 30       	cpi	r24, 0x06	; 6
     de4:	08 f4       	brcc	.+2      	; 0xde8 <enterPassword+0x24e>
     de6:	e5 ce       	rjmp	.-566    	; 0xbb2 <enterPassword+0x18>
		else
		{
			pass[num] = key;
		}
	}
	UART_sendString(pass);
     de8:	ce 01       	movw	r24, r28
     dea:	4f 96       	adiw	r24, 0x1f	; 31
     dec:	0e 94 39 13 	call	0x2672	; 0x2672 <UART_sendString>
}
     df0:	a5 96       	adiw	r28, 0x25	; 37
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <startupProgram>:
/*
 * Description:
 *A program to initiate All the modules
 */
void startupProgram(void)
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	2c 97       	sbiw	r28, 0x0c	; 12
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
	/*Configure UART*/
	UART paramUart = {9600,1,dataMode_8,disableParity};
     e16:	ce 01       	movw	r24, r28
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	99 87       	std	Y+9, r25	; 0x09
     e1c:	88 87       	std	Y+8, r24	; 0x08
     e1e:	ef e6       	ldi	r30, 0x6F	; 111
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	fb 87       	std	Y+11, r31	; 0x0b
     e24:	ea 87       	std	Y+10, r30	; 0x0a
     e26:	f7 e0       	ldi	r31, 0x07	; 7
     e28:	fc 87       	std	Y+12, r31	; 0x0c
     e2a:	ea 85       	ldd	r30, Y+10	; 0x0a
     e2c:	fb 85       	ldd	r31, Y+11	; 0x0b
     e2e:	00 80       	ld	r0, Z
     e30:	8a 85       	ldd	r24, Y+10	; 0x0a
     e32:	9b 85       	ldd	r25, Y+11	; 0x0b
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	9b 87       	std	Y+11, r25	; 0x0b
     e38:	8a 87       	std	Y+10, r24	; 0x0a
     e3a:	e8 85       	ldd	r30, Y+8	; 0x08
     e3c:	f9 85       	ldd	r31, Y+9	; 0x09
     e3e:	00 82       	st	Z, r0
     e40:	88 85       	ldd	r24, Y+8	; 0x08
     e42:	99 85       	ldd	r25, Y+9	; 0x09
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	99 87       	std	Y+9, r25	; 0x09
     e48:	88 87       	std	Y+8, r24	; 0x08
     e4a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e4c:	91 50       	subi	r25, 0x01	; 1
     e4e:	9c 87       	std	Y+12, r25	; 0x0c
     e50:	ec 85       	ldd	r30, Y+12	; 0x0c
     e52:	ee 23       	and	r30, r30
     e54:	51 f7       	brne	.-44     	; 0xe2a <startupProgram+0x28>

	/*LCD initialization*/
	LCD_init();
     e56:	0e 94 a4 0a 	call	0x1548	; 0x1548 <LCD_init>

	/*UART initialization*/
	UART_init(&paramUart);
     e5a:	ce 01       	movw	r24, r28
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <UART_init>

	/* HMI_MC is ready*/
	UART_sendByte(HMI_MC_READY);
     e62:	84 e1       	ldi	r24, 0x14	; 20
     e64:	0e 94 13 13 	call	0x2626	; 0x2626 <UART_sendByte>

	/*Get the Program number from other MC to show in lCD*/
	flagProgram = UART_receiveByte();
     e68:	0e 94 2a 13 	call	0x2654	; 0x2654 <UART_receiveByte>
     e6c:	80 93 76 01 	sts	0x0176, r24
}
     e70:	2c 96       	adiw	r28, 0x0c	; 12
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <firstProgram>:
 * This program run once, when the user start to implement his system
 * It takes the password from the user and send it to the control unit MC
 * It may run again if the user want to change his password
 */
void firstProgram(void)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	2f 97       	sbiw	r28, 0x0f	; 15
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Acknowladgment variable to get the response from
	 * control unit MC and start the program
	 */
	uint8 ack=0;
     e96:	1f 86       	std	Y+15, r1	; 0x0f

	/*Enter the password for first time*/
	LCD_clearScreen();
     e98:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_clearScreen>
	LCD_displayString("Please Enter The New Password:");
     e9c:	80 e6       	ldi	r24, 0x60	; 96
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
	LCD_goToRowColumn(1,0);
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_goToRowColumn>
	enterPassword();
     eac:	0e 94 cd 05 	call	0xb9a	; 0xb9a <enterPassword>

	/*re-Enter the password for to confirm*/
	LCD_clearScreen();
     eb0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_clearScreen>
	LCD_displayString("Please Enter again to confirm:");
     eb4:	8f e7       	ldi	r24, 0x7F	; 127
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
	LCD_goToRowColumn(1,0);
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_goToRowColumn>
	enterPassword();
     ec4:	0e 94 cd 05 	call	0xb9a	; 0xb9a <enterPassword>

	/*get the response from control unit MC
	 * if ack = 1, (non-match password)first program will run again
	 * if ack = 2, (match password)default program will start
	 */
	ack = UART_receiveByte();
     ec8:	0e 94 2a 13 	call	0x2654	; 0x2654 <UART_receiveByte>
     ecc:	8f 87       	std	Y+15, r24	; 0x0f
	flagProgram = ack ;
     ece:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed0:	80 93 76 01 	sts	0x0176, r24
	if (flagProgram == 1)
     ed4:	80 91 76 01 	lds	r24, 0x0176
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	09 f0       	breq	.+2      	; 0xede <firstProgram+0x5c>
     edc:	78 c0       	rjmp	.+240    	; 0xfce <firstProgram+0x14c>
	{
		LCD_clearScreen();
     ede:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_clearScreen>
		LCD_displayString("ERROR");
     ee2:	8e e9       	ldi	r24, 0x9E	; 158
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	a8 ec       	ldi	r26, 0xC8	; 200
     ef0:	b2 e4       	ldi	r27, 0x42	; 66
     ef2:	8b 87       	std	Y+11, r24	; 0x0b
     ef4:	9c 87       	std	Y+12, r25	; 0x0c
     ef6:	ad 87       	std	Y+13, r26	; 0x0d
     ef8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efa:	6b 85       	ldd	r22, Y+11	; 0x0b
     efc:	7c 85       	ldd	r23, Y+12	; 0x0c
     efe:	8d 85       	ldd	r24, Y+13	; 0x0d
     f00:	9e 85       	ldd	r25, Y+14	; 0x0e
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	4a ef       	ldi	r20, 0xFA	; 250
     f08:	54 e4       	ldi	r21, 0x44	; 68
     f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	8f 83       	std	Y+7, r24	; 0x07
     f14:	98 87       	std	Y+8, r25	; 0x08
     f16:	a9 87       	std	Y+9, r26	; 0x09
     f18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f1a:	6f 81       	ldd	r22, Y+7	; 0x07
     f1c:	78 85       	ldd	r23, Y+8	; 0x08
     f1e:	89 85       	ldd	r24, Y+9	; 0x09
     f20:	9a 85       	ldd	r25, Y+10	; 0x0a
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e8       	ldi	r20, 0x80	; 128
     f28:	5f e3       	ldi	r21, 0x3F	; 63
     f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f2e:	88 23       	and	r24, r24
     f30:	2c f4       	brge	.+10     	; 0xf3c <firstProgram+0xba>
		__ticks = 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	3f c0       	rjmp	.+126    	; 0xfba <firstProgram+0x138>
	else if (__tmp > 65535)
     f3c:	6f 81       	ldd	r22, Y+7	; 0x07
     f3e:	78 85       	ldd	r23, Y+8	; 0x08
     f40:	89 85       	ldd	r24, Y+9	; 0x09
     f42:	9a 85       	ldd	r25, Y+10	; 0x0a
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	3f ef       	ldi	r19, 0xFF	; 255
     f48:	4f e7       	ldi	r20, 0x7F	; 127
     f4a:	57 e4       	ldi	r21, 0x47	; 71
     f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f50:	18 16       	cp	r1, r24
     f52:	4c f5       	brge	.+82     	; 0xfa6 <firstProgram+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f54:	6b 85       	ldd	r22, Y+11	; 0x0b
     f56:	7c 85       	ldd	r23, Y+12	; 0x0c
     f58:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e2       	ldi	r20, 0x20	; 32
     f62:	51 e4       	ldi	r21, 0x41	; 65
     f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	9e 83       	std	Y+6, r25	; 0x06
     f7a:	8d 83       	std	Y+5, r24	; 0x05
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <firstProgram+0x11a>
     f7e:	88 ec       	ldi	r24, 0xC8	; 200
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9c 83       	std	Y+4, r25	; 0x04
     f84:	8b 83       	std	Y+3, r24	; 0x03
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	9c 81       	ldd	r25, Y+4	; 0x04
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <firstProgram+0x108>
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	9e 81       	ldd	r25, Y+6	; 0x06
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	9e 83       	std	Y+6, r25	; 0x06
     f9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	9e 81       	ldd	r25, Y+6	; 0x06
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	69 f7       	brne	.-38     	; 0xf7e <firstProgram+0xfc>
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <firstProgram+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa6:	6f 81       	ldd	r22, Y+7	; 0x07
     fa8:	78 85       	ldd	r23, Y+8	; 0x08
     faa:	89 85       	ldd	r24, Y+9	; 0x09
     fac:	9a 85       	ldd	r25, Y+10	; 0x0a
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	9e 83       	std	Y+6, r25	; 0x06
     fb8:	8d 83       	std	Y+5, r24	; 0x05
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	9e 81       	ldd	r25, Y+6	; 0x06
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <firstProgram+0x144>
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
	}

}
     fce:	2f 96       	adiw	r28, 0x0f	; 15
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <defaultProgram>:
 * This is the default program
 * press + to enter the password, press - to change the password
 * for both option the have only 3 trials, then the system will give an alarm.
 */
void defaultProgram(void)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	61 97       	sbiw	r28, 0x11	; 17
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Get the user chosen then send it to control unit MC
	 */
	uint8 key_option;
	LCD_clearScreen();
     ff4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_clearScreen>
	LCD_displayString("+: Open The Door");
     ff8:	84 ea       	ldi	r24, 0xA4	; 164
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
	LCD_goToRowColumn(1,0);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_goToRowColumn>
	LCD_displayString("-: Change The Password");
    1008:	85 eb       	ldi	r24, 0xB5	; 181
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
	key_option= Keypad_getPressedKey();
    1010:	0e 94 a6 09 	call	0x134c	; 0x134c <Keypad_getPressedKey>
    1014:	89 8b       	std	Y+17, r24	; 0x11
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a6 e9       	ldi	r26, 0x96	; 150
    101c:	b3 e4       	ldi	r27, 0x43	; 67
    101e:	8b 87       	std	Y+11, r24	; 0x0b
    1020:	9c 87       	std	Y+12, r25	; 0x0c
    1022:	ad 87       	std	Y+13, r26	; 0x0d
    1024:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1026:	6b 85       	ldd	r22, Y+11	; 0x0b
    1028:	7c 85       	ldd	r23, Y+12	; 0x0c
    102a:	8d 85       	ldd	r24, Y+13	; 0x0d
    102c:	9e 85       	ldd	r25, Y+14	; 0x0e
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4a ef       	ldi	r20, 0xFA	; 250
    1034:	54 e4       	ldi	r21, 0x44	; 68
    1036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	8f 83       	std	Y+7, r24	; 0x07
    1040:	98 87       	std	Y+8, r25	; 0x08
    1042:	a9 87       	std	Y+9, r26	; 0x09
    1044:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1046:	6f 81       	ldd	r22, Y+7	; 0x07
    1048:	78 85       	ldd	r23, Y+8	; 0x08
    104a:	89 85       	ldd	r24, Y+9	; 0x09
    104c:	9a 85       	ldd	r25, Y+10	; 0x0a
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e8       	ldi	r20, 0x80	; 128
    1054:	5f e3       	ldi	r21, 0x3F	; 63
    1056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    105a:	88 23       	and	r24, r24
    105c:	2c f4       	brge	.+10     	; 0x1068 <defaultProgram+0x88>
		__ticks = 1;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9e 83       	std	Y+6, r25	; 0x06
    1064:	8d 83       	std	Y+5, r24	; 0x05
    1066:	3f c0       	rjmp	.+126    	; 0x10e6 <defaultProgram+0x106>
	else if (__tmp > 65535)
    1068:	6f 81       	ldd	r22, Y+7	; 0x07
    106a:	78 85       	ldd	r23, Y+8	; 0x08
    106c:	89 85       	ldd	r24, Y+9	; 0x09
    106e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	3f ef       	ldi	r19, 0xFF	; 255
    1074:	4f e7       	ldi	r20, 0x7F	; 127
    1076:	57 e4       	ldi	r21, 0x47	; 71
    1078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    107c:	18 16       	cp	r1, r24
    107e:	4c f5       	brge	.+82     	; 0x10d2 <defaultProgram+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1080:	6b 85       	ldd	r22, Y+11	; 0x0b
    1082:	7c 85       	ldd	r23, Y+12	; 0x0c
    1084:	8d 85       	ldd	r24, Y+13	; 0x0d
    1086:	9e 85       	ldd	r25, Y+14	; 0x0e
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e2       	ldi	r20, 0x20	; 32
    108e:	51 e4       	ldi	r21, 0x41	; 65
    1090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <defaultProgram+0xe8>
    10aa:	88 ec       	ldi	r24, 0xC8	; 200
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9c 83       	std	Y+4, r25	; 0x04
    10b0:	8b 83       	std	Y+3, r24	; 0x03
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <defaultProgram+0xd6>
    10ba:	9c 83       	std	Y+4, r25	; 0x04
    10bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10be:	8d 81       	ldd	r24, Y+5	; 0x05
    10c0:	9e 81       	ldd	r25, Y+6	; 0x06
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	9e 83       	std	Y+6, r25	; 0x06
    10c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	9e 81       	ldd	r25, Y+6	; 0x06
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	69 f7       	brne	.-38     	; 0x10aa <defaultProgram+0xca>
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <defaultProgram+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d2:	6f 81       	ldd	r22, Y+7	; 0x07
    10d4:	78 85       	ldd	r23, Y+8	; 0x08
    10d6:	89 85       	ldd	r24, Y+9	; 0x09
    10d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9e 83       	std	Y+6, r25	; 0x06
    10e4:	8d 83       	std	Y+5, r24	; 0x05
    10e6:	8d 81       	ldd	r24, Y+5	; 0x05
    10e8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <defaultProgram+0x112>
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	/*Enter the password to unlock the door*/
	if (key_option == '+')
    10fa:	89 89       	ldd	r24, Y+17	; 0x11
    10fc:	8b 32       	cpi	r24, 0x2B	; 43
    10fe:	21 f5       	brne	.+72     	; 0x1148 <defaultProgram+0x168>
	{
		uint8 trails = ZERO_NUMBER_OF_TRIALS;
    1100:	18 8a       	std	Y+16, r1	; 0x10

		/*Loop until the user enter the right password*/
		do{
			UART_sendByte(key_option);
    1102:	89 89       	ldd	r24, Y+17	; 0x11
    1104:	0e 94 13 13 	call	0x2626	; 0x2626 <UART_sendByte>
			LCD_clearScreen();
    1108:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_clearScreen>
			LCD_displayString("Please Enter your Password correctly:");
    110c:	8c ec       	ldi	r24, 0xCC	; 204
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
			LCD_goToRowColumn(1,0);
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_goToRowColumn>
			enterPassword();
    111c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <enterPassword>
			/*Get the numbers of trials from control unit MC*/
			trails = UART_receiveByte();
    1120:	0e 94 2a 13 	call	0x2654	; 0x2654 <UART_receiveByte>
    1124:	88 8b       	std	Y+16, r24	; 0x10
			if (trails == 0)
    1126:	88 89       	ldd	r24, Y+16	; 0x10
    1128:	88 23       	and	r24, r24
    112a:	11 f4       	brne	.+4      	; 0x1130 <defaultProgram+0x150>
			{
				/*Start the door movement program*/
				doorMovementProgram();
    112c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <doorMovementProgram>
			}
		}while( (trails > ZERO_NUMBER_OF_TRIALS) && (trails < MAX_NUMBERS_OF_TRIALS));
    1130:	88 89       	ldd	r24, Y+16	; 0x10
    1132:	88 23       	and	r24, r24
    1134:	19 f0       	breq	.+6      	; 0x113c <defaultProgram+0x15c>
    1136:	88 89       	ldd	r24, Y+16	; 0x10
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	18 f3       	brcs	.-58     	; 0x1102 <defaultProgram+0x122>

		if (trails == MAX_NUMBERS_OF_TRIALS)
    113c:	88 89       	ldd	r24, Y+16	; 0x10
    113e:	83 30       	cpi	r24, 0x03	; 3
    1140:	49 f5       	brne	.+82     	; 0x1194 <defaultProgram+0x1b4>
		{
			/*user enter passwords wrong for 3 times*/
			alarmOnProgram();
    1142:	0e 94 84 09 	call	0x1308	; 0x1308 <alarmOnProgram>
    1146:	26 c0       	rjmp	.+76     	; 0x1194 <defaultProgram+0x1b4>
		}
	}
	/*Enter the password to change it*/
	else if (key_option == '-')
    1148:	89 89       	ldd	r24, Y+17	; 0x11
    114a:	8d 32       	cpi	r24, 0x2D	; 45
    114c:	19 f5       	brne	.+70     	; 0x1194 <defaultProgram+0x1b4>
	{
		uint8 trails = ZERO_NUMBER_OF_TRIALS;
    114e:	1f 86       	std	Y+15, r1	; 0x0f

		/*Loop until the user enter the right password*/
		do{
			UART_sendByte(key_option);
    1150:	89 89       	ldd	r24, Y+17	; 0x11
    1152:	0e 94 13 13 	call	0x2626	; 0x2626 <UART_sendByte>
			LCD_clearScreen();
    1156:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_clearScreen>
			LCD_displayString("Please Enter The Old Password:");
    115a:	82 ef       	ldi	r24, 0xF2	; 242
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
			LCD_goToRowColumn(1,0);
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_goToRowColumn>
			enterPassword();
    116a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <enterPassword>
			trails = UART_receiveByte();
    116e:	0e 94 2a 13 	call	0x2654	; 0x2654 <UART_receiveByte>
    1172:	8f 87       	std	Y+15, r24	; 0x0f
			if (trails == ZERO_NUMBER_OF_TRIALS)
    1174:	8f 85       	ldd	r24, Y+15	; 0x0f
    1176:	88 23       	and	r24, r24
    1178:	11 f4       	brne	.+4      	; 0x117e <defaultProgram+0x19e>
			{
				/*Start first program to reinsert the password */
				firstProgram();
    117a:	0e 94 41 07 	call	0xe82	; 0xe82 <firstProgram>
			}
		}while( (trails > ZERO_NUMBER_OF_TRIALS) && (trails < MAX_NUMBERS_OF_TRIALS));
    117e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1180:	88 23       	and	r24, r24
    1182:	19 f0       	breq	.+6      	; 0x118a <defaultProgram+0x1aa>
    1184:	8f 85       	ldd	r24, Y+15	; 0x0f
    1186:	83 30       	cpi	r24, 0x03	; 3
    1188:	18 f3       	brcs	.-58     	; 0x1150 <defaultProgram+0x170>

		if (trails == MAX_NUMBERS_OF_TRIALS)
    118a:	8f 85       	ldd	r24, Y+15	; 0x0f
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	11 f4       	brne	.+4      	; 0x1194 <defaultProgram+0x1b4>
		{
			/*user enter passwords wrong for 3 times*/
			alarmOnProgram();
    1190:	0e 94 84 09 	call	0x1308	; 0x1308 <alarmOnProgram>
	}
	/*else
	{
		secondProgram();
	}*/
}
    1194:	61 96       	adiw	r28, 0x11	; 17
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <doorMovementProgram>:
 * Description:
 * Function show opening door message for 15 second
 * and closing door message for 15 second also
 */
void doorMovementProgram(void)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	2e 97       	sbiw	r28, 0x0e	; 14
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
	/*Set Timer call back function*/
	TIMER_setCallBack(delay.number,_delayForMoveingTheDoor);
    11ba:	80 91 68 01 	lds	r24, 0x0168
    11be:	23 ea       	ldi	r18, 0xA3	; 163
    11c0:	35 e0       	ldi	r19, 0x05	; 5
    11c2:	b9 01       	movw	r22, r18
    11c4:	0e 94 cb 11 	call	0x2396	; 0x2396 <TIMER_setCallBack>

	LCD_clearScreen();
    11c8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_clearScreen>
	LCD_displayString("Door is Opening Now");
    11cc:	81 e1       	ldi	r24, 0x11	; 17
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
	doorIsMoving();
    11d4:	0e 94 6f 09 	call	0x12de	; 0x12de <doorIsMoving>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	aa ef       	ldi	r26, 0xFA	; 250
    11de:	b4 e4       	ldi	r27, 0x44	; 68
    11e0:	8b 87       	std	Y+11, r24	; 0x0b
    11e2:	9c 87       	std	Y+12, r25	; 0x0c
    11e4:	ad 87       	std	Y+13, r26	; 0x0d
    11e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	8f 83       	std	Y+7, r24	; 0x07
    1202:	98 87       	std	Y+8, r25	; 0x08
    1204:	a9 87       	std	Y+9, r26	; 0x09
    1206:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1208:	6f 81       	ldd	r22, Y+7	; 0x07
    120a:	78 85       	ldd	r23, Y+8	; 0x08
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e8       	ldi	r20, 0x80	; 128
    1216:	5f e3       	ldi	r21, 0x3F	; 63
    1218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    121c:	88 23       	and	r24, r24
    121e:	2c f4       	brge	.+10     	; 0x122a <doorMovementProgram+0x84>
		__ticks = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	3f c0       	rjmp	.+126    	; 0x12a8 <doorMovementProgram+0x102>
	else if (__tmp > 65535)
    122a:	6f 81       	ldd	r22, Y+7	; 0x07
    122c:	78 85       	ldd	r23, Y+8	; 0x08
    122e:	89 85       	ldd	r24, Y+9	; 0x09
    1230:	9a 85       	ldd	r25, Y+10	; 0x0a
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	4c f5       	brge	.+82     	; 0x1294 <doorMovementProgram+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1242:	6b 85       	ldd	r22, Y+11	; 0x0b
    1244:	7c 85       	ldd	r23, Y+12	; 0x0c
    1246:	8d 85       	ldd	r24, Y+13	; 0x0d
    1248:	9e 85       	ldd	r25, Y+14	; 0x0e
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e2       	ldi	r20, 0x20	; 32
    1250:	51 e4       	ldi	r21, 0x41	; 65
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	0f c0       	rjmp	.+30     	; 0x128a <doorMovementProgram+0xe4>
    126c:	88 ec       	ldi	r24, 0xC8	; 200
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <doorMovementProgram+0xd2>
    127c:	9c 83       	std	Y+4, r25	; 0x04
    127e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	9e 83       	std	Y+6, r25	; 0x06
    1288:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	9e 81       	ldd	r25, Y+6	; 0x06
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	69 f7       	brne	.-38     	; 0x126c <doorMovementProgram+0xc6>
    1292:	14 c0       	rjmp	.+40     	; 0x12bc <doorMovementProgram+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1294:	6f 81       	ldd	r22, Y+7	; 0x07
    1296:	78 85       	ldd	r23, Y+8	; 0x08
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	9a 83       	std	Y+2, r25	; 0x02
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <doorMovementProgram+0x10e>
    12b8:	9a 83       	std	Y+2, r25	; 0x02
    12ba:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2000 seconds */
	_delay_ms(2000);

	LCD_clearScreen();
    12bc:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_clearScreen>
	LCD_displayString("Door is Closing Now");
    12c0:	85 e2       	ldi	r24, 0x25	; 37
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
	doorIsMoving();
    12c8:	0e 94 6f 09 	call	0x12de	; 0x12de <doorIsMoving>
}
    12cc:	2e 96       	adiw	r28, 0x0e	; 14
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <doorIsMoving>:
/*
 * Description:
 * Function of delay for 15 second
 */
void doorIsMoving(void)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	/*Start Timer to count until reach 15 sec*/
	TIMER_init(&delay);
    12e6:	88 e6       	ldi	r24, 0x68	; 104
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 bd 10 	call	0x217a	; 0x217a <TIMER_init>

	 /*Wait until door is full open*/
	while(!g_doorIsMovingFlag);
    12ee:	80 91 78 01 	lds	r24, 0x0178
    12f2:	88 23       	and	r24, r24
    12f4:	e1 f3       	breq	.-8      	; 0x12ee <doorIsMoving+0x10>

	/*Stop timer*/
	TIMER_deInit (delay.number);
    12f6:	80 91 68 01 	lds	r24, 0x0168
    12fa:	0e 94 35 12 	call	0x246a	; 0x246a <TIMER_deInit>

	/*Door is fully moved*/
	g_doorIsMovingFlag = FALSE ;
    12fe:	10 92 78 01 	sts	0x0178, r1
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <alarmOnProgram>:
/*
 * Description:
 * Function show error message for 1 minute
 */
void alarmOnProgram(void)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
	/*Set Timer call back function*/
	TIMER_setCallBack(delay.number,_delayForAlarm);
    1310:	80 91 68 01 	lds	r24, 0x0168
    1314:	28 eb       	ldi	r18, 0xB8	; 184
    1316:	35 e0       	ldi	r19, 0x05	; 5
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 cb 11 	call	0x2396	; 0x2396 <TIMER_setCallBack>

	LCD_clearScreen();
    131e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <LCD_clearScreen>
	LCD_displayString("!!!!!!!!!!!!ERROR PASSWORD!!!!!!!!!!!!");
    1322:	89 e3       	ldi	r24, 0x39	; 57
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>

	/*Start Timer to count until reach 60 sec*/
	TIMER_init(&delay);
    132a:	88 e6       	ldi	r24, 0x68	; 104
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	0e 94 bd 10 	call	0x217a	; 0x217a <TIMER_init>

	 /*Wait until alarm is finished*/
	while(!g_alarmIsONFlag);
    1332:	80 91 79 01 	lds	r24, 0x0179
    1336:	88 23       	and	r24, r24
    1338:	e1 f3       	breq	.-8      	; 0x1332 <alarmOnProgram+0x2a>

	/*Stop timer*/
	TIMER_deInit (delay.number);
    133a:	80 91 68 01 	lds	r24, 0x0168
    133e:	0e 94 35 12 	call	0x246a	; 0x246a <TIMER_deInit>

	/*Alarm is finished*/
	g_alarmIsONFlag = FALSE ;
    1342:	10 92 79 01 	sts	0x0179, r1

}
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <Keypad_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 Keypad_getPressedKey (void)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	00 d0       	rcall	.+0      	; 0x1352 <Keypad_getPressedKey+0x6>
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row ;

	while (1)
	{
		for (col = 0; col < N_COL ; col++ )
    1356:	1a 82       	std	Y+2, r1	; 0x02
    1358:	4c c0       	rjmp	.+152    	; 0x13f2 <Keypad_getPressedKey+0xa6>
		{
			/*
			 * */
			KEYPAD_PORT_DIR =  (0b00010000 << col);
    135a:	ea e3       	ldi	r30, 0x3A	; 58
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	80 e1       	ldi	r24, 0x10	; 16
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <Keypad_getPressedKey+0x22>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	2a 95       	dec	r18
    1370:	e2 f7       	brpl	.-8      	; 0x136a <Keypad_getPressedKey+0x1e>
    1372:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000 << col));
    1374:	eb e3       	ldi	r30, 0x3B	; 59
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	80 e1       	ldi	r24, 0x10	; 16
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <Keypad_getPressedKey+0x3e>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <Keypad_getPressedKey+0x3a>
    138e:	80 95       	com	r24
    1390:	80 83       	st	Z, r24


			for(row  = 0 ; row < N_ROW ; row++ )
    1392:	19 82       	std	Y+1, r1	; 0x01
    1394:	28 c0       	rjmp	.+80     	; 0x13e6 <Keypad_getPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    1396:	e9 e3       	ldi	r30, 0x39	; 57
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a9 01       	movw	r20, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <Keypad_getPressedKey+0x62>
    13aa:	55 95       	asr	r21
    13ac:	47 95       	ror	r20
    13ae:	8a 95       	dec	r24
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <Keypad_getPressedKey+0x5e>
    13b2:	ca 01       	movw	r24, r20
    13b4:	81 70       	andi	r24, 0x01	; 1
    13b6:	90 70       	andi	r25, 0x00	; 0
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	91 f4       	brne	.+36     	; 0x13e0 <Keypad_getPressedKey+0x94>
				{
					#if (N_COL == 3)
						return Keypad_4x3_adjustSwitchNumber((row*N_COL)+col+1);
					#elif (N_COL == 4)
						return Keypad_4x4_adjustSwitchNumber((row*N_COL)+col+1) ;
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	98 2f       	mov	r25, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	89 0f       	add	r24, r25
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <Keypad_4x4_adjustSwitchNumber>
					#endif
				}
			}
		}
	}
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret
			KEYPAD_PORT_DIR =  (0b00010000 << col);

			KEYPAD_PORT_OUT = (~(0b00010000 << col));


			for(row  = 0 ; row < N_ROW ; row++ )
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	84 30       	cpi	r24, 0x04	; 4
    13ea:	a8 f2       	brcs	.-86     	; 0x1396 <Keypad_getPressedKey+0x4a>
{
	uint8 col,row ;

	while (1)
	{
		for (col = 0; col < N_COL ; col++ )
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	8f 5f       	subi	r24, 0xFF	; 255
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	84 30       	cpi	r24, 0x04	; 4
    13f6:	08 f4       	brcc	.+2      	; 0x13fa <Keypad_getPressedKey+0xae>
    13f8:	b0 cf       	rjmp	.-160    	; 0x135a <Keypad_getPressedKey+0xe>
    13fa:	ad cf       	rjmp	.-166    	; 0x1356 <Keypad_getPressedKey+0xa>

000013fc <Keypad_4x4_adjustSwitchNumber>:
}

#elif (N_COL == 4)

static uint8 Keypad_4x4_adjustSwitchNumber(uint8 key)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	00 d0       	rcall	.+0      	; 0x1402 <Keypad_4x4_adjustSwitchNumber+0x6>
    1402:	00 d0       	rcall	.+0      	; 0x1404 <Keypad_4x4_adjustSwitchNumber+0x8>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	89 83       	std	Y+1, r24	; 0x01
	switch (key)
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3c 83       	std	Y+4, r19	; 0x04
    1412:	2b 83       	std	Y+3, r18	; 0x03
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	91 05       	cpc	r25, r1
    141c:	09 f4       	brne	.+2      	; 0x1420 <Keypad_4x4_adjustSwitchNumber+0x24>
    141e:	70 c0       	rjmp	.+224    	; 0x1500 <Keypad_4x4_adjustSwitchNumber+0x104>
    1420:	2b 81       	ldd	r18, Y+3	; 0x03
    1422:	3c 81       	ldd	r19, Y+4	; 0x04
    1424:	29 30       	cpi	r18, 0x09	; 9
    1426:	31 05       	cpc	r19, r1
    1428:	5c f5       	brge	.+86     	; 0x1480 <Keypad_4x4_adjustSwitchNumber+0x84>
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	91 05       	cpc	r25, r1
    1432:	09 f4       	brne	.+2      	; 0x1436 <Keypad_4x4_adjustSwitchNumber+0x3a>
    1434:	59 c0       	rjmp	.+178    	; 0x14e8 <Keypad_4x4_adjustSwitchNumber+0xec>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	25 30       	cpi	r18, 0x05	; 5
    143c:	31 05       	cpc	r19, r1
    143e:	9c f4       	brge	.+38     	; 0x1466 <Keypad_4x4_adjustSwitchNumber+0x6a>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	91 05       	cpc	r25, r1
    1448:	09 f4       	brne	.+2      	; 0x144c <Keypad_4x4_adjustSwitchNumber+0x50>
    144a:	48 c0       	rjmp	.+144    	; 0x14dc <Keypad_4x4_adjustSwitchNumber+0xe0>
    144c:	2b 81       	ldd	r18, Y+3	; 0x03
    144e:	3c 81       	ldd	r19, Y+4	; 0x04
    1450:	23 30       	cpi	r18, 0x03	; 3
    1452:	31 05       	cpc	r19, r1
    1454:	0c f0       	brlt	.+2      	; 0x1458 <Keypad_4x4_adjustSwitchNumber+0x5c>
    1456:	45 c0       	rjmp	.+138    	; 0x14e2 <Keypad_4x4_adjustSwitchNumber+0xe6>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <Keypad_4x4_adjustSwitchNumber+0x68>
    1462:	39 c0       	rjmp	.+114    	; 0x14d6 <Keypad_4x4_adjustSwitchNumber+0xda>
    1464:	67 c0       	rjmp	.+206    	; 0x1534 <Keypad_4x4_adjustSwitchNumber+0x138>
    1466:	2b 81       	ldd	r18, Y+3	; 0x03
    1468:	3c 81       	ldd	r19, Y+4	; 0x04
    146a:	26 30       	cpi	r18, 0x06	; 6
    146c:	31 05       	cpc	r19, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <Keypad_4x4_adjustSwitchNumber+0x76>
    1470:	41 c0       	rjmp	.+130    	; 0x14f4 <Keypad_4x4_adjustSwitchNumber+0xf8>
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	87 30       	cpi	r24, 0x07	; 7
    1478:	91 05       	cpc	r25, r1
    147a:	0c f0       	brlt	.+2      	; 0x147e <Keypad_4x4_adjustSwitchNumber+0x82>
    147c:	3e c0       	rjmp	.+124    	; 0x14fa <Keypad_4x4_adjustSwitchNumber+0xfe>
    147e:	37 c0       	rjmp	.+110    	; 0x14ee <Keypad_4x4_adjustSwitchNumber+0xf2>
    1480:	2b 81       	ldd	r18, Y+3	; 0x03
    1482:	3c 81       	ldd	r19, Y+4	; 0x04
    1484:	2c 30       	cpi	r18, 0x0C	; 12
    1486:	31 05       	cpc	r19, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <Keypad_4x4_adjustSwitchNumber+0x90>
    148a:	46 c0       	rjmp	.+140    	; 0x1518 <Keypad_4x4_adjustSwitchNumber+0x11c>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	8d 30       	cpi	r24, 0x0D	; 13
    1492:	91 05       	cpc	r25, r1
    1494:	5c f4       	brge	.+22     	; 0x14ac <Keypad_4x4_adjustSwitchNumber+0xb0>
    1496:	2b 81       	ldd	r18, Y+3	; 0x03
    1498:	3c 81       	ldd	r19, Y+4	; 0x04
    149a:	2a 30       	cpi	r18, 0x0A	; 10
    149c:	31 05       	cpc	r19, r1
    149e:	b1 f1       	breq	.+108    	; 0x150c <Keypad_4x4_adjustSwitchNumber+0x110>
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	8b 30       	cpi	r24, 0x0B	; 11
    14a6:	91 05       	cpc	r25, r1
    14a8:	a4 f5       	brge	.+104    	; 0x1512 <Keypad_4x4_adjustSwitchNumber+0x116>
    14aa:	2d c0       	rjmp	.+90     	; 0x1506 <Keypad_4x4_adjustSwitchNumber+0x10a>
    14ac:	2b 81       	ldd	r18, Y+3	; 0x03
    14ae:	3c 81       	ldd	r19, Y+4	; 0x04
    14b0:	2e 30       	cpi	r18, 0x0E	; 14
    14b2:	31 05       	cpc	r19, r1
    14b4:	b9 f1       	breq	.+110    	; 0x1524 <Keypad_4x4_adjustSwitchNumber+0x128>
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	8e 30       	cpi	r24, 0x0E	; 14
    14bc:	91 05       	cpc	r25, r1
    14be:	7c f1       	brlt	.+94     	; 0x151e <Keypad_4x4_adjustSwitchNumber+0x122>
    14c0:	2b 81       	ldd	r18, Y+3	; 0x03
    14c2:	3c 81       	ldd	r19, Y+4	; 0x04
    14c4:	2f 30       	cpi	r18, 0x0F	; 15
    14c6:	31 05       	cpc	r19, r1
    14c8:	79 f1       	breq	.+94     	; 0x1528 <Keypad_4x4_adjustSwitchNumber+0x12c>
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	80 31       	cpi	r24, 0x10	; 16
    14d0:	91 05       	cpc	r25, r1
    14d2:	69 f1       	breq	.+90     	; 0x152e <Keypad_4x4_adjustSwitchNumber+0x132>
    14d4:	2f c0       	rjmp	.+94     	; 0x1534 <Keypad_4x4_adjustSwitchNumber+0x138>
	{
		case 1 : return 7 ;
    14d6:	97 e0       	ldi	r25, 0x07	; 7
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	2e c0       	rjmp	.+92     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				 break;
		case 2 : return 8 ;
    14dc:	28 e0       	ldi	r18, 0x08	; 8
    14de:	2a 83       	std	Y+2, r18	; 0x02
    14e0:	2b c0       	rjmp	.+86     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				 break;
		case 3 : return 9 ;
    14e2:	39 e0       	ldi	r19, 0x09	; 9
    14e4:	3a 83       	std	Y+2, r19	; 0x02
    14e6:	28 c0       	rjmp	.+80     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				 break;
		case 4 : return '%' ;
    14e8:	85 e2       	ldi	r24, 0x25	; 37
    14ea:	8a 83       	std	Y+2, r24	; 0x02
    14ec:	25 c0       	rjmp	.+74     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				 break;
		case 5 : return 4 ;
    14ee:	94 e0       	ldi	r25, 0x04	; 4
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	22 c0       	rjmp	.+68     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				 break;
		case 6 : return 5 ;
    14f4:	25 e0       	ldi	r18, 0x05	; 5
    14f6:	2a 83       	std	Y+2, r18	; 0x02
    14f8:	1f c0       	rjmp	.+62     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
			 	 break;
		case 7 : return 7 ;
    14fa:	37 e0       	ldi	r19, 0x07	; 7
    14fc:	3a 83       	std	Y+2, r19	; 0x02
    14fe:	1c c0       	rjmp	.+56     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
		 	 	 break;
		case 8 : return 'x' ;
    1500:	88 e7       	ldi	r24, 0x78	; 120
    1502:	8a 83       	std	Y+2, r24	; 0x02
    1504:	19 c0       	rjmp	.+50     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
		 	 	 break;
		case 9 : return  1 ;
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	9a 83       	std	Y+2, r25	; 0x02
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				 break;
		case 10 : return 2 ;
    150c:	22 e0       	ldi	r18, 0x02	; 2
    150e:	2a 83       	std	Y+2, r18	; 0x02
    1510:	13 c0       	rjmp	.+38     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				  break;
		case 11 : return 3 ;
    1512:	33 e0       	ldi	r19, 0x03	; 3
    1514:	3a 83       	std	Y+2, r19	; 0x02
    1516:	10 c0       	rjmp	.+32     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				  break;
		case 12 : return '-' ;
    1518:	8d e2       	ldi	r24, 0x2D	; 45
    151a:	8a 83       	std	Y+2, r24	; 0x02
    151c:	0d c0       	rjmp	.+26     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				  break;
		case 13 : return '#' ;
    151e:	93 e2       	ldi	r25, 0x23	; 35
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	0a c0       	rjmp	.+20     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				  break;
		case 14 : return  0 ;
    1524:	1a 82       	std	Y+2, r1	; 0x02
    1526:	08 c0       	rjmp	.+16     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				  break;
		case 15 : return '=' ;
    1528:	2d e3       	ldi	r18, 0x3D	; 61
    152a:	2a 83       	std	Y+2, r18	; 0x02
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				  break;
		case 16 : return '+' ;
    152e:	3b e2       	ldi	r19, 0x2B	; 43
    1530:	3a 83       	std	Y+2, r19	; 0x02
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <Keypad_4x4_adjustSwitchNumber+0x13c>
				  break;
		default : return key ;
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8a 83       	std	Y+2, r24	; 0x02
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1550:	e4 e3       	ldi	r30, 0x34	; 52
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1558:	a1 e3       	ldi	r26, 0x31	; 49
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e1 e3       	ldi	r30, 0x31	; 49
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	80 67       	ori	r24, 0x70	; 112
    1564:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1566:	88 e3       	ldi	r24, 0x38	; 56
    1568:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    156c:	8c e0       	ldi	r24, 0x0C	; 12
    156e:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_sendCommand>
}
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	e9 97       	sbiw	r28, 0x39	; 57
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1594:	a2 e3       	ldi	r26, 0x32	; 50
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e2 e3       	ldi	r30, 0x32	; 50
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 7e       	andi	r24, 0xEF	; 239
    15a0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    15a2:	a2 e3       	ldi	r26, 0x32	; 50
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e2 e3       	ldi	r30, 0x32	; 50
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 7d       	andi	r24, 0xDF	; 223
    15ae:	8c 93       	st	X, r24
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	a0 e8       	ldi	r26, 0x80	; 128
    15b6:	bf e3       	ldi	r27, 0x3F	; 63
    15b8:	8d ab       	std	Y+53, r24	; 0x35
    15ba:	9e ab       	std	Y+54, r25	; 0x36
    15bc:	af ab       	std	Y+55, r26	; 0x37
    15be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c0:	6d a9       	ldd	r22, Y+53	; 0x35
    15c2:	7e a9       	ldd	r23, Y+54	; 0x36
    15c4:	8f a9       	ldd	r24, Y+55	; 0x37
    15c6:	98 ad       	ldd	r25, Y+56	; 0x38
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	4a ef       	ldi	r20, 0xFA	; 250
    15ce:	54 e4       	ldi	r21, 0x44	; 68
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	89 ab       	std	Y+49, r24	; 0x31
    15da:	9a ab       	std	Y+50, r25	; 0x32
    15dc:	ab ab       	std	Y+51, r26	; 0x33
    15de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15e0:	69 a9       	ldd	r22, Y+49	; 0x31
    15e2:	7a a9       	ldd	r23, Y+50	; 0x32
    15e4:	8b a9       	ldd	r24, Y+51	; 0x33
    15e6:	9c a9       	ldd	r25, Y+52	; 0x34
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e8       	ldi	r20, 0x80	; 128
    15ee:	5f e3       	ldi	r21, 0x3F	; 63
    15f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f4:	88 23       	and	r24, r24
    15f6:	2c f4       	brge	.+10     	; 0x1602 <LCD_sendCommand+0x84>
		__ticks = 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	98 ab       	std	Y+48, r25	; 0x30
    15fe:	8f a7       	std	Y+47, r24	; 0x2f
    1600:	3f c0       	rjmp	.+126    	; 0x1680 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1602:	69 a9       	ldd	r22, Y+49	; 0x31
    1604:	7a a9       	ldd	r23, Y+50	; 0x32
    1606:	8b a9       	ldd	r24, Y+51	; 0x33
    1608:	9c a9       	ldd	r25, Y+52	; 0x34
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	3f ef       	ldi	r19, 0xFF	; 255
    160e:	4f e7       	ldi	r20, 0x7F	; 127
    1610:	57 e4       	ldi	r21, 0x47	; 71
    1612:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1616:	18 16       	cp	r1, r24
    1618:	4c f5       	brge	.+82     	; 0x166c <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161a:	6d a9       	ldd	r22, Y+53	; 0x35
    161c:	7e a9       	ldd	r23, Y+54	; 0x36
    161e:	8f a9       	ldd	r24, Y+55	; 0x37
    1620:	98 ad       	ldd	r25, Y+56	; 0x38
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e2       	ldi	r20, 0x20	; 32
    1628:	51 e4       	ldi	r21, 0x41	; 65
    162a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	98 ab       	std	Y+48, r25	; 0x30
    1640:	8f a7       	std	Y+47, r24	; 0x2f
    1642:	0f c0       	rjmp	.+30     	; 0x1662 <LCD_sendCommand+0xe4>
    1644:	88 ec       	ldi	r24, 0xC8	; 200
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9e a7       	std	Y+46, r25	; 0x2e
    164a:	8d a7       	std	Y+45, r24	; 0x2d
    164c:	8d a5       	ldd	r24, Y+45	; 0x2d
    164e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <LCD_sendCommand+0xd2>
    1654:	9e a7       	std	Y+46, r25	; 0x2e
    1656:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	8f a5       	ldd	r24, Y+47	; 0x2f
    165a:	98 a9       	ldd	r25, Y+48	; 0x30
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	98 ab       	std	Y+48, r25	; 0x30
    1660:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1662:	8f a5       	ldd	r24, Y+47	; 0x2f
    1664:	98 a9       	ldd	r25, Y+48	; 0x30
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	69 f7       	brne	.-38     	; 0x1644 <LCD_sendCommand+0xc6>
    166a:	14 c0       	rjmp	.+40     	; 0x1694 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166c:	69 a9       	ldd	r22, Y+49	; 0x31
    166e:	7a a9       	ldd	r23, Y+50	; 0x32
    1670:	8b a9       	ldd	r24, Y+51	; 0x33
    1672:	9c a9       	ldd	r25, Y+52	; 0x34
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	98 ab       	std	Y+48, r25	; 0x30
    167e:	8f a7       	std	Y+47, r24	; 0x2f
    1680:	8f a5       	ldd	r24, Y+47	; 0x2f
    1682:	98 a9       	ldd	r25, Y+48	; 0x30
    1684:	9c a7       	std	Y+44, r25	; 0x2c
    1686:	8b a7       	std	Y+43, r24	; 0x2b
    1688:	8b a5       	ldd	r24, Y+43	; 0x2b
    168a:	9c a5       	ldd	r25, Y+44	; 0x2c
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <LCD_sendCommand+0x10e>
    1690:	9c a7       	std	Y+44, r25	; 0x2c
    1692:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1694:	a2 e3       	ldi	r26, 0x32	; 50
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e2 e3       	ldi	r30, 0x32	; 50
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	80 64       	ori	r24, 0x40	; 64
    16a0:	8c 93       	st	X, r24
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a0 e8       	ldi	r26, 0x80	; 128
    16a8:	bf e3       	ldi	r27, 0x3F	; 63
    16aa:	8f a3       	std	Y+39, r24	; 0x27
    16ac:	98 a7       	std	Y+40, r25	; 0x28
    16ae:	a9 a7       	std	Y+41, r26	; 0x29
    16b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b2:	6f a1       	ldd	r22, Y+39	; 0x27
    16b4:	78 a5       	ldd	r23, Y+40	; 0x28
    16b6:	89 a5       	ldd	r24, Y+41	; 0x29
    16b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a ef       	ldi	r20, 0xFA	; 250
    16c0:	54 e4       	ldi	r21, 0x44	; 68
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	8b a3       	std	Y+35, r24	; 0x23
    16cc:	9c a3       	std	Y+36, r25	; 0x24
    16ce:	ad a3       	std	Y+37, r26	; 0x25
    16d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16d2:	6b a1       	ldd	r22, Y+35	; 0x23
    16d4:	7c a1       	ldd	r23, Y+36	; 0x24
    16d6:	8d a1       	ldd	r24, Y+37	; 0x25
    16d8:	9e a1       	ldd	r25, Y+38	; 0x26
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <LCD_sendCommand+0x176>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9a a3       	std	Y+34, r25	; 0x22
    16f0:	89 a3       	std	Y+33, r24	; 0x21
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    16f4:	6b a1       	ldd	r22, Y+35	; 0x23
    16f6:	7c a1       	ldd	r23, Y+36	; 0x24
    16f8:	8d a1       	ldd	r24, Y+37	; 0x25
    16fa:	9e a1       	ldd	r25, Y+38	; 0x26
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f5       	brge	.+82     	; 0x175e <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	6f a1       	ldd	r22, Y+39	; 0x27
    170e:	78 a5       	ldd	r23, Y+40	; 0x28
    1710:	89 a5       	ldd	r24, Y+41	; 0x29
    1712:	9a a5       	ldd	r25, Y+42	; 0x2a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	9a a3       	std	Y+34, r25	; 0x22
    1732:	89 a3       	std	Y+33, r24	; 0x21
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <LCD_sendCommand+0x1d6>
    1736:	88 ec       	ldi	r24, 0xC8	; 200
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	98 a3       	std	Y+32, r25	; 0x20
    173c:	8f 8f       	std	Y+31, r24	; 0x1f
    173e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1740:	98 a1       	ldd	r25, Y+32	; 0x20
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_sendCommand+0x1c4>
    1746:	98 a3       	std	Y+32, r25	; 0x20
    1748:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	89 a1       	ldd	r24, Y+33	; 0x21
    174c:	9a a1       	ldd	r25, Y+34	; 0x22
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	9a a3       	std	Y+34, r25	; 0x22
    1752:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	89 a1       	ldd	r24, Y+33	; 0x21
    1756:	9a a1       	ldd	r25, Y+34	; 0x22
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f7       	brne	.-38     	; 0x1736 <LCD_sendCommand+0x1b8>
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175e:	6b a1       	ldd	r22, Y+35	; 0x23
    1760:	7c a1       	ldd	r23, Y+36	; 0x24
    1762:	8d a1       	ldd	r24, Y+37	; 0x25
    1764:	9e a1       	ldd	r25, Y+38	; 0x26
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9a a3       	std	Y+34, r25	; 0x22
    1770:	89 a3       	std	Y+33, r24	; 0x21
    1772:	89 a1       	ldd	r24, Y+33	; 0x21
    1774:	9a a1       	ldd	r25, Y+34	; 0x22
    1776:	9e 8f       	std	Y+30, r25	; 0x1e
    1778:	8d 8f       	std	Y+29, r24	; 0x1d
    177a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    177c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <LCD_sendCommand+0x200>
    1782:	9e 8f       	std	Y+30, r25	; 0x1e
    1784:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1786:	e5 e3       	ldi	r30, 0x35	; 53
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	89 ad       	ldd	r24, Y+57	; 0x39
    178c:	80 83       	st	Z, r24
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e8       	ldi	r26, 0x80	; 128
    1794:	bf e3       	ldi	r27, 0x3F	; 63
    1796:	89 8f       	std	Y+25, r24	; 0x19
    1798:	9a 8f       	std	Y+26, r25	; 0x1a
    179a:	ab 8f       	std	Y+27, r26	; 0x1b
    179c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179e:	69 8d       	ldd	r22, Y+25	; 0x19
    17a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	4a ef       	ldi	r20, 0xFA	; 250
    17ac:	54 e4       	ldi	r21, 0x44	; 68
    17ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8d 8b       	std	Y+21, r24	; 0x15
    17b8:	9e 8b       	std	Y+22, r25	; 0x16
    17ba:	af 8b       	std	Y+23, r26	; 0x17
    17bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17be:	6d 89       	ldd	r22, Y+21	; 0x15
    17c0:	7e 89       	ldd	r23, Y+22	; 0x16
    17c2:	8f 89       	ldd	r24, Y+23	; 0x17
    17c4:	98 8d       	ldd	r25, Y+24	; 0x18
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e8       	ldi	r20, 0x80	; 128
    17cc:	5f e3       	ldi	r21, 0x3F	; 63
    17ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <LCD_sendCommand+0x262>
		__ticks = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	9c 8b       	std	Y+20, r25	; 0x14
    17dc:	8b 8b       	std	Y+19, r24	; 0x13
    17de:	3f c0       	rjmp	.+126    	; 0x185e <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    17e0:	6d 89       	ldd	r22, Y+21	; 0x15
    17e2:	7e 89       	ldd	r23, Y+22	; 0x16
    17e4:	8f 89       	ldd	r24, Y+23	; 0x17
    17e6:	98 8d       	ldd	r25, Y+24	; 0x18
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	57 e4       	ldi	r21, 0x47	; 71
    17f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	4c f5       	brge	.+82     	; 0x184a <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f8:	69 8d       	ldd	r22, Y+25	; 0x19
    17fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e2       	ldi	r20, 0x20	; 32
    1806:	51 e4       	ldi	r21, 0x41	; 65
    1808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9c 8b       	std	Y+20, r25	; 0x14
    181e:	8b 8b       	std	Y+19, r24	; 0x13
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <LCD_sendCommand+0x2c2>
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9a 8b       	std	Y+18, r25	; 0x12
    1828:	89 8b       	std	Y+17, r24	; 0x11
    182a:	89 89       	ldd	r24, Y+17	; 0x11
    182c:	9a 89       	ldd	r25, Y+18	; 0x12
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_sendCommand+0x2b0>
    1832:	9a 8b       	std	Y+18, r25	; 0x12
    1834:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	8b 89       	ldd	r24, Y+19	; 0x13
    1838:	9c 89       	ldd	r25, Y+20	; 0x14
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	8b 89       	ldd	r24, Y+19	; 0x13
    1842:	9c 89       	ldd	r25, Y+20	; 0x14
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f7       	brne	.-38     	; 0x1822 <LCD_sendCommand+0x2a4>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	6d 89       	ldd	r22, Y+21	; 0x15
    184c:	7e 89       	ldd	r23, Y+22	; 0x16
    184e:	8f 89       	ldd	r24, Y+23	; 0x17
    1850:	98 8d       	ldd	r25, Y+24	; 0x18
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9c 8b       	std	Y+20, r25	; 0x14
    185c:	8b 8b       	std	Y+19, r24	; 0x13
    185e:	8b 89       	ldd	r24, Y+19	; 0x13
    1860:	9c 89       	ldd	r25, Y+20	; 0x14
    1862:	98 8b       	std	Y+16, r25	; 0x10
    1864:	8f 87       	std	Y+15, r24	; 0x0f
    1866:	8f 85       	ldd	r24, Y+15	; 0x0f
    1868:	98 89       	ldd	r25, Y+16	; 0x10
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_sendCommand+0x2ec>
    186e:	98 8b       	std	Y+16, r25	; 0x10
    1870:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1872:	a2 e3       	ldi	r26, 0x32	; 50
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e2 e3       	ldi	r30, 0x32	; 50
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8f 7b       	andi	r24, 0xBF	; 191
    187e:	8c 93       	st	X, r24
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a0 e8       	ldi	r26, 0x80	; 128
    1886:	bf e3       	ldi	r27, 0x3F	; 63
    1888:	8b 87       	std	Y+11, r24	; 0x0b
    188a:	9c 87       	std	Y+12, r25	; 0x0c
    188c:	ad 87       	std	Y+13, r26	; 0x0d
    188e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1890:	6b 85       	ldd	r22, Y+11	; 0x0b
    1892:	7c 85       	ldd	r23, Y+12	; 0x0c
    1894:	8d 85       	ldd	r24, Y+13	; 0x0d
    1896:	9e 85       	ldd	r25, Y+14	; 0x0e
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	4a ef       	ldi	r20, 0xFA	; 250
    189e:	54 e4       	ldi	r21, 0x44	; 68
    18a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	8f 83       	std	Y+7, r24	; 0x07
    18aa:	98 87       	std	Y+8, r25	; 0x08
    18ac:	a9 87       	std	Y+9, r26	; 0x09
    18ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18b0:	6f 81       	ldd	r22, Y+7	; 0x07
    18b2:	78 85       	ldd	r23, Y+8	; 0x08
    18b4:	89 85       	ldd	r24, Y+9	; 0x09
    18b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <LCD_sendCommand+0x354>
		__ticks = 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
    18d0:	3f c0       	rjmp	.+126    	; 0x1950 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    18d2:	6f 81       	ldd	r22, Y+7	; 0x07
    18d4:	78 85       	ldd	r23, Y+8	; 0x08
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	3f ef       	ldi	r19, 0xFF	; 255
    18de:	4f e7       	ldi	r20, 0x7F	; 127
    18e0:	57 e4       	ldi	r21, 0x47	; 71
    18e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	4c f5       	brge	.+82     	; 0x193c <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e2       	ldi	r20, 0x20	; 32
    18f8:	51 e4       	ldi	r21, 0x41	; 65
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <LCD_sendCommand+0x3b4>
    1914:	88 ec       	ldi	r24, 0xC8	; 200
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9c 83       	std	Y+4, r25	; 0x04
    191a:	8b 83       	std	Y+3, r24	; 0x03
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_sendCommand+0x3a2>
    1924:	9c 83       	std	Y+4, r25	; 0x04
    1926:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1928:	8d 81       	ldd	r24, Y+5	; 0x05
    192a:	9e 81       	ldd	r25, Y+6	; 0x06
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	69 f7       	brne	.-38     	; 0x1914 <LCD_sendCommand+0x396>
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193c:	6f 81       	ldd	r22, Y+7	; 0x07
    193e:	78 85       	ldd	r23, Y+8	; 0x08
    1940:	89 85       	ldd	r24, Y+9	; 0x09
    1942:	9a 85       	ldd	r25, Y+10	; 0x0a
    1944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9e 83       	std	Y+6, r25	; 0x06
    194e:	8d 83       	std	Y+5, r24	; 0x05
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	9e 81       	ldd	r25, Y+6	; 0x06
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <LCD_sendCommand+0x3de>
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1964:	e9 96       	adiw	r28, 0x39	; 57
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	e9 97       	sbiw	r28, 0x39	; 57
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    198c:	a2 e3       	ldi	r26, 0x32	; 50
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e2 e3       	ldi	r30, 0x32	; 50
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	80 61       	ori	r24, 0x10	; 16
    1998:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    199a:	a2 e3       	ldi	r26, 0x32	; 50
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e2 e3       	ldi	r30, 0x32	; 50
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 7d       	andi	r24, 0xDF	; 223
    19a6:	8c 93       	st	X, r24
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	a0 e8       	ldi	r26, 0x80	; 128
    19ae:	bf e3       	ldi	r27, 0x3F	; 63
    19b0:	8d ab       	std	Y+53, r24	; 0x35
    19b2:	9e ab       	std	Y+54, r25	; 0x36
    19b4:	af ab       	std	Y+55, r26	; 0x37
    19b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b8:	6d a9       	ldd	r22, Y+53	; 0x35
    19ba:	7e a9       	ldd	r23, Y+54	; 0x36
    19bc:	8f a9       	ldd	r24, Y+55	; 0x37
    19be:	98 ad       	ldd	r25, Y+56	; 0x38
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4a ef       	ldi	r20, 0xFA	; 250
    19c6:	54 e4       	ldi	r21, 0x44	; 68
    19c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	89 ab       	std	Y+49, r24	; 0x31
    19d2:	9a ab       	std	Y+50, r25	; 0x32
    19d4:	ab ab       	std	Y+51, r26	; 0x33
    19d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19d8:	69 a9       	ldd	r22, Y+49	; 0x31
    19da:	7a a9       	ldd	r23, Y+50	; 0x32
    19dc:	8b a9       	ldd	r24, Y+51	; 0x33
    19de:	9c a9       	ldd	r25, Y+52	; 0x34
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e8       	ldi	r20, 0x80	; 128
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ec:	88 23       	and	r24, r24
    19ee:	2c f4       	brge	.+10     	; 0x19fa <LCD_displayCharacter+0x84>
		__ticks = 1;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	98 ab       	std	Y+48, r25	; 0x30
    19f6:	8f a7       	std	Y+47, r24	; 0x2f
    19f8:	3f c0       	rjmp	.+126    	; 0x1a78 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    19fa:	69 a9       	ldd	r22, Y+49	; 0x31
    19fc:	7a a9       	ldd	r23, Y+50	; 0x32
    19fe:	8b a9       	ldd	r24, Y+51	; 0x33
    1a00:	9c a9       	ldd	r25, Y+52	; 0x34
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	3f ef       	ldi	r19, 0xFF	; 255
    1a06:	4f e7       	ldi	r20, 0x7F	; 127
    1a08:	57 e4       	ldi	r21, 0x47	; 71
    1a0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a0e:	18 16       	cp	r1, r24
    1a10:	4c f5       	brge	.+82     	; 0x1a64 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a12:	6d a9       	ldd	r22, Y+53	; 0x35
    1a14:	7e a9       	ldd	r23, Y+54	; 0x36
    1a16:	8f a9       	ldd	r24, Y+55	; 0x37
    1a18:	98 ad       	ldd	r25, Y+56	; 0x38
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e2       	ldi	r20, 0x20	; 32
    1a20:	51 e4       	ldi	r21, 0x41	; 65
    1a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	98 ab       	std	Y+48, r25	; 0x30
    1a38:	8f a7       	std	Y+47, r24	; 0x2f
    1a3a:	0f c0       	rjmp	.+30     	; 0x1a5a <LCD_displayCharacter+0xe4>
    1a3c:	88 ec       	ldi	r24, 0xC8	; 200
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9e a7       	std	Y+46, r25	; 0x2e
    1a42:	8d a7       	std	Y+45, r24	; 0x2d
    1a44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <LCD_displayCharacter+0xd2>
    1a4c:	9e a7       	std	Y+46, r25	; 0x2e
    1a4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a52:	98 a9       	ldd	r25, Y+48	; 0x30
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	98 ab       	std	Y+48, r25	; 0x30
    1a58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	69 f7       	brne	.-38     	; 0x1a3c <LCD_displayCharacter+0xc6>
    1a62:	14 c0       	rjmp	.+40     	; 0x1a8c <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a64:	69 a9       	ldd	r22, Y+49	; 0x31
    1a66:	7a a9       	ldd	r23, Y+50	; 0x32
    1a68:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	98 ab       	std	Y+48, r25	; 0x30
    1a76:	8f a7       	std	Y+47, r24	; 0x2f
    1a78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a7c:	9c a7       	std	Y+44, r25	; 0x2c
    1a7e:	8b a7       	std	Y+43, r24	; 0x2b
    1a80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <LCD_displayCharacter+0x10e>
    1a88:	9c a7       	std	Y+44, r25	; 0x2c
    1a8a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1a8c:	a2 e3       	ldi	r26, 0x32	; 50
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e2 e3       	ldi	r30, 0x32	; 50
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	80 64       	ori	r24, 0x40	; 64
    1a98:	8c 93       	st	X, r24
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e8       	ldi	r26, 0x80	; 128
    1aa0:	bf e3       	ldi	r27, 0x3F	; 63
    1aa2:	8f a3       	std	Y+39, r24	; 0x27
    1aa4:	98 a7       	std	Y+40, r25	; 0x28
    1aa6:	a9 a7       	std	Y+41, r26	; 0x29
    1aa8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aaa:	6f a1       	ldd	r22, Y+39	; 0x27
    1aac:	78 a5       	ldd	r23, Y+40	; 0x28
    1aae:	89 a5       	ldd	r24, Y+41	; 0x29
    1ab0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a ef       	ldi	r20, 0xFA	; 250
    1ab8:	54 e4       	ldi	r21, 0x44	; 68
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8b a3       	std	Y+35, r24	; 0x23
    1ac4:	9c a3       	std	Y+36, r25	; 0x24
    1ac6:	ad a3       	std	Y+37, r26	; 0x25
    1ac8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aca:	6b a1       	ldd	r22, Y+35	; 0x23
    1acc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ace:	8d a1       	ldd	r24, Y+37	; 0x25
    1ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <LCD_displayCharacter+0x176>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9a a3       	std	Y+34, r25	; 0x22
    1ae8:	89 a3       	std	Y+33, r24	; 0x21
    1aea:	3f c0       	rjmp	.+126    	; 0x1b6a <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1aec:	6b a1       	ldd	r22, Y+35	; 0x23
    1aee:	7c a1       	ldd	r23, Y+36	; 0x24
    1af0:	8d a1       	ldd	r24, Y+37	; 0x25
    1af2:	9e a1       	ldd	r25, Y+38	; 0x26
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	3f ef       	ldi	r19, 0xFF	; 255
    1af8:	4f e7       	ldi	r20, 0x7F	; 127
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b00:	18 16       	cp	r1, r24
    1b02:	4c f5       	brge	.+82     	; 0x1b56 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b04:	6f a1       	ldd	r22, Y+39	; 0x27
    1b06:	78 a5       	ldd	r23, Y+40	; 0x28
    1b08:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e2       	ldi	r20, 0x20	; 32
    1b12:	51 e4       	ldi	r21, 0x41	; 65
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9a a3       	std	Y+34, r25	; 0x22
    1b2a:	89 a3       	std	Y+33, r24	; 0x21
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <LCD_displayCharacter+0x1d6>
    1b2e:	88 ec       	ldi	r24, 0xC8	; 200
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	98 a3       	std	Y+32, r25	; 0x20
    1b34:	8f 8f       	std	Y+31, r24	; 0x1f
    1b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b38:	98 a1       	ldd	r25, Y+32	; 0x20
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_displayCharacter+0x1c4>
    1b3e:	98 a3       	std	Y+32, r25	; 0x20
    1b40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b42:	89 a1       	ldd	r24, Y+33	; 0x21
    1b44:	9a a1       	ldd	r25, Y+34	; 0x22
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	9a a3       	std	Y+34, r25	; 0x22
    1b4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	69 f7       	brne	.-38     	; 0x1b2e <LCD_displayCharacter+0x1b8>
    1b54:	14 c0       	rjmp	.+40     	; 0x1b7e <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	6b a1       	ldd	r22, Y+35	; 0x23
    1b58:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	9a a3       	std	Y+34, r25	; 0x22
    1b68:	89 a3       	std	Y+33, r24	; 0x21
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b70:	8d 8f       	std	Y+29, r24	; 0x1d
    1b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <LCD_displayCharacter+0x200>
    1b7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1b7e:	e5 e3       	ldi	r30, 0x35	; 53
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	89 ad       	ldd	r24, Y+57	; 0x39
    1b84:	80 83       	st	Z, r24
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 e8       	ldi	r26, 0x80	; 128
    1b8c:	bf e3       	ldi	r27, 0x3F	; 63
    1b8e:	89 8f       	std	Y+25, r24	; 0x19
    1b90:	9a 8f       	std	Y+26, r25	; 0x1a
    1b92:	ab 8f       	std	Y+27, r26	; 0x1b
    1b94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	69 8d       	ldd	r22, Y+25	; 0x19
    1b98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a ef       	ldi	r20, 0xFA	; 250
    1ba4:	54 e4       	ldi	r21, 0x44	; 68
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8d 8b       	std	Y+21, r24	; 0x15
    1bb0:	9e 8b       	std	Y+22, r25	; 0x16
    1bb2:	af 8b       	std	Y+23, r26	; 0x17
    1bb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1bba:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9c 8b       	std	Y+20, r25	; 0x14
    1bd4:	8b 8b       	std	Y+19, r24	; 0x13
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1bd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bda:	7e 89       	ldd	r23, Y+22	; 0x16
    1bdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bde:	98 8d       	ldd	r25, Y+24	; 0x18
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9c 8b       	std	Y+20, r25	; 0x14
    1c16:	8b 8b       	std	Y+19, r24	; 0x13
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <LCD_displayCharacter+0x2c2>
    1c1a:	88 ec       	ldi	r24, 0xC8	; 200
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9a 8b       	std	Y+18, r25	; 0x12
    1c20:	89 8b       	std	Y+17, r24	; 0x11
    1c22:	89 89       	ldd	r24, Y+17	; 0x11
    1c24:	9a 89       	ldd	r25, Y+18	; 0x12
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_displayCharacter+0x2b0>
    1c2a:	9a 8b       	std	Y+18, r25	; 0x12
    1c2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c30:	9c 89       	ldd	r25, Y+20	; 0x14
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9c 8b       	std	Y+20, r25	; 0x14
    1c36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <LCD_displayCharacter+0x2a4>
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	6d 89       	ldd	r22, Y+21	; 0x15
    1c44:	7e 89       	ldd	r23, Y+22	; 0x16
    1c46:	8f 89       	ldd	r24, Y+23	; 0x17
    1c48:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9c 8b       	std	Y+20, r25	; 0x14
    1c54:	8b 8b       	std	Y+19, r24	; 0x13
    1c56:	8b 89       	ldd	r24, Y+19	; 0x13
    1c58:	9c 89       	ldd	r25, Y+20	; 0x14
    1c5a:	98 8b       	std	Y+16, r25	; 0x10
    1c5c:	8f 87       	std	Y+15, r24	; 0x0f
    1c5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c60:	98 89       	ldd	r25, Y+16	; 0x10
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_displayCharacter+0x2ec>
    1c66:	98 8b       	std	Y+16, r25	; 0x10
    1c68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c6a:	a2 e3       	ldi	r26, 0x32	; 50
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e2 e3       	ldi	r30, 0x32	; 50
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8f 7b       	andi	r24, 0xBF	; 191
    1c76:	8c 93       	st	X, r24
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e8       	ldi	r26, 0x80	; 128
    1c7e:	bf e3       	ldi	r27, 0x3F	; 63
    1c80:	8b 87       	std	Y+11, r24	; 0x0b
    1c82:	9c 87       	std	Y+12, r25	; 0x0c
    1c84:	ad 87       	std	Y+13, r26	; 0x0d
    1c86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a ef       	ldi	r20, 0xFA	; 250
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	8f 83       	std	Y+7, r24	; 0x07
    1ca2:	98 87       	std	Y+8, r25	; 0x08
    1ca4:	a9 87       	std	Y+9, r26	; 0x09
    1ca6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <LCD_displayCharacter+0x354>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <LCD_displayCharacter+0x3b4>
    1d0c:	88 ec       	ldi	r24, 0xC8	; 200
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <LCD_displayCharacter+0x3a2>
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <LCD_displayCharacter+0x396>
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_displayCharacter+0x3de>
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    1d5c:	e9 96       	adiw	r28, 0x39	; 57
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <LCD_displayString+0x6>
    1d74:	0f 92       	push	r0
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	9b 83       	std	Y+3, r25	; 0x03
    1d7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d7e:	19 82       	std	Y+1, r1	; 0x01
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	e2 0f       	add	r30, r18
    1d90:	f3 1f       	adc	r31, r19
    1d92:	80 81       	ld	r24, Z
    1d94:	0e 94 bb 0c 	call	0x1976	; 0x1976 <LCD_displayCharacter>
		i++;
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	28 2f       	mov	r18, r24
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	fc 01       	movw	r30, r24
    1daa:	e2 0f       	add	r30, r18
    1dac:	f3 1f       	adc	r31, r19
    1dae:	80 81       	ld	r24, Z
    1db0:	88 23       	and	r24, r24
    1db2:	39 f7       	brne	.-50     	; 0x1d82 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <LCD_goToRowColumn+0x6>
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <LCD_goToRowColumn+0x8>
    1dc8:	0f 92       	push	r0
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	8a 83       	std	Y+2, r24	; 0x02
    1dd0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	3d 83       	std	Y+5, r19	; 0x05
    1dda:	2c 83       	std	Y+4, r18	; 0x04
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dde:	9d 81       	ldd	r25, Y+5	; 0x05
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	91 05       	cpc	r25, r1
    1de4:	c1 f0       	breq	.+48     	; 0x1e16 <LCD_goToRowColumn+0x56>
    1de6:	2c 81       	ldd	r18, Y+4	; 0x04
    1de8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dea:	22 30       	cpi	r18, 0x02	; 2
    1dec:	31 05       	cpc	r19, r1
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <LCD_goToRowColumn+0x3a>
    1df0:	8c 81       	ldd	r24, Y+4	; 0x04
    1df2:	9d 81       	ldd	r25, Y+5	; 0x05
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	61 f0       	breq	.+24     	; 0x1e10 <LCD_goToRowColumn+0x50>
    1df8:	19 c0       	rjmp	.+50     	; 0x1e2c <LCD_goToRowColumn+0x6c>
    1dfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	69 f0       	breq	.+26     	; 0x1e1e <LCD_goToRowColumn+0x5e>
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	9d 81       	ldd	r25, Y+5	; 0x05
    1e08:	83 30       	cpi	r24, 0x03	; 3
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	61 f0       	breq	.+24     	; 0x1e26 <LCD_goToRowColumn+0x66>
    1e0e:	0e c0       	rjmp	.+28     	; 0x1e2c <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	0b c0       	rjmp	.+22     	; 0x1e2c <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	80 5c       	subi	r24, 0xC0	; 192
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	07 c0       	rjmp	.+14     	; 0x1e2c <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	80 5f       	subi	r24, 0xF0	; 240
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	80 5b       	subi	r24, 0xB0	; 176
    1e2a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	80 68       	ori	r24, 0x80	; 128
    1e30:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_sendCommand>
}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <LCD_displayStringRowColumn+0x6>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <LCD_displayStringRowColumn+0x8>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	6a 83       	std	Y+2, r22	; 0x02
    1e54:	5c 83       	std	Y+4, r21	; 0x04
    1e56:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
    1e5a:	6a 81       	ldd	r22, Y+2	; 0x02
    1e5c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	62 97       	sbiw	r28, 0x12	; 18
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	9a 8b       	std	Y+18, r25	; 0x12
    1e8c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1e8e:	89 89       	ldd	r24, Y+17	; 0x11
    1e90:	9a 89       	ldd	r25, Y+18	; 0x12
    1e92:	9e 01       	movw	r18, r28
    1e94:	2f 5f       	subi	r18, 0xFF	; 255
    1e96:	3f 4f       	sbci	r19, 0xFF	; 255
    1e98:	b9 01       	movw	r22, r18
    1e9a:	4a e0       	ldi	r20, 0x0A	; 10
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	0e 94 df 13 	call	0x27be	; 0x27be <itoa>
   LCD_displayString(buff);
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <LCD_displayString>
}
    1eaa:	62 96       	adiw	r28, 0x12	; 18
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	de bf       	out	0x3e, r29	; 62
    1eb2:	0f be       	out	0x3f, r0	; 63
    1eb4:	cd bf       	out	0x3d, r28	; 61
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_sendCommand>
}
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <main>:
#include "uart.h"
/**********************************************************
 *                   Function Definitions                 *
 **********************************************************/
int main ()
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
    1ed8:	e7 e3       	ldi	r30, 0x37	; 55
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	8f ef       	ldi	r24, 0xFF	; 255
    1ede:	80 83       	st	Z, r24

	/*Enable global interrupts in MC. */
	SREG  |= (1<<7);
    1ee0:	af e5       	ldi	r26, 0x5F	; 95
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	ef e5       	ldi	r30, 0x5F	; 95
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 68       	ori	r24, 0x80	; 128
    1eec:	8c 93       	st	X, r24

	/*initiate the programs and modules*/
	startupProgram();
    1eee:	0e 94 01 07 	call	0xe02	; 0xe02 <startupProgram>
	PORTB= 0xff;
    1ef2:	e8 e3       	ldi	r30, 0x38	; 56
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	8f ef       	ldi	r24, 0xFF	; 255
    1ef8:	80 83       	st	Z, r24

	while (1)
	{
		if ( flagProgram == 1)
    1efa:	80 91 76 01 	lds	r24, 0x0176
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	19 f4       	brne	.+6      	; 0x1f08 <main+0x38>
		{
			firstProgram();
    1f02:	0e 94 41 07 	call	0xe82	; 0xe82 <firstProgram>
    1f06:	f9 cf       	rjmp	.-14     	; 0x1efa <main+0x2a>
		}
		else if ( flagProgram == 2)
    1f08:	80 91 76 01 	lds	r24, 0x0176
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	a9 f7       	brne	.-22     	; 0x1efa <main+0x2a>
		{
			defaultProgram();
    1f10:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <defaultProgram>
    1f14:	f2 cf       	rjmp	.-28     	; 0x1efa <main+0x2a>

00001f16 <__vector_9>:

/**********************************************************
 *                          ISRs                          *
 **********************************************************/
ISR(TIMER0_OVF_vect)
{
    1f16:	1f 92       	push	r1
    1f18:	0f 92       	push	r0
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	0f 92       	push	r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	2f 93       	push	r18
    1f22:	3f 93       	push	r19
    1f24:	4f 93       	push	r20
    1f26:	5f 93       	push	r21
    1f28:	6f 93       	push	r22
    1f2a:	7f 93       	push	r23
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	af 93       	push	r26
    1f32:	bf 93       	push	r27
    1f34:	ef 93       	push	r30
    1f36:	ff 93       	push	r31
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER0] != NULL_PTR)
    1f40:	80 91 7a 01 	lds	r24, 0x017A
    1f44:	90 91 7b 01 	lds	r25, 0x017B
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	29 f0       	breq	.+10     	; 0x1f56 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER0])();
    1f4c:	e0 91 7a 01 	lds	r30, 0x017A
    1f50:	f0 91 7b 01 	lds	r31, 0x017B
    1f54:	09 95       	icall
	}
}
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	ff 91       	pop	r31
    1f5c:	ef 91       	pop	r30
    1f5e:	bf 91       	pop	r27
    1f60:	af 91       	pop	r26
    1f62:	9f 91       	pop	r25
    1f64:	8f 91       	pop	r24
    1f66:	7f 91       	pop	r23
    1f68:	6f 91       	pop	r22
    1f6a:	5f 91       	pop	r21
    1f6c:	4f 91       	pop	r20
    1f6e:	3f 91       	pop	r19
    1f70:	2f 91       	pop	r18
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	0f 90       	pop	r0
    1f78:	1f 90       	pop	r1
    1f7a:	18 95       	reti

00001f7c <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1f7c:	1f 92       	push	r1
    1f7e:	0f 92       	push	r0
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	0f 92       	push	r0
    1f84:	11 24       	eor	r1, r1
    1f86:	2f 93       	push	r18
    1f88:	3f 93       	push	r19
    1f8a:	4f 93       	push	r20
    1f8c:	5f 93       	push	r21
    1f8e:	6f 93       	push	r22
    1f90:	7f 93       	push	r23
    1f92:	8f 93       	push	r24
    1f94:	9f 93       	push	r25
    1f96:	af 93       	push	r26
    1f98:	bf 93       	push	r27
    1f9a:	ef 93       	push	r30
    1f9c:	ff 93       	push	r31
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER0] != NULL_PTR)
    1fa6:	80 91 7a 01 	lds	r24, 0x017A
    1faa:	90 91 7b 01 	lds	r25, 0x017B
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	29 f0       	breq	.+10     	; 0x1fbc <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER0])();
    1fb2:	e0 91 7a 01 	lds	r30, 0x017A
    1fb6:	f0 91 7b 01 	lds	r31, 0x017B
    1fba:	09 95       	icall
	}
}
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	ff 91       	pop	r31
    1fc2:	ef 91       	pop	r30
    1fc4:	bf 91       	pop	r27
    1fc6:	af 91       	pop	r26
    1fc8:	9f 91       	pop	r25
    1fca:	8f 91       	pop	r24
    1fcc:	7f 91       	pop	r23
    1fce:	6f 91       	pop	r22
    1fd0:	5f 91       	pop	r21
    1fd2:	4f 91       	pop	r20
    1fd4:	3f 91       	pop	r19
    1fd6:	2f 91       	pop	r18
    1fd8:	0f 90       	pop	r0
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	0f 90       	pop	r0
    1fde:	1f 90       	pop	r1
    1fe0:	18 95       	reti

00001fe2 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1fe2:	1f 92       	push	r1
    1fe4:	0f 92       	push	r0
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	0f 92       	push	r0
    1fea:	11 24       	eor	r1, r1
    1fec:	2f 93       	push	r18
    1fee:	3f 93       	push	r19
    1ff0:	4f 93       	push	r20
    1ff2:	5f 93       	push	r21
    1ff4:	6f 93       	push	r22
    1ff6:	7f 93       	push	r23
    1ff8:	8f 93       	push	r24
    1ffa:	9f 93       	push	r25
    1ffc:	af 93       	push	r26
    1ffe:	bf 93       	push	r27
    2000:	ef 93       	push	r30
    2002:	ff 93       	push	r31
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER1] != NULL_PTR)
    200c:	80 91 7c 01 	lds	r24, 0x017C
    2010:	90 91 7d 01 	lds	r25, 0x017D
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	29 f0       	breq	.+10     	; 0x2022 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER1])();
    2018:	e0 91 7c 01 	lds	r30, 0x017C
    201c:	f0 91 7d 01 	lds	r31, 0x017D
    2020:	09 95       	icall
	}
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	ff 91       	pop	r31
    2028:	ef 91       	pop	r30
    202a:	bf 91       	pop	r27
    202c:	af 91       	pop	r26
    202e:	9f 91       	pop	r25
    2030:	8f 91       	pop	r24
    2032:	7f 91       	pop	r23
    2034:	6f 91       	pop	r22
    2036:	5f 91       	pop	r21
    2038:	4f 91       	pop	r20
    203a:	3f 91       	pop	r19
    203c:	2f 91       	pop	r18
    203e:	0f 90       	pop	r0
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	0f 90       	pop	r0
    2044:	1f 90       	pop	r1
    2046:	18 95       	reti

00002048 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	2f 93       	push	r18
    2054:	3f 93       	push	r19
    2056:	4f 93       	push	r20
    2058:	5f 93       	push	r21
    205a:	6f 93       	push	r22
    205c:	7f 93       	push	r23
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	ef 93       	push	r30
    2068:	ff 93       	push	r31
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER1] != NULL_PTR)
    2072:	80 91 7c 01 	lds	r24, 0x017C
    2076:	90 91 7d 01 	lds	r25, 0x017D
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	29 f0       	breq	.+10     	; 0x2088 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER1])();
    207e:	e0 91 7c 01 	lds	r30, 0x017C
    2082:	f0 91 7d 01 	lds	r31, 0x017D
    2086:	09 95       	icall
	}
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	ff 91       	pop	r31
    208e:	ef 91       	pop	r30
    2090:	bf 91       	pop	r27
    2092:	af 91       	pop	r26
    2094:	9f 91       	pop	r25
    2096:	8f 91       	pop	r24
    2098:	7f 91       	pop	r23
    209a:	6f 91       	pop	r22
    209c:	5f 91       	pop	r21
    209e:	4f 91       	pop	r20
    20a0:	3f 91       	pop	r19
    20a2:	2f 91       	pop	r18
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	0f 90       	pop	r0
    20aa:	1f 90       	pop	r1
    20ac:	18 95       	reti

000020ae <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    20ae:	1f 92       	push	r1
    20b0:	0f 92       	push	r0
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	0f 92       	push	r0
    20b6:	11 24       	eor	r1, r1
    20b8:	2f 93       	push	r18
    20ba:	3f 93       	push	r19
    20bc:	4f 93       	push	r20
    20be:	5f 93       	push	r21
    20c0:	6f 93       	push	r22
    20c2:	7f 93       	push	r23
    20c4:	8f 93       	push	r24
    20c6:	9f 93       	push	r25
    20c8:	af 93       	push	r26
    20ca:	bf 93       	push	r27
    20cc:	ef 93       	push	r30
    20ce:	ff 93       	push	r31
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER2] != NULL_PTR)
    20d8:	80 91 7e 01 	lds	r24, 0x017E
    20dc:	90 91 7f 01 	lds	r25, 0x017F
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	29 f0       	breq	.+10     	; 0x20ee <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER2])();
    20e4:	e0 91 7e 01 	lds	r30, 0x017E
    20e8:	f0 91 7f 01 	lds	r31, 0x017F
    20ec:	09 95       	icall
	}
}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	ff 91       	pop	r31
    20f4:	ef 91       	pop	r30
    20f6:	bf 91       	pop	r27
    20f8:	af 91       	pop	r26
    20fa:	9f 91       	pop	r25
    20fc:	8f 91       	pop	r24
    20fe:	7f 91       	pop	r23
    2100:	6f 91       	pop	r22
    2102:	5f 91       	pop	r21
    2104:	4f 91       	pop	r20
    2106:	3f 91       	pop	r19
    2108:	2f 91       	pop	r18
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	0f 90       	pop	r0
    2110:	1f 90       	pop	r1
    2112:	18 95       	reti

00002114 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	2f 93       	push	r18
    2120:	3f 93       	push	r19
    2122:	4f 93       	push	r20
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	ef 93       	push	r30
    2134:	ff 93       	push	r31
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER2] != NULL_PTR)
    213e:	80 91 7e 01 	lds	r24, 0x017E
    2142:	90 91 7f 01 	lds	r25, 0x017F
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	29 f0       	breq	.+10     	; 0x2154 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER2])();
    214a:	e0 91 7e 01 	lds	r30, 0x017E
    214e:	f0 91 7f 01 	lds	r31, 0x017F
    2152:	09 95       	icall
	}
}
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	ff 91       	pop	r31
    215a:	ef 91       	pop	r30
    215c:	bf 91       	pop	r27
    215e:	af 91       	pop	r26
    2160:	9f 91       	pop	r25
    2162:	8f 91       	pop	r24
    2164:	7f 91       	pop	r23
    2166:	6f 91       	pop	r22
    2168:	5f 91       	pop	r21
    216a:	4f 91       	pop	r20
    216c:	3f 91       	pop	r19
    216e:	2f 91       	pop	r18
    2170:	0f 90       	pop	r0
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	0f 90       	pop	r0
    2176:	1f 90       	pop	r1
    2178:	18 95       	reti

0000217a <TIMER_init>:

/*
 * Description: Function to initiate timers
 */
void TIMER_init(TIMER_Config * timerParam)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <TIMER_init+0x6>
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
	if (timerParam->number == TIMER0)
    2188:	e9 81       	ldd	r30, Y+1	; 0x01
    218a:	fa 81       	ldd	r31, Y+2	; 0x02
    218c:	80 81       	ld	r24, Z
    218e:	88 23       	and	r24, r24
    2190:	09 f0       	breq	.+2      	; 0x2194 <TIMER_init+0x1a>
    2192:	4b c0       	rjmp	.+150    	; 0x222a <TIMER_init+0xb0>
	{
		/*Configure Timer0 Control register
		 * 1. Non PWM mode FOC0=1
		 * 2. Timer Mode and clock is an input
		 */
		TCCR0 = (1<<FOC0) ;
    2194:	e3 e5       	ldi	r30, 0x53	; 83
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 e8       	ldi	r24, 0x80	; 128
    219a:	80 83       	st	Z, r24
		/*Select clock prescaler for timer*/
		TCCR0 = (TCCR0 & 0xF8) | (timerParam->clock);
    219c:	a3 e5       	ldi	r26, 0x53	; 83
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e3 e5       	ldi	r30, 0x53	; 83
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	98 2f       	mov	r25, r24
    21a8:	98 7f       	andi	r25, 0xF8	; 248
    21aa:	e9 81       	ldd	r30, Y+1	; 0x01
    21ac:	fa 81       	ldd	r31, Y+2	; 0x02
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	89 2b       	or	r24, r25
    21b2:	8c 93       	st	X, r24

		/*Set inital value for the timer*/
		TCNT0 = timerParam->initVal ;
    21b4:	a2 e5       	ldi	r26, 0x52	; 82
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ba:	fa 81       	ldd	r31, Y+2	; 0x02
    21bc:	83 81       	ldd	r24, Z+3	; 0x03
    21be:	94 81       	ldd	r25, Z+4	; 0x04
    21c0:	8c 93       	st	X, r24

		if (timerParam->mode == Normal_Mode)
    21c2:	e9 81       	ldd	r30, Y+1	; 0x01
    21c4:	fa 81       	ldd	r31, Y+2	; 0x02
    21c6:	81 81       	ldd	r24, Z+1	; 0x01
    21c8:	88 23       	and	r24, r24
    21ca:	41 f4       	brne	.+16     	; 0x21dc <TIMER_init+0x62>
		{
			/*Enable Timer0 Overflow Interrupt*/
			TIMSK |= (1<<TOIE0);
    21cc:	a9 e5       	ldi	r26, 0x59	; 89
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e9 e5       	ldi	r30, 0x59	; 89
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	81 60       	ori	r24, 0x01	; 1
    21d8:	8c 93       	st	X, r24
    21da:	d8 c0       	rjmp	.+432    	; 0x238c <TIMER_init+0x212>
		}
		else if (timerParam->mode == Compare_Mode)
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	81 81       	ldd	r24, Z+1	; 0x01
    21e2:	82 30       	cpi	r24, 0x02	; 2
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <TIMER_init+0x6e>
    21e6:	d2 c0       	rjmp	.+420    	; 0x238c <TIMER_init+0x212>
		{
			/*select Compare mode for Timer0*/
			TCCR0 = (TCCR0 & 0xF7) | ((timerParam->mode)<<2);
    21e8:	a3 e5       	ldi	r26, 0x53	; 83
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e3 e5       	ldi	r30, 0x53	; 83
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	28 2f       	mov	r18, r24
    21f4:	27 7f       	andi	r18, 0xF7	; 247
    21f6:	e9 81       	ldd	r30, Y+1	; 0x01
    21f8:	fa 81       	ldd	r31, Y+2	; 0x02
    21fa:	81 81       	ldd	r24, Z+1	; 0x01
    21fc:	88 2f       	mov	r24, r24
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	82 2b       	or	r24, r18
    220a:	8c 93       	st	X, r24
			/*Set the compare value for Timer0*/
			OCR0 = timerParam->compVal ;
    220c:	ac e5       	ldi	r26, 0x5C	; 92
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e9 81       	ldd	r30, Y+1	; 0x01
    2212:	fa 81       	ldd	r31, Y+2	; 0x02
    2214:	85 81       	ldd	r24, Z+5	; 0x05
    2216:	96 81       	ldd	r25, Z+6	; 0x06
    2218:	8c 93       	st	X, r24
			/*Enable Timer0 Compare Interrupt*/
			TIMSK |= (1<<OCIE0);
    221a:	a9 e5       	ldi	r26, 0x59	; 89
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e9 e5       	ldi	r30, 0x59	; 89
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	82 60       	ori	r24, 0x02	; 2
    2226:	8c 93       	st	X, r24
    2228:	b1 c0       	rjmp	.+354    	; 0x238c <TIMER_init+0x212>
		}
	}
	else if (timerParam->number == TIMER1)
    222a:	e9 81       	ldd	r30, Y+1	; 0x01
    222c:	fa 81       	ldd	r31, Y+2	; 0x02
    222e:	80 81       	ld	r24, Z
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	09 f0       	breq	.+2      	; 0x2236 <TIMER_init+0xbc>
    2234:	5c c0       	rjmp	.+184    	; 0x22ee <TIMER_init+0x174>
		/*Configure Timer1 Control register
		 * 1. Set Force Output Compare to avoid working with PWM mode
		 * FOC1A=1,FOC1B=1
		 * 2. Timer Mode and clock is an input
		 */
		TCCR1A |= (1<<FOC1A)| (1<<FOC1B);
    2236:	af e4       	ldi	r26, 0x4F	; 79
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	ef e4       	ldi	r30, 0x4F	; 79
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	8c 60       	ori	r24, 0x0C	; 12
    2242:	8c 93       	st	X, r24

		/*Select clock prescaler for Timer1*/
		TCCR1B |= (TCCR1B & 0xF8) | (timerParam->clock);
    2244:	ae e4       	ldi	r26, 0x4E	; 78
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	ee e4       	ldi	r30, 0x4E	; 78
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	28 2f       	mov	r18, r24
    2250:	ee e4       	ldi	r30, 0x4E	; 78
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	98 2f       	mov	r25, r24
    2258:	98 7f       	andi	r25, 0xF8	; 248
    225a:	e9 81       	ldd	r30, Y+1	; 0x01
    225c:	fa 81       	ldd	r31, Y+2	; 0x02
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	89 2b       	or	r24, r25
    2262:	82 2b       	or	r24, r18
    2264:	8c 93       	st	X, r24

		/*Set initial value for the Timer1*/
		TCNT1 = timerParam->initVal ;
    2266:	ac e4       	ldi	r26, 0x4C	; 76
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e9 81       	ldd	r30, Y+1	; 0x01
    226c:	fa 81       	ldd	r31, Y+2	; 0x02
    226e:	83 81       	ldd	r24, Z+3	; 0x03
    2270:	94 81       	ldd	r25, Z+4	; 0x04
    2272:	11 96       	adiw	r26, 0x01	; 1
    2274:	9c 93       	st	X, r25
    2276:	8e 93       	st	-X, r24

		if (timerParam->mode == Normal_Mode)
    2278:	e9 81       	ldd	r30, Y+1	; 0x01
    227a:	fa 81       	ldd	r31, Y+2	; 0x02
    227c:	81 81       	ldd	r24, Z+1	; 0x01
    227e:	88 23       	and	r24, r24
    2280:	41 f4       	brne	.+16     	; 0x2292 <TIMER_init+0x118>
		{
			/*Enable Timer1 Overflow Interrupt*/
			TIMSK |= (1<<TOIE1);
    2282:	a9 e5       	ldi	r26, 0x59	; 89
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e9 e5       	ldi	r30, 0x59	; 89
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	84 60       	ori	r24, 0x04	; 4
    228e:	8c 93       	st	X, r24
    2290:	7d c0       	rjmp	.+250    	; 0x238c <TIMER_init+0x212>
		}
		else if (timerParam->mode == Compare_Mode)
    2292:	e9 81       	ldd	r30, Y+1	; 0x01
    2294:	fa 81       	ldd	r31, Y+2	; 0x02
    2296:	81 81       	ldd	r24, Z+1	; 0x01
    2298:	82 30       	cpi	r24, 0x02	; 2
    229a:	09 f0       	breq	.+2      	; 0x229e <TIMER_init+0x124>
    229c:	77 c0       	rjmp	.+238    	; 0x238c <TIMER_init+0x212>
		{
			/*select Compare mode for Timer1*/
			TCCR1B |= (TCCR1B & 0xF7) | ((timerParam->mode)<<2);
    229e:	ae e4       	ldi	r26, 0x4E	; 78
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	ee e4       	ldi	r30, 0x4E	; 78
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	38 2f       	mov	r19, r24
    22aa:	ee e4       	ldi	r30, 0x4E	; 78
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	28 2f       	mov	r18, r24
    22b2:	27 7f       	andi	r18, 0xF7	; 247
    22b4:	e9 81       	ldd	r30, Y+1	; 0x01
    22b6:	fa 81       	ldd	r31, Y+2	; 0x02
    22b8:	81 81       	ldd	r24, Z+1	; 0x01
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	82 2b       	or	r24, r18
    22c8:	83 2b       	or	r24, r19
    22ca:	8c 93       	st	X, r24
			/*Set the compare value for timer1*/
			OCR1A = timerParam->compVal ;
    22cc:	aa e4       	ldi	r26, 0x4A	; 74
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e9 81       	ldd	r30, Y+1	; 0x01
    22d2:	fa 81       	ldd	r31, Y+2	; 0x02
    22d4:	85 81       	ldd	r24, Z+5	; 0x05
    22d6:	96 81       	ldd	r25, Z+6	; 0x06
    22d8:	11 96       	adiw	r26, 0x01	; 1
    22da:	9c 93       	st	X, r25
    22dc:	8e 93       	st	-X, r24
			/*Enable Timer1 Compare Interrupt*/
			TIMSK |= (1<<OCIE1A);
    22de:	a9 e5       	ldi	r26, 0x59	; 89
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e9 e5       	ldi	r30, 0x59	; 89
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	80 61       	ori	r24, 0x10	; 16
    22ea:	8c 93       	st	X, r24
    22ec:	4f c0       	rjmp	.+158    	; 0x238c <TIMER_init+0x212>
		}
	}
	else if (timerParam->number == TIMER2)
    22ee:	e9 81       	ldd	r30, Y+1	; 0x01
    22f0:	fa 81       	ldd	r31, Y+2	; 0x02
    22f2:	80 81       	ld	r24, Z
    22f4:	82 30       	cpi	r24, 0x02	; 2
    22f6:	09 f0       	breq	.+2      	; 0x22fa <TIMER_init+0x180>
    22f8:	49 c0       	rjmp	.+146    	; 0x238c <TIMER_init+0x212>
	{
		/*Configure Timer0 Control register
		 * 1. Non PWM mode FOC0=1
		 * 2. Timer Mode and clock is an input
		 */
		TCCR2 = (1<<FOC2) ;
    22fa:	e5 e4       	ldi	r30, 0x45	; 69
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 e8       	ldi	r24, 0x80	; 128
    2300:	80 83       	st	Z, r24

		/*Select clock prescaler for Timer2*/
		TCCR2 = (TCCR2 & 0xF8) | (timerParam->clock);
    2302:	a5 e4       	ldi	r26, 0x45	; 69
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e5 e4       	ldi	r30, 0x45	; 69
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	98 2f       	mov	r25, r24
    230e:	98 7f       	andi	r25, 0xF8	; 248
    2310:	e9 81       	ldd	r30, Y+1	; 0x01
    2312:	fa 81       	ldd	r31, Y+2	; 0x02
    2314:	82 81       	ldd	r24, Z+2	; 0x02
    2316:	89 2b       	or	r24, r25
    2318:	8c 93       	st	X, r24

		/*Set inital value for the Timer2*/
		TCNT2 = timerParam->initVal ;
    231a:	a4 e4       	ldi	r26, 0x44	; 68
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e9 81       	ldd	r30, Y+1	; 0x01
    2320:	fa 81       	ldd	r31, Y+2	; 0x02
    2322:	83 81       	ldd	r24, Z+3	; 0x03
    2324:	94 81       	ldd	r25, Z+4	; 0x04
    2326:	8c 93       	st	X, r24

		if (timerParam->mode == Normal_Mode)
    2328:	e9 81       	ldd	r30, Y+1	; 0x01
    232a:	fa 81       	ldd	r31, Y+2	; 0x02
    232c:	81 81       	ldd	r24, Z+1	; 0x01
    232e:	88 23       	and	r24, r24
    2330:	41 f4       	brne	.+16     	; 0x2342 <TIMER_init+0x1c8>
		{
			/*Enable Timer2 Overflow Interrupt*/
			TIMSK |= (1<<TOIE2);
    2332:	a9 e5       	ldi	r26, 0x59	; 89
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e9 e5       	ldi	r30, 0x59	; 89
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	80 64       	ori	r24, 0x40	; 64
    233e:	8c 93       	st	X, r24
    2340:	25 c0       	rjmp	.+74     	; 0x238c <TIMER_init+0x212>
		}
		else if (timerParam->mode == Compare_Mode)
    2342:	e9 81       	ldd	r30, Y+1	; 0x01
    2344:	fa 81       	ldd	r31, Y+2	; 0x02
    2346:	81 81       	ldd	r24, Z+1	; 0x01
    2348:	82 30       	cpi	r24, 0x02	; 2
    234a:	01 f5       	brne	.+64     	; 0x238c <TIMER_init+0x212>
		{
			/*select Compare mode for Timer2*/
			TCCR2 = (TCCR2 & 0xF7) | ((timerParam->mode)<<2);
    234c:	a5 e4       	ldi	r26, 0x45	; 69
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e5 e4       	ldi	r30, 0x45	; 69
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	28 2f       	mov	r18, r24
    2358:	27 7f       	andi	r18, 0xF7	; 247
    235a:	e9 81       	ldd	r30, Y+1	; 0x01
    235c:	fa 81       	ldd	r31, Y+2	; 0x02
    235e:	81 81       	ldd	r24, Z+1	; 0x01
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	82 2b       	or	r24, r18
    236e:	8c 93       	st	X, r24
			/*Set the compare value for timer2*/
			OCR2 = timerParam->compVal ;
    2370:	a3 e4       	ldi	r26, 0x43	; 67
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e9 81       	ldd	r30, Y+1	; 0x01
    2376:	fa 81       	ldd	r31, Y+2	; 0x02
    2378:	85 81       	ldd	r24, Z+5	; 0x05
    237a:	96 81       	ldd	r25, Z+6	; 0x06
    237c:	8c 93       	st	X, r24
			/*Enable Timer2 Compare Interrupt*/
			TIMSK |= (1<<OCIE2);
    237e:	a9 e5       	ldi	r26, 0x59	; 89
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e9 e5       	ldi	r30, 0x59	; 89
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	80 68       	ori	r24, 0x80	; 128
    238a:	8c 93       	st	X, r24
		}
	}
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <TIMER_setCallBack>:

/*
 * Description: Function to set call back address
 */
void TIMER_setCallBack(const Timer_Number a_number,void(*a_ptrFunc)(void))
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <TIMER_setCallBack+0x6>
    239c:	0f 92       	push	r0
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	7b 83       	std	Y+3, r23	; 0x03
    23a6:	6a 83       	std	Y+2, r22	; 0x02
	/*Put the call back fucntion address of the appliaction in the call back global pointer*/
	g_callBackPtr[a_number] = a_ptrFunc ;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	88 2f       	mov	r24, r24
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	2a 81       	ldd	r18, Y+2	; 0x02
    23b0:	3b 81       	ldd	r19, Y+3	; 0x03
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	fc 01       	movw	r30, r24
    23b8:	e6 58       	subi	r30, 0x86	; 134
    23ba:	fe 4f       	sbci	r31, 0xFE	; 254
    23bc:	31 83       	std	Z+1, r19	; 0x01
    23be:	20 83       	st	Z, r18
}
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <TIMER_clearTimerValue>:

/*
 * Description: Function to clear the value of the timer
 */
void TIMER_clearTimerValue(Timer_Number number)
{
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	0f 92       	push	r0
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	89 83       	std	Y+1, r24	; 0x01
	if (number == TIMER0)
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	88 23       	and	r24, r24
    23dc:	21 f4       	brne	.+8      	; 0x23e6 <TIMER_clearTimerValue+0x1a>
	{
		TCNT0 = 0 ;
    23de:	e2 e5       	ldi	r30, 0x52	; 82
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	10 82       	st	Z, r1
    23e4:	0e c0       	rjmp	.+28     	; 0x2402 <TIMER_clearTimerValue+0x36>
	}
	else if (number == TIMER1)
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	29 f4       	brne	.+10     	; 0x23f6 <TIMER_clearTimerValue+0x2a>
	{
		TCNT1 = 0 ;
    23ec:	ec e4       	ldi	r30, 0x4C	; 76
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	11 82       	std	Z+1, r1	; 0x01
    23f2:	10 82       	st	Z, r1
    23f4:	06 c0       	rjmp	.+12     	; 0x2402 <TIMER_clearTimerValue+0x36>
	}
	else if (number == TIMER2)
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	82 30       	cpi	r24, 0x02	; 2
    23fa:	19 f4       	brne	.+6      	; 0x2402 <TIMER_clearTimerValue+0x36>
	{
		TCNT2 = 0 ;
    23fc:	e4 e4       	ldi	r30, 0x44	; 68
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	10 82       	st	Z, r1
	}
}
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <TIMER_getTimerValue>:

/*
 * Description: Function to get the current value of the timer
 */
uint16 TIMER_getTimerValue(Timer_Number number)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <TIMER_getTimerValue+0x6>
    2410:	0f 92       	push	r0
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	8b 83       	std	Y+3, r24	; 0x03
	uint16 timerVal = 0 ;
    2418:	1a 82       	std	Y+2, r1	; 0x02
    241a:	19 82       	std	Y+1, r1	; 0x01
	if (number == TIMER0)
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	88 23       	and	r24, r24
    2420:	41 f4       	brne	.+16     	; 0x2432 <TIMER_getTimerValue+0x28>
	{
		timerVal = TCNT0;
    2422:	e2 e5       	ldi	r30, 0x52	; 82
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9a 83       	std	Y+2, r25	; 0x02
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	14 c0       	rjmp	.+40     	; 0x245a <TIMER_getTimerValue+0x50>
	}
	else if (number == TIMER1)
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	39 f4       	brne	.+14     	; 0x2446 <TIMER_getTimerValue+0x3c>
	{
		timerVal = TCNT1 ;
    2438:	ec e4       	ldi	r30, 0x4C	; 76
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	0a c0       	rjmp	.+20     	; 0x245a <TIMER_getTimerValue+0x50>
	}
	else if (number == TIMER2)
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	39 f4       	brne	.+14     	; 0x245a <TIMER_getTimerValue+0x50>
	{
		timerVal = TCNT2;
    244c:	e4 e4       	ldi	r30, 0x44	; 68
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
	}
	return timerVal ;
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <TIMER_deInit>:

/*
 * Description: Function to stop the timers*/

void TIMER_deInit (Timer_Number number)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	0f 92       	push	r0
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	89 83       	std	Y+1, r24	; 0x01
	if (number == TIMER0)
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	88 23       	and	r24, r24
    247a:	89 f4       	brne	.+34     	; 0x249e <TIMER_deInit+0x34>
	{
		TCCR0 = 0 ;
    247c:	e3 e5       	ldi	r30, 0x53	; 83
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	10 82       	st	Z, r1
		TCNT0 = 0 ;
    2482:	e2 e5       	ldi	r30, 0x52	; 82
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	10 82       	st	Z, r1
		OCR0  = 0 ;
    2488:	ec e5       	ldi	r30, 0x5C	; 92
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	10 82       	st	Z, r1
		/*Disable interrupt for timer 0*/
		TIMSK &= ~(1<<TOIE0) & (~(1<<OCIE0));
    248e:	a9 e5       	ldi	r26, 0x59	; 89
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e9 e5       	ldi	r30, 0x59	; 89
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	8c 7f       	andi	r24, 0xFC	; 252
    249a:	8c 93       	st	X, r24
    249c:	2c c0       	rjmp	.+88     	; 0x24f6 <TIMER_deInit+0x8c>
	}
	else if (number == TIMER1)
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	b1 f4       	brne	.+44     	; 0x24d0 <TIMER_deInit+0x66>
	{
		TCCR1A = 0 ;
    24a4:	ef e4       	ldi	r30, 0x4F	; 79
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	10 82       	st	Z, r1
		TCCR1B = 0 ;
    24aa:	ee e4       	ldi	r30, 0x4E	; 78
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	10 82       	st	Z, r1
		TCNT1 = 0 ;
    24b0:	ec e4       	ldi	r30, 0x4C	; 76
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	11 82       	std	Z+1, r1	; 0x01
    24b6:	10 82       	st	Z, r1
		OCR1A  = 0 ;
    24b8:	ea e4       	ldi	r30, 0x4A	; 74
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	11 82       	std	Z+1, r1	; 0x01
    24be:	10 82       	st	Z, r1
		/*Disable interrupt for timer 1*/
		TIMSK &= ~(1<<OCIE1A) & (~(1<<TOIE1));
    24c0:	a9 e5       	ldi	r26, 0x59	; 89
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e9 e5       	ldi	r30, 0x59	; 89
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	8b 7e       	andi	r24, 0xEB	; 235
    24cc:	8c 93       	st	X, r24
    24ce:	13 c0       	rjmp	.+38     	; 0x24f6 <TIMER_deInit+0x8c>
	}
	else if (number == TIMER2)
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	82 30       	cpi	r24, 0x02	; 2
    24d4:	81 f4       	brne	.+32     	; 0x24f6 <TIMER_deInit+0x8c>
	{
		TCCR2 = 0 ;
    24d6:	e5 e4       	ldi	r30, 0x45	; 69
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	10 82       	st	Z, r1
		TCNT2 = 0 ;
    24dc:	e4 e4       	ldi	r30, 0x44	; 68
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	10 82       	st	Z, r1
		OCR2  = 0 ;
    24e2:	e3 e4       	ldi	r30, 0x43	; 67
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	10 82       	st	Z, r1
		/*Disable interrupt for timer 2*/
		TIMSK &= ~(1<<TOIE2) & (~(1<<OCIE2));
    24e8:	a9 e5       	ldi	r26, 0x59	; 89
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	e9 e5       	ldi	r30, 0x59	; 89
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8f 73       	andi	r24, 0x3F	; 63
    24f4:	8c 93       	st	X, r24
	}
}
    24f6:	0f 90       	pop	r0
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <UART_init>:

/**********************************************************
 *                   Function Definitions                 *
 **********************************************************/
void UART_init(UART * uartParam)
{
    24fe:	0f 93       	push	r16
    2500:	1f 93       	push	r17
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	00 d0       	rcall	.+0      	; 0x2508 <UART_init+0xa>
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
	/**********UCSRA Configuration:
	 * U2X = 1, Set U2X to reduce the divisor of the baud rate divider from 16 to 8*/
	UCSRA = (1<<U2X);
    2510:	eb e2       	ldi	r30, 0x2B	; 43
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	80 83       	st	Z, r24
	 * TXEN  = 1, Writing this bit to one enables the USART Transmitter
	 * UCSZ2 = 0, Writing this bit to zero to use 8-data bit mode
	 * RXB8  = 0, Writing this bit to zero to use 8-data bit mode
	 * TXB8  = 0, Writing this bit to zero to use 8-data bit mode
	 ****************************************************************************/
	UCSRB |= (1<<RXEN) | (1<<TXEN) ;
    2518:	aa e2       	ldi	r26, 0x2A	; 42
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	ea e2       	ldi	r30, 0x2A	; 42
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	88 61       	ori	r24, 0x18	; 24
    2524:	8c 93       	st	X, r24
	/*************UCSRC Configuration:
	 * URSEL = 1, Writing this bit to one to write in the UCSRC
	 * UMSEL = 0, Writing this bit to zero to use Asynchronous mode
	 * UCPOL  = 0, Writing this bit to zero cause we use Asynchronous mode
	 ***************************************************************************/
	UCSRC |= (1<<URSEL);
    2526:	a0 e4       	ldi	r26, 0x40	; 64
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e0 e4       	ldi	r30, 0x40	; 64
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	80 68       	ori	r24, 0x80	; 128
    2532:	8c 93       	st	X, r24

	/*Set bit stop settings if we use 2 stop bit mode*/
	if (uartParam->stopBit == 2)
    2534:	e9 81       	ldd	r30, Y+1	; 0x01
    2536:	fa 81       	ldd	r31, Y+2	; 0x02
    2538:	84 81       	ldd	r24, Z+4	; 0x04
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	39 f4       	brne	.+14     	; 0x254c <UART_init+0x4e>
	{
		UCSRC |= (1<<USBS);
    253e:	a0 e4       	ldi	r26, 0x40	; 64
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e0 e4       	ldi	r30, 0x40	; 64
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 60       	ori	r24, 0x08	; 8
    254a:	8c 93       	st	X, r24
	}
	/*Set parity mode*/
	UCSRC = (UCSRC & 0xCF) | (uartParam->paritySelect & 0x30);
    254c:	a0 e4       	ldi	r26, 0x40	; 64
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e0 e4       	ldi	r30, 0x40	; 64
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	98 2f       	mov	r25, r24
    2558:	9f 7c       	andi	r25, 0xCF	; 207
    255a:	e9 81       	ldd	r30, Y+1	; 0x01
    255c:	fa 81       	ldd	r31, Y+2	; 0x02
    255e:	86 81       	ldd	r24, Z+6	; 0x06
    2560:	80 73       	andi	r24, 0x30	; 48
    2562:	89 2b       	or	r24, r25
    2564:	8c 93       	st	X, r24
	/*Set the character size Mode*/
	UCSRC = (UCSRC & 0xF9) | (uartParam->dataMode & 0x06);
    2566:	a0 e4       	ldi	r26, 0x40	; 64
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e0 e4       	ldi	r30, 0x40	; 64
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	98 2f       	mov	r25, r24
    2572:	99 7f       	andi	r25, 0xF9	; 249
    2574:	e9 81       	ldd	r30, Y+1	; 0x01
    2576:	fa 81       	ldd	r31, Y+2	; 0x02
    2578:	85 81       	ldd	r24, Z+5	; 0x05
    257a:	86 70       	andi	r24, 0x06	; 6
    257c:	89 2b       	or	r24, r25
    257e:	8c 93       	st	X, r24

	/****************************************************************************/
	/* First 8 bits from the BAUD_PRESCALER inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALER(uartParam->BAUDRATE)>>8;
    2580:	00 e4       	ldi	r16, 0x40	; 64
    2582:	10 e0       	ldi	r17, 0x00	; 0
    2584:	e9 81       	ldd	r30, Y+1	; 0x01
    2586:	fa 81       	ldd	r31, Y+2	; 0x02
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	a2 81       	ldd	r26, Z+2	; 0x02
    258e:	b3 81       	ldd	r27, Z+3	; 0x03
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	aa 1f       	adc	r26, r26
    2596:	bb 1f       	adc	r27, r27
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	aa 1f       	adc	r26, r26
    259e:	bb 1f       	adc	r27, r27
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	aa 1f       	adc	r26, r26
    25a6:	bb 1f       	adc	r27, r27
    25a8:	9c 01       	movw	r18, r24
    25aa:	ad 01       	movw	r20, r26
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	92 e1       	ldi	r25, 0x12	; 18
    25b0:	aa e7       	ldi	r26, 0x7A	; 122
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 86 13 	call	0x270c	; 0x270c <__udivmodsi4>
    25bc:	da 01       	movw	r26, r20
    25be:	c9 01       	movw	r24, r18
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	a1 09       	sbc	r26, r1
    25c4:	b1 09       	sbc	r27, r1
    25c6:	89 2f       	mov	r24, r25
    25c8:	9a 2f       	mov	r25, r26
    25ca:	ab 2f       	mov	r26, r27
    25cc:	bb 27       	eor	r27, r27
    25ce:	f8 01       	movw	r30, r16
    25d0:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALER(uartParam->BAUDRATE);
    25d2:	09 e2       	ldi	r16, 0x29	; 41
    25d4:	10 e0       	ldi	r17, 0x00	; 0
    25d6:	e9 81       	ldd	r30, Y+1	; 0x01
    25d8:	fa 81       	ldd	r31, Y+2	; 0x02
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	a2 81       	ldd	r26, Z+2	; 0x02
    25e0:	b3 81       	ldd	r27, Z+3	; 0x03
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	aa 1f       	adc	r26, r26
    25e8:	bb 1f       	adc	r27, r27
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	aa 1f       	adc	r26, r26
    25f0:	bb 1f       	adc	r27, r27
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	aa 1f       	adc	r26, r26
    25f8:	bb 1f       	adc	r27, r27
    25fa:	9c 01       	movw	r18, r24
    25fc:	ad 01       	movw	r20, r26
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	92 e1       	ldi	r25, 0x12	; 18
    2602:	aa e7       	ldi	r26, 0x7A	; 122
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 86 13 	call	0x270c	; 0x270c <__udivmodsi4>
    260e:	da 01       	movw	r26, r20
    2610:	c9 01       	movw	r24, r18
    2612:	81 50       	subi	r24, 0x01	; 1
    2614:	f8 01       	movw	r30, r16
    2616:	80 83       	st	Z, r24

}
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	08 95       	ret

00002626 <UART_sendByte>:

void UART_sendByte(uint8 a_data)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	0f 92       	push	r0
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set to one, the buffer is empty, and therefore ready to be written,
	 * so wait until is set and write the data into UDR register
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE));
    2632:	eb e2       	ldi	r30, 0x2B	; 43
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	80 81       	ld	r24, Z
    2638:	88 2f       	mov	r24, r24
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	80 72       	andi	r24, 0x20	; 32
    263e:	90 70       	andi	r25, 0x00	; 0
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	b9 f3       	breq	.-18     	; 0x2632 <UART_sendByte+0xc>
	UDR=a_data;
    2644:	ec e2       	ldi	r30, 0x2C	; 44
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = a_data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
	/*RXC flag is set when when he receive a byte,and therefore ready to be read,
	 * so wait until is set and read the data from UDR register
	 */
	while (BIT_IS_CLEAR(UCSRA,RXC));
    265c:	eb e2       	ldi	r30, 0x2B	; 43
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	88 23       	and	r24, r24
    2664:	dc f7       	brge	.-10     	; 0x265c <UART_receiveByte+0x8>
	return UDR;
    2666:	ec e2       	ldi	r30, 0x2C	; 44
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
}
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <UART_sendString>:

void UART_sendString(const uint8 * Str)
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	00 d0       	rcall	.+0      	; 0x2678 <UART_sendString+0x6>
    2678:	0f 92       	push	r0
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	9b 83       	std	Y+3, r25	; 0x03
    2680:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0 ;
    2682:	19 82       	std	Y+1, r1	; 0x01
    2684:	0e c0       	rjmp	.+28     	; 0x26a2 <UART_sendString+0x30>
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
    2690:	fc 01       	movw	r30, r24
    2692:	e2 0f       	add	r30, r18
    2694:	f3 1f       	adc	r31, r19
    2696:	80 81       	ld	r24, Z
    2698:	0e 94 13 13 	call	0x2626	; 0x2626 <UART_sendByte>
		i++;
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	8f 5f       	subi	r24, 0xFF	; 255
    26a0:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 * Str)
{
	uint8 i = 0 ;
	while (Str[i] != '\0')
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	9b 81       	ldd	r25, Y+3	; 0x03
    26ac:	fc 01       	movw	r30, r24
    26ae:	e2 0f       	add	r30, r18
    26b0:	f3 1f       	adc	r31, r19
    26b2:	80 81       	ld	r24, Z
    26b4:	88 23       	and	r24, r24
    26b6:	39 f7       	brne	.-50     	; 0x2686 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <UART_receiveString>:

void UART_receiveString(uint8 * Str)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <UART_receiveString+0x6>
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	89 83       	std	Y+1, r24	; 0x01
	*Str = UART_receiveByte();
    26d2:	0e 94 2a 13 	call	0x2654	; 0x2654 <UART_receiveByte>
    26d6:	e9 81       	ldd	r30, Y+1	; 0x01
    26d8:	fa 81       	ldd	r31, Y+2	; 0x02
    26da:	80 83       	st	Z, r24
    26dc:	0a c0       	rjmp	.+20     	; 0x26f2 <UART_receiveString+0x2e>
	while (*Str != '#')
	{
		Str++;
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	01 96       	adiw	r24, 0x01	; 1
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
		*Str=UART_receiveByte();
    26e8:	0e 94 2a 13 	call	0x2654	; 0x2654 <UART_receiveByte>
    26ec:	e9 81       	ldd	r30, Y+1	; 0x01
    26ee:	fa 81       	ldd	r31, Y+2	; 0x02
    26f0:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 * Str)
{
	*Str = UART_receiveByte();
	while (*Str != '#')
    26f2:	e9 81       	ldd	r30, Y+1	; 0x01
    26f4:	fa 81       	ldd	r31, Y+2	; 0x02
    26f6:	80 81       	ld	r24, Z
    26f8:	83 32       	cpi	r24, 0x23	; 35
    26fa:	89 f7       	brne	.-30     	; 0x26de <UART_receiveString+0x1a>
	{
		Str++;
		*Str=UART_receiveByte();
	}
	*Str = '\0';
    26fc:	e9 81       	ldd	r30, Y+1	; 0x01
    26fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2700:	10 82       	st	Z, r1
}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <__udivmodsi4>:
    270c:	a1 e2       	ldi	r26, 0x21	; 33
    270e:	1a 2e       	mov	r1, r26
    2710:	aa 1b       	sub	r26, r26
    2712:	bb 1b       	sub	r27, r27
    2714:	fd 01       	movw	r30, r26
    2716:	0d c0       	rjmp	.+26     	; 0x2732 <__udivmodsi4_ep>

00002718 <__udivmodsi4_loop>:
    2718:	aa 1f       	adc	r26, r26
    271a:	bb 1f       	adc	r27, r27
    271c:	ee 1f       	adc	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	a2 17       	cp	r26, r18
    2722:	b3 07       	cpc	r27, r19
    2724:	e4 07       	cpc	r30, r20
    2726:	f5 07       	cpc	r31, r21
    2728:	20 f0       	brcs	.+8      	; 0x2732 <__udivmodsi4_ep>
    272a:	a2 1b       	sub	r26, r18
    272c:	b3 0b       	sbc	r27, r19
    272e:	e4 0b       	sbc	r30, r20
    2730:	f5 0b       	sbc	r31, r21

00002732 <__udivmodsi4_ep>:
    2732:	66 1f       	adc	r22, r22
    2734:	77 1f       	adc	r23, r23
    2736:	88 1f       	adc	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	1a 94       	dec	r1
    273c:	69 f7       	brne	.-38     	; 0x2718 <__udivmodsi4_loop>
    273e:	60 95       	com	r22
    2740:	70 95       	com	r23
    2742:	80 95       	com	r24
    2744:	90 95       	com	r25
    2746:	9b 01       	movw	r18, r22
    2748:	ac 01       	movw	r20, r24
    274a:	bd 01       	movw	r22, r26
    274c:	cf 01       	movw	r24, r30
    274e:	08 95       	ret

00002750 <__prologue_saves__>:
    2750:	2f 92       	push	r2
    2752:	3f 92       	push	r3
    2754:	4f 92       	push	r4
    2756:	5f 92       	push	r5
    2758:	6f 92       	push	r6
    275a:	7f 92       	push	r7
    275c:	8f 92       	push	r8
    275e:	9f 92       	push	r9
    2760:	af 92       	push	r10
    2762:	bf 92       	push	r11
    2764:	cf 92       	push	r12
    2766:	df 92       	push	r13
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	ca 1b       	sub	r28, r26
    277a:	db 0b       	sbc	r29, r27
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	09 94       	ijmp

00002788 <__epilogue_restores__>:
    2788:	2a 88       	ldd	r2, Y+18	; 0x12
    278a:	39 88       	ldd	r3, Y+17	; 0x11
    278c:	48 88       	ldd	r4, Y+16	; 0x10
    278e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2790:	6e 84       	ldd	r6, Y+14	; 0x0e
    2792:	7d 84       	ldd	r7, Y+13	; 0x0d
    2794:	8c 84       	ldd	r8, Y+12	; 0x0c
    2796:	9b 84       	ldd	r9, Y+11	; 0x0b
    2798:	aa 84       	ldd	r10, Y+10	; 0x0a
    279a:	b9 84       	ldd	r11, Y+9	; 0x09
    279c:	c8 84       	ldd	r12, Y+8	; 0x08
    279e:	df 80       	ldd	r13, Y+7	; 0x07
    27a0:	ee 80       	ldd	r14, Y+6	; 0x06
    27a2:	fd 80       	ldd	r15, Y+5	; 0x05
    27a4:	0c 81       	ldd	r16, Y+4	; 0x04
    27a6:	1b 81       	ldd	r17, Y+3	; 0x03
    27a8:	aa 81       	ldd	r26, Y+2	; 0x02
    27aa:	b9 81       	ldd	r27, Y+1	; 0x01
    27ac:	ce 0f       	add	r28, r30
    27ae:	d1 1d       	adc	r29, r1
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	ed 01       	movw	r28, r26
    27bc:	08 95       	ret

000027be <itoa>:
    27be:	fb 01       	movw	r30, r22
    27c0:	9f 01       	movw	r18, r30
    27c2:	e8 94       	clt
    27c4:	42 30       	cpi	r20, 0x02	; 2
    27c6:	c4 f0       	brlt	.+48     	; 0x27f8 <itoa+0x3a>
    27c8:	45 32       	cpi	r20, 0x25	; 37
    27ca:	b4 f4       	brge	.+44     	; 0x27f8 <itoa+0x3a>
    27cc:	4a 30       	cpi	r20, 0x0A	; 10
    27ce:	29 f4       	brne	.+10     	; 0x27da <itoa+0x1c>
    27d0:	97 fb       	bst	r25, 7
    27d2:	1e f4       	brtc	.+6      	; 0x27da <itoa+0x1c>
    27d4:	90 95       	com	r25
    27d6:	81 95       	neg	r24
    27d8:	9f 4f       	sbci	r25, 0xFF	; 255
    27da:	64 2f       	mov	r22, r20
    27dc:	77 27       	eor	r23, r23
    27de:	0e 94 10 14 	call	0x2820	; 0x2820 <__udivmodhi4>
    27e2:	80 5d       	subi	r24, 0xD0	; 208
    27e4:	8a 33       	cpi	r24, 0x3A	; 58
    27e6:	0c f0       	brlt	.+2      	; 0x27ea <itoa+0x2c>
    27e8:	89 5d       	subi	r24, 0xD9	; 217
    27ea:	81 93       	st	Z+, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	00 97       	sbiw	r24, 0x00	; 0
    27f0:	a1 f7       	brne	.-24     	; 0x27da <itoa+0x1c>
    27f2:	16 f4       	brtc	.+4      	; 0x27f8 <itoa+0x3a>
    27f4:	5d e2       	ldi	r21, 0x2D	; 45
    27f6:	51 93       	st	Z+, r21
    27f8:	10 82       	st	Z, r1
    27fa:	c9 01       	movw	r24, r18
    27fc:	0c 94 00 14 	jmp	0x2800	; 0x2800 <strrev>

00002800 <strrev>:
    2800:	dc 01       	movw	r26, r24
    2802:	fc 01       	movw	r30, r24
    2804:	67 2f       	mov	r22, r23
    2806:	71 91       	ld	r23, Z+
    2808:	77 23       	and	r23, r23
    280a:	e1 f7       	brne	.-8      	; 0x2804 <strrev+0x4>
    280c:	32 97       	sbiw	r30, 0x02	; 2
    280e:	04 c0       	rjmp	.+8      	; 0x2818 <strrev+0x18>
    2810:	7c 91       	ld	r23, X
    2812:	6d 93       	st	X+, r22
    2814:	70 83       	st	Z, r23
    2816:	62 91       	ld	r22, -Z
    2818:	ae 17       	cp	r26, r30
    281a:	bf 07       	cpc	r27, r31
    281c:	c8 f3       	brcs	.-14     	; 0x2810 <strrev+0x10>
    281e:	08 95       	ret

00002820 <__udivmodhi4>:
    2820:	aa 1b       	sub	r26, r26
    2822:	bb 1b       	sub	r27, r27
    2824:	51 e1       	ldi	r21, 0x11	; 17
    2826:	07 c0       	rjmp	.+14     	; 0x2836 <__udivmodhi4_ep>

00002828 <__udivmodhi4_loop>:
    2828:	aa 1f       	adc	r26, r26
    282a:	bb 1f       	adc	r27, r27
    282c:	a6 17       	cp	r26, r22
    282e:	b7 07       	cpc	r27, r23
    2830:	10 f0       	brcs	.+4      	; 0x2836 <__udivmodhi4_ep>
    2832:	a6 1b       	sub	r26, r22
    2834:	b7 0b       	sbc	r27, r23

00002836 <__udivmodhi4_ep>:
    2836:	88 1f       	adc	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	5a 95       	dec	r21
    283c:	a9 f7       	brne	.-22     	; 0x2828 <__udivmodhi4_loop>
    283e:	80 95       	com	r24
    2840:	90 95       	com	r25
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	08 95       	ret

00002848 <_exit>:
    2848:	f8 94       	cli

0000284a <__stop_program>:
    284a:	ff cf       	rjmp	.-2      	; 0x284a <__stop_program>
