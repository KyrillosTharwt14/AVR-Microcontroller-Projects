
ControlUnit_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000031bc  00003250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800080  00800080  00003270  2**0
                  ALLOC
  3 .stab         0000399c  00000000  00000000  00003270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001484  00000000  00000000  00006c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000081d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008340  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ae74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bc24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_3>
      10:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__vector_8>
      24:	0c 94 17 14 	jmp	0x282e	; 0x282e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 35 13 	call	0x266a	; 0x266a <main>
      8a:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 88 18 	jmp	0x3110	; 0x3110 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:
 *******************************************************************************/

#include "buzzer.h"

void BUZZER_init(uint8 buzzer)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(BUZZER_PORT_DIR, buzzer);
     b52:	a1 e3       	ldi	r26, 0x31	; 49
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e1 e3       	ldi	r30, 0x31	; 49
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	48 2f       	mov	r20, r24
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	02 2e       	mov	r0, r18
     b6a:	02 c0       	rjmp	.+4      	; 0xb70 <BUZZER_init+0x2a>
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	0a 94       	dec	r0
     b72:	e2 f7       	brpl	.-8      	; 0xb6c <BUZZER_init+0x26>
     b74:	84 2b       	or	r24, r20
     b76:	8c 93       	st	X, r24
}
     b78:	0f 90       	pop	r0
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_turnON>:

void BUZZER_turnON(uint8 buzzer)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(BUZZER_PORT_OUT, buzzer);
     b8c:	a2 e3       	ldi	r26, 0x32	; 50
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e2 e3       	ldi	r30, 0x32	; 50
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	48 2f       	mov	r20, r24
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	02 2e       	mov	r0, r18
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <BUZZER_turnON+0x2a>
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	0a 94       	dec	r0
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <BUZZER_turnON+0x26>
     bae:	84 2b       	or	r24, r20
     bb0:	8c 93       	st	X, r24
}
     bb2:	0f 90       	pop	r0
     bb4:	cf 91       	pop	r28
     bb6:	df 91       	pop	r29
     bb8:	08 95       	ret

00000bba <BUZZER_turnOFF>:

void BUZZER_turnOFF(uint8 buzzer)
{
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	0f 92       	push	r0
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(BUZZER_PORT_OUT, buzzer);
     bc6:	a2 e3       	ldi	r26, 0x32	; 50
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e2 e3       	ldi	r30, 0x32	; 50
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	48 2f       	mov	r20, r24
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 2e       	mov	r0, r18
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <BUZZER_turnOFF+0x2a>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <BUZZER_turnOFF+0x26>
     be8:	80 95       	com	r24
     bea:	84 23       	and	r24, r20
     bec:	8c 93       	st	X, r24

}
     bee:	0f 90       	pop	r0
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <_delayForAlarm>:

/*
 * Description: delay function for 60 seconds
 */
void _delayForAlarm(void)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
	g_tick ++ ;
     bfe:	80 91 81 00 	lds	r24, 0x0081
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	80 93 81 00 	sts	0x0081, r24
	if (g_tick == NUMBER_OF_COMPARE_MATCH_PER_1_MINUTE)
     c08:	80 91 81 00 	lds	r24, 0x0081
     c0c:	8c 30       	cpi	r24, 0x0C	; 12
     c0e:	29 f4       	brne	.+10     	; 0xc1a <_delayForAlarm+0x24>
	{
		g_tick = 0 ;
     c10:	10 92 81 00 	sts	0x0081, r1
		g_alarmIsONFlag = TRUE ;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 82 00 	sts	0x0082, r24
	}
}
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <startupProgram>:
/*
 * Description: A program to initiate All the modules
 */

void startupProgram(void)
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	6a 97       	sbiw	r28, 0x1a	; 26
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
	/*Configure UART*/
	UART paramUart = {9600,1,dataMode_8,disableParity};
     c34:	ce 01       	movw	r24, r28
     c36:	0f 96       	adiw	r24, 0x0f	; 15
     c38:	9f 8b       	std	Y+23, r25	; 0x17
     c3a:	8e 8b       	std	Y+22, r24	; 0x16
     c3c:	e9 e7       	ldi	r30, 0x79	; 121
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	f9 8f       	std	Y+25, r31	; 0x19
     c42:	e8 8f       	std	Y+24, r30	; 0x18
     c44:	f7 e0       	ldi	r31, 0x07	; 7
     c46:	fa 8f       	std	Y+26, r31	; 0x1a
     c48:	e8 8d       	ldd	r30, Y+24	; 0x18
     c4a:	f9 8d       	ldd	r31, Y+25	; 0x19
     c4c:	00 80       	ld	r0, Z
     c4e:	88 8d       	ldd	r24, Y+24	; 0x18
     c50:	99 8d       	ldd	r25, Y+25	; 0x19
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	99 8f       	std	Y+25, r25	; 0x19
     c56:	88 8f       	std	Y+24, r24	; 0x18
     c58:	ee 89       	ldd	r30, Y+22	; 0x16
     c5a:	ff 89       	ldd	r31, Y+23	; 0x17
     c5c:	00 82       	st	Z, r0
     c5e:	8e 89       	ldd	r24, Y+22	; 0x16
     c60:	9f 89       	ldd	r25, Y+23	; 0x17
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	9f 8b       	std	Y+23, r25	; 0x17
     c66:	8e 8b       	std	Y+22, r24	; 0x16
     c68:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c6a:	91 50       	subi	r25, 0x01	; 1
     c6c:	9a 8f       	std	Y+26, r25	; 0x1a
     c6e:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c70:	ee 23       	and	r30, r30
     c72:	51 f7       	brne	.-44     	; 0xc48 <startupProgram+0x28>

	/*Door initialization*/
	DOOR_init();
     c74:	0e 94 86 09 	call	0x130c	; 0x130c <DOOR_init>

	/*EPPROM initialization*/
	EEPROM_init();
     c78:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <EEPROM_init>

	/*UART initialization*/
	UART_init(&paramUart);
     c7c:	ce 01       	movw	r24, r28
     c7e:	0f 96       	adiw	r24, 0x0f	; 15
     c80:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <UART_init>


	EEPROM_readByte(PROGRAM_ADDRESS,&flagProgram);
     c84:	20 e8       	ldi	r18, 0x80	; 128
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	80 e5       	ldi	r24, 0x50	; 80
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	b9 01       	movw	r22, r18
     c8e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <EEPROM_readByte>
	if (flagProgram == 255 )
     c92:	80 91 80 00 	lds	r24, 0x0080
     c96:	8f 3f       	cpi	r24, 0xFF	; 255
     c98:	09 f0       	breq	.+2      	; 0xc9c <startupProgram+0x7c>
     c9a:	77 c0       	rjmp	.+238    	; 0xd8a <startupProgram+0x16a>
	{
		EEPROM_writeByte(PROGRAM_ADDRESS,FIRST_PROGRAM);
     c9c:	80 e5       	ldi	r24, 0x50	; 80
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	0e 94 5f 0a 	call	0x14be	; 0x14be <EEPROM_writeByte>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	a0 e2       	ldi	r26, 0x20	; 32
     cac:	b1 e4       	ldi	r27, 0x41	; 65
     cae:	8b 87       	std	Y+11, r24	; 0x0b
     cb0:	9c 87       	std	Y+12, r25	; 0x0c
     cb2:	ad 87       	std	Y+13, r26	; 0x0d
     cb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     cba:	8d 85       	ldd	r24, Y+13	; 0x0d
     cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	4a ef       	ldi	r20, 0xFA	; 250
     cc4:	54 e4       	ldi	r21, 0x44	; 68
     cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	8f 83       	std	Y+7, r24	; 0x07
     cd0:	98 87       	std	Y+8, r25	; 0x08
     cd2:	a9 87       	std	Y+9, r26	; 0x09
     cd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cd6:	6f 81       	ldd	r22, Y+7	; 0x07
     cd8:	78 85       	ldd	r23, Y+8	; 0x08
     cda:	89 85       	ldd	r24, Y+9	; 0x09
     cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cea:	88 23       	and	r24, r24
     cec:	2c f4       	brge	.+10     	; 0xcf8 <startupProgram+0xd8>
		__ticks = 1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	9e 83       	std	Y+6, r25	; 0x06
     cf4:	8d 83       	std	Y+5, r24	; 0x05
     cf6:	3f c0       	rjmp	.+126    	; 0xd76 <startupProgram+0x156>
	else if (__tmp > 65535)
     cf8:	6f 81       	ldd	r22, Y+7	; 0x07
     cfa:	78 85       	ldd	r23, Y+8	; 0x08
     cfc:	89 85       	ldd	r24, Y+9	; 0x09
     cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	3f ef       	ldi	r19, 0xFF	; 255
     d04:	4f e7       	ldi	r20, 0x7F	; 127
     d06:	57 e4       	ldi	r21, 0x47	; 71
     d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d0c:	18 16       	cp	r1, r24
     d0e:	4c f5       	brge	.+82     	; 0xd62 <startupProgram+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d10:	6b 85       	ldd	r22, Y+11	; 0x0b
     d12:	7c 85       	ldd	r23, Y+12	; 0x0c
     d14:	8d 85       	ldd	r24, Y+13	; 0x0d
     d16:	9e 85       	ldd	r25, Y+14	; 0x0e
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e2       	ldi	r20, 0x20	; 32
     d1e:	51 e4       	ldi	r21, 0x41	; 65
     d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	9e 83       	std	Y+6, r25	; 0x06
     d36:	8d 83       	std	Y+5, r24	; 0x05
     d38:	0f c0       	rjmp	.+30     	; 0xd58 <startupProgram+0x138>
     d3a:	88 ec       	ldi	r24, 0xC8	; 200
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9c 83       	std	Y+4, r25	; 0x04
     d40:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <startupProgram+0x126>
     d4a:	9c 83       	std	Y+4, r25	; 0x04
     d4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4e:	8d 81       	ldd	r24, Y+5	; 0x05
     d50:	9e 81       	ldd	r25, Y+6	; 0x06
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	9e 83       	std	Y+6, r25	; 0x06
     d56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	69 f7       	brne	.-38     	; 0xd3a <startupProgram+0x11a>
     d60:	14 c0       	rjmp	.+40     	; 0xd8a <startupProgram+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d62:	6f 81       	ldd	r22, Y+7	; 0x07
     d64:	78 85       	ldd	r23, Y+8	; 0x08
     d66:	89 85       	ldd	r24, Y+9	; 0x09
     d68:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	9e 83       	std	Y+6, r25	; 0x06
     d74:	8d 83       	std	Y+5, r24	; 0x05
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	9a 83       	std	Y+2, r25	; 0x02
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <startupProgram+0x162>
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}
	EEPROM_readByte(PROGRAM_ADDRESS,&flagProgram);
     d8a:	20 e8       	ldi	r18, 0x80	; 128
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	80 e5       	ldi	r24, 0x50	; 80
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	b9 01       	movw	r22, r18
     d94:	0e 94 a4 0a 	call	0x1548	; 0x1548 <EEPROM_readByte>

	/* Wait until HMI_MC is ready*/
	while(UART_receiveByte() != HMI_MC_READY){}
     d98:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <UART_receiveByte>
     d9c:	84 31       	cpi	r24, 0x14	; 20
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <startupProgram+0x178>
	UART_sendByte(flagProgram);
     da0:	80 91 80 00 	lds	r24, 0x0080
     da4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <UART_sendByte>
}
     da8:	6a 96       	adiw	r28, 0x1a	; 26
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <firstProgram>:
 * This program run once, when the user start to implement his system
 * It receive the password from the HMI MC and save it to in EEPROM
 * It may run again if the user want to change his password
 */
void firstProgram(void)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	e8 97       	sbiw	r28, 0x38	; 56
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_LENGHT];
	uint8 confirmedPassword[PASSWORD_LENGHT];

	UART_receiveString(password);
     dce:	ce 01       	movw	r24, r28
     dd0:	8b 96       	adiw	r24, 0x2b	; 43
     dd2:	0e 94 1a 18 	call	0x3034	; 0x3034 <UART_receiveString>
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a0 e2       	ldi	r26, 0x20	; 32
     ddc:	b1 e4       	ldi	r27, 0x41	; 65
     dde:	8f a3       	std	Y+39, r24	; 0x27
     de0:	98 a7       	std	Y+40, r25	; 0x28
     de2:	a9 a7       	std	Y+41, r26	; 0x29
     de4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de6:	6f a1       	ldd	r22, Y+39	; 0x27
     de8:	78 a5       	ldd	r23, Y+40	; 0x28
     dea:	89 a5       	ldd	r24, Y+41	; 0x29
     dec:	9a a5       	ldd	r25, Y+42	; 0x2a
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	4a ef       	ldi	r20, 0xFA	; 250
     df4:	54 e4       	ldi	r21, 0x44	; 68
     df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	8b a3       	std	Y+35, r24	; 0x23
     e00:	9c a3       	std	Y+36, r25	; 0x24
     e02:	ad a3       	std	Y+37, r26	; 0x25
     e04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e06:	6b a1       	ldd	r22, Y+35	; 0x23
     e08:	7c a1       	ldd	r23, Y+36	; 0x24
     e0a:	8d a1       	ldd	r24, Y+37	; 0x25
     e0c:	9e a1       	ldd	r25, Y+38	; 0x26
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	5f e3       	ldi	r21, 0x3F	; 63
     e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1a:	88 23       	and	r24, r24
     e1c:	2c f4       	brge	.+10     	; 0xe28 <firstProgram+0x6e>
		__ticks = 1;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9a a3       	std	Y+34, r25	; 0x22
     e24:	89 a3       	std	Y+33, r24	; 0x21
     e26:	3f c0       	rjmp	.+126    	; 0xea6 <firstProgram+0xec>
	else if (__tmp > 65535)
     e28:	6b a1       	ldd	r22, Y+35	; 0x23
     e2a:	7c a1       	ldd	r23, Y+36	; 0x24
     e2c:	8d a1       	ldd	r24, Y+37	; 0x25
     e2e:	9e a1       	ldd	r25, Y+38	; 0x26
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	3f ef       	ldi	r19, 0xFF	; 255
     e34:	4f e7       	ldi	r20, 0x7F	; 127
     e36:	57 e4       	ldi	r21, 0x47	; 71
     e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e3c:	18 16       	cp	r1, r24
     e3e:	4c f5       	brge	.+82     	; 0xe92 <firstProgram+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e40:	6f a1       	ldd	r22, Y+39	; 0x27
     e42:	78 a5       	ldd	r23, Y+40	; 0x28
     e44:	89 a5       	ldd	r24, Y+41	; 0x29
     e46:	9a a5       	ldd	r25, Y+42	; 0x2a
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e2       	ldi	r20, 0x20	; 32
     e4e:	51 e4       	ldi	r21, 0x41	; 65
     e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9a a3       	std	Y+34, r25	; 0x22
     e66:	89 a3       	std	Y+33, r24	; 0x21
     e68:	0f c0       	rjmp	.+30     	; 0xe88 <firstProgram+0xce>
     e6a:	88 ec       	ldi	r24, 0xC8	; 200
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	98 a3       	std	Y+32, r25	; 0x20
     e70:	8f 8f       	std	Y+31, r24	; 0x1f
     e72:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e74:	98 a1       	ldd	r25, Y+32	; 0x20
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <firstProgram+0xbc>
     e7a:	98 a3       	std	Y+32, r25	; 0x20
     e7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7e:	89 a1       	ldd	r24, Y+33	; 0x21
     e80:	9a a1       	ldd	r25, Y+34	; 0x22
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	9a a3       	std	Y+34, r25	; 0x22
     e86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e88:	89 a1       	ldd	r24, Y+33	; 0x21
     e8a:	9a a1       	ldd	r25, Y+34	; 0x22
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	69 f7       	brne	.-38     	; 0xe6a <firstProgram+0xb0>
     e90:	14 c0       	rjmp	.+40     	; 0xeba <firstProgram+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e92:	6b a1       	ldd	r22, Y+35	; 0x23
     e94:	7c a1       	ldd	r23, Y+36	; 0x24
     e96:	8d a1       	ldd	r24, Y+37	; 0x25
     e98:	9e a1       	ldd	r25, Y+38	; 0x26
     e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	9a a3       	std	Y+34, r25	; 0x22
     ea4:	89 a3       	std	Y+33, r24	; 0x21
     ea6:	89 a1       	ldd	r24, Y+33	; 0x21
     ea8:	9a a1       	ldd	r25, Y+34	; 0x22
     eaa:	9e 8f       	std	Y+30, r25	; 0x1e
     eac:	8d 8f       	std	Y+29, r24	; 0x1d
     eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <firstProgram+0xf8>
     eb6:	9e 8f       	std	Y+30, r25	; 0x1e
     eb8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	UART_receiveString(confirmedPassword);
     eba:	ce 01       	movw	r24, r28
     ebc:	c2 96       	adiw	r24, 0x32	; 50
     ebe:	0e 94 1a 18 	call	0x3034	; 0x3034 <UART_receiveString>

	if (comparePassword(password,confirmedPassword) == 0)
     ec2:	ce 01       	movw	r24, r28
     ec4:	8b 96       	adiw	r24, 0x2b	; 43
     ec6:	9e 01       	movw	r18, r28
     ec8:	2e 5c       	subi	r18, 0xCE	; 206
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	b9 01       	movw	r22, r18
     ece:	0e 94 1f 09 	call	0x123e	; 0x123e <comparePassword>
     ed2:	88 23       	and	r24, r24
     ed4:	09 f0       	breq	.+2      	; 0xed8 <firstProgram+0x11e>
     ed6:	83 c0       	rjmp	.+262    	; 0xfde <firstProgram+0x224>
	{
		EEPROM_writeString(PASSWORD_ADDRESS,confirmedPassword);
     ed8:	9e 01       	movw	r18, r28
     eda:	2e 5c       	subi	r18, 0xCE	; 206
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	b9 01       	movw	r22, r18
     ee4:	0e 94 04 0b 	call	0x1608	; 0x1608 <EEPROM_writeString>

		EEPROM_writeByte(PROGRAM_ADDRESS,SECOND_PROGRAM);
     ee8:	80 e5       	ldi	r24, 0x50	; 80
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	62 e0       	ldi	r22, 0x02	; 2
     eee:	0e 94 5f 0a 	call	0x14be	; 0x14be <EEPROM_writeByte>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	a0 e2       	ldi	r26, 0x20	; 32
     ef8:	b1 e4       	ldi	r27, 0x41	; 65
     efa:	89 8f       	std	Y+25, r24	; 0x19
     efc:	9a 8f       	std	Y+26, r25	; 0x1a
     efe:	ab 8f       	std	Y+27, r26	; 0x1b
     f00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f02:	69 8d       	ldd	r22, Y+25	; 0x19
     f04:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f08:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a ef       	ldi	r20, 0xFA	; 250
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	8d 8b       	std	Y+21, r24	; 0x15
     f1c:	9e 8b       	std	Y+22, r25	; 0x16
     f1e:	af 8b       	std	Y+23, r26	; 0x17
     f20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f22:	6d 89       	ldd	r22, Y+21	; 0x15
     f24:	7e 89       	ldd	r23, Y+22	; 0x16
     f26:	8f 89       	ldd	r24, Y+23	; 0x17
     f28:	98 8d       	ldd	r25, Y+24	; 0x18
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e8       	ldi	r20, 0x80	; 128
     f30:	5f e3       	ldi	r21, 0x3F	; 63
     f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f36:	88 23       	and	r24, r24
     f38:	2c f4       	brge	.+10     	; 0xf44 <firstProgram+0x18a>
		__ticks = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9c 8b       	std	Y+20, r25	; 0x14
     f40:	8b 8b       	std	Y+19, r24	; 0x13
     f42:	3f c0       	rjmp	.+126    	; 0xfc2 <firstProgram+0x208>
	else if (__tmp > 65535)
     f44:	6d 89       	ldd	r22, Y+21	; 0x15
     f46:	7e 89       	ldd	r23, Y+22	; 0x16
     f48:	8f 89       	ldd	r24, Y+23	; 0x17
     f4a:	98 8d       	ldd	r25, Y+24	; 0x18
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	4f e7       	ldi	r20, 0x7F	; 127
     f52:	57 e4       	ldi	r21, 0x47	; 71
     f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f58:	18 16       	cp	r1, r24
     f5a:	4c f5       	brge	.+82     	; 0xfae <firstProgram+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5c:	69 8d       	ldd	r22, Y+25	; 0x19
     f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	9c 8b       	std	Y+20, r25	; 0x14
     f82:	8b 8b       	std	Y+19, r24	; 0x13
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <firstProgram+0x1ea>
     f86:	88 ec       	ldi	r24, 0xC8	; 200
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9a 8b       	std	Y+18, r25	; 0x12
     f8c:	89 8b       	std	Y+17, r24	; 0x11
     f8e:	89 89       	ldd	r24, Y+17	; 0x11
     f90:	9a 89       	ldd	r25, Y+18	; 0x12
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <firstProgram+0x1d8>
     f96:	9a 8b       	std	Y+18, r25	; 0x12
     f98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9a:	8b 89       	ldd	r24, Y+19	; 0x13
     f9c:	9c 89       	ldd	r25, Y+20	; 0x14
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	9c 8b       	std	Y+20, r25	; 0x14
     fa2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa4:	8b 89       	ldd	r24, Y+19	; 0x13
     fa6:	9c 89       	ldd	r25, Y+20	; 0x14
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	69 f7       	brne	.-38     	; 0xf86 <firstProgram+0x1cc>
     fac:	14 c0       	rjmp	.+40     	; 0xfd6 <firstProgram+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fae:	6d 89       	ldd	r22, Y+21	; 0x15
     fb0:	7e 89       	ldd	r23, Y+22	; 0x16
     fb2:	8f 89       	ldd	r24, Y+23	; 0x17
     fb4:	98 8d       	ldd	r25, Y+24	; 0x18
     fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9c 8b       	std	Y+20, r25	; 0x14
     fc0:	8b 8b       	std	Y+19, r24	; 0x13
     fc2:	8b 89       	ldd	r24, Y+19	; 0x13
     fc4:	9c 89       	ldd	r25, Y+20	; 0x14
     fc6:	98 8b       	std	Y+16, r25	; 0x10
     fc8:	8f 87       	std	Y+15, r24	; 0x0f
     fca:	8f 85       	ldd	r24, Y+15	; 0x0f
     fcc:	98 89       	ldd	r25, Y+16	; 0x10
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <firstProgram+0x214>
     fd2:	98 8b       	std	Y+16, r25	; 0x10
     fd4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);

		UART_sendByte(SECOND_PROGRAM);
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <UART_sendByte>
     fdc:	7a c0       	rjmp	.+244    	; 0x10d2 <firstProgram+0x318>
	}
	else
	{
		EEPROM_writeByte(PROGRAM_ADDRESS,FIRST_PROGRAM);
     fde:	80 e5       	ldi	r24, 0x50	; 80
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	0e 94 5f 0a 	call	0x14be	; 0x14be <EEPROM_writeByte>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 e2       	ldi	r26, 0x20	; 32
     fee:	b1 e4       	ldi	r27, 0x41	; 65
     ff0:	8b 87       	std	Y+11, r24	; 0x0b
     ff2:	9c 87       	std	Y+12, r25	; 0x0c
     ff4:	ad 87       	std	Y+13, r26	; 0x0d
     ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a ef       	ldi	r20, 0xFA	; 250
    1006:	54 e4       	ldi	r21, 0x44	; 68
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	8f 83       	std	Y+7, r24	; 0x07
    1012:	98 87       	std	Y+8, r25	; 0x08
    1014:	a9 87       	std	Y+9, r26	; 0x09
    1016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1018:	6f 81       	ldd	r22, Y+7	; 0x07
    101a:	78 85       	ldd	r23, Y+8	; 0x08
    101c:	89 85       	ldd	r24, Y+9	; 0x09
    101e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    102c:	88 23       	and	r24, r24
    102e:	2c f4       	brge	.+10     	; 0x103a <firstProgram+0x280>
		__ticks = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9e 83       	std	Y+6, r25	; 0x06
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <firstProgram+0x2fe>
	else if (__tmp > 65535)
    103a:	6f 81       	ldd	r22, Y+7	; 0x07
    103c:	78 85       	ldd	r23, Y+8	; 0x08
    103e:	89 85       	ldd	r24, Y+9	; 0x09
    1040:	9a 85       	ldd	r25, Y+10	; 0x0a
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	57 e4       	ldi	r21, 0x47	; 71
    104a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    104e:	18 16       	cp	r1, r24
    1050:	4c f5       	brge	.+82     	; 0x10a4 <firstProgram+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	6b 85       	ldd	r22, Y+11	; 0x0b
    1054:	7c 85       	ldd	r23, Y+12	; 0x0c
    1056:	8d 85       	ldd	r24, Y+13	; 0x0d
    1058:	9e 85       	ldd	r25, Y+14	; 0x0e
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	51 e4       	ldi	r21, 0x41	; 65
    1062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9e 83       	std	Y+6, r25	; 0x06
    1078:	8d 83       	std	Y+5, r24	; 0x05
    107a:	0f c0       	rjmp	.+30     	; 0x109a <firstProgram+0x2e0>
    107c:	88 ec       	ldi	r24, 0xC8	; 200
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	8b 83       	std	Y+3, r24	; 0x03
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <firstProgram+0x2ce>
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1090:	8d 81       	ldd	r24, Y+5	; 0x05
    1092:	9e 81       	ldd	r25, Y+6	; 0x06
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	69 f7       	brne	.-38     	; 0x107c <firstProgram+0x2c2>
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <firstProgram+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a4:	6f 81       	ldd	r22, Y+7	; 0x07
    10a6:	78 85       	ldd	r23, Y+8	; 0x08
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	8d 83       	std	Y+5, r24	; 0x05
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	9e 81       	ldd	r25, Y+6	; 0x06
    10bc:	9a 83       	std	Y+2, r25	; 0x02
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <firstProgram+0x30a>
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

		UART_sendByte(FIRST_PROGRAM);
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <UART_sendByte>
	}
}
    10d2:	e8 96       	adiw	r28, 0x38	; 56
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <defaultProgram>:
 * if the password is correct, the door is opened and closed in 30 s
 * if the password is not correct, Alarm is started  in 60 s
 * for both option the have only 3 trial
 */
void defaultProgram(void)
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <defaultProgram+0x6>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	uint8 key, matchPassword ;
	key = UART_receiveByte();
    10ee:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <UART_receiveByte>
    10f2:	89 83       	std	Y+1, r24	; 0x01

	if (key == '+')
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	8b 32       	cpi	r24, 0x2B	; 43
    10f8:	91 f4       	brne	.+36     	; 0x111e <defaultProgram+0x3a>
	{
		checkPassword(&matchPassword);
    10fa:	ce 01       	movw	r24, r28
    10fc:	02 96       	adiw	r24, 0x02	; 2
    10fe:	0e 94 a6 08 	call	0x114c	; 0x114c <checkPassword>
		if (matchPassword == ZERO_NUMBER_OF_TRIALS)
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	88 23       	and	r24, r24
    1106:	29 f4       	brne	.+10     	; 0x1112 <defaultProgram+0x2e>
		{
			DOOR_isOpened();
    1108:	0e 94 99 09 	call	0x1332	; 0x1332 <DOOR_isOpened>
			DOOR_isClosed();
    110c:	0e 94 34 0a 	call	0x1468	; 0x1468 <DOOR_isClosed>
    1110:	18 c0       	rjmp	.+48     	; 0x1142 <defaultProgram+0x5e>
		}
		else if (matchPassword == MAX_NUMBERS_OF_TRIALS)
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	a9 f4       	brne	.+42     	; 0x1142 <defaultProgram+0x5e>
		{
			alarmProgram();
    1118:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <alarmProgram>
    111c:	12 c0       	rjmp	.+36     	; 0x1142 <defaultProgram+0x5e>
		}

	}
	else if (key == '-')
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	8d 32       	cpi	r24, 0x2D	; 45
    1122:	79 f4       	brne	.+30     	; 0x1142 <defaultProgram+0x5e>
	{
		checkPassword(&matchPassword);
    1124:	ce 01       	movw	r24, r28
    1126:	02 96       	adiw	r24, 0x02	; 2
    1128:	0e 94 a6 08 	call	0x114c	; 0x114c <checkPassword>
		if (matchPassword == ZERO_NUMBER_OF_TRIALS)
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	88 23       	and	r24, r24
    1130:	19 f4       	brne	.+6      	; 0x1138 <defaultProgram+0x54>
		{
			firstProgram();
    1132:	0e 94 dd 06 	call	0xdba	; 0xdba <firstProgram>
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <defaultProgram+0x5e>
		}
		else if (matchPassword == MAX_NUMBERS_OF_TRIALS)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	11 f4       	brne	.+4      	; 0x1142 <defaultProgram+0x5e>
		{
			alarmProgram();
    113e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <alarmProgram>
		}

	}
}
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <checkPassword>:
/*
 * Description: Get the password from the HMI_MC and check it
 * if is right or not
 */
void checkPassword(uint8 * matchPassword)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	60 97       	sbiw	r28, 0x10	; 16
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	98 8b       	std	Y+16, r25	; 0x10
    1162:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 password[PASSWORD_LENGHT];
	uint8 savedPassword[PASSWORD_LENGHT];
	static uint8 trials = 0;

	UART_receiveString(password);
    1164:	ce 01       	movw	r24, r28
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	0e 94 1a 18 	call	0x3034	; 0x3034 <UART_receiveString>
	EEPROM_readString(PASSWORD_ADDRESS,savedPassword);
    116c:	9e 01       	movw	r18, r28
    116e:	28 5f       	subi	r18, 0xF8	; 248
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	b9 01       	movw	r22, r18
    1178:	0e 94 3a 0c 	call	0x1874	; 0x1874 <EEPROM_readString>

	if (comparePassword(password,savedPassword) == 0)
    117c:	9e 01       	movw	r18, r28
    117e:	28 5f       	subi	r18, 0xF8	; 248
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	b9 01       	movw	r22, r18
    1188:	0e 94 1f 09 	call	0x123e	; 0x123e <comparePassword>
    118c:	88 23       	and	r24, r24
    118e:	61 f4       	brne	.+24     	; 0x11a8 <checkPassword+0x5c>
	{
		trials = 0;
    1190:	10 92 83 00 	sts	0x0083, r1
		*matchPassword = trials ;
    1194:	80 91 83 00 	lds	r24, 0x0083
    1198:	ef 85       	ldd	r30, Y+15	; 0x0f
    119a:	f8 89       	ldd	r31, Y+16	; 0x10
    119c:	80 83       	st	Z, r24
		UART_sendByte(trials);
    119e:	80 91 83 00 	lds	r24, 0x0083
    11a2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <UART_sendByte>
    11a6:	14 c0       	rjmp	.+40     	; 0x11d0 <checkPassword+0x84>
	}
	else
	{
		trials++;
    11a8:	80 91 83 00 	lds	r24, 0x0083
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	80 93 83 00 	sts	0x0083, r24
		*matchPassword = trials ;
    11b2:	80 91 83 00 	lds	r24, 0x0083
    11b6:	ef 85       	ldd	r30, Y+15	; 0x0f
    11b8:	f8 89       	ldd	r31, Y+16	; 0x10
    11ba:	80 83       	st	Z, r24
		UART_sendByte(trials);
    11bc:	80 91 83 00 	lds	r24, 0x0083
    11c0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <UART_sendByte>
		if (trials == MAX_NUMBERS_OF_TRIALS)
    11c4:	80 91 83 00 	lds	r24, 0x0083
    11c8:	83 30       	cpi	r24, 0x03	; 3
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <checkPassword+0x84>
		{
			trials = 0 ;
    11cc:	10 92 83 00 	sts	0x0083, r1
		}
	}
}
    11d0:	60 96       	adiw	r28, 0x10	; 16
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <alarmProgram>:

/*
 * Description: Function show error message for 1 minute
 */
void alarmProgram(void)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
	LED_init(LED_RED);
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	0e 94 dd 12 	call	0x25ba	; 0x25ba <LED_init>
	BUZZER_init(BUZZER);
    11f0:	85 e0       	ldi	r24, 0x05	; 5
    11f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
	TIMER_setCallBack(delay.number,_delayForAlarm);
    11f6:	80 91 68 00 	lds	r24, 0x0068
    11fa:	2b ef       	ldi	r18, 0xFB	; 251
    11fc:	35 e0       	ldi	r19, 0x05	; 5
    11fe:	b9 01       	movw	r22, r18
    1200:	0e 94 57 16 	call	0x2cae	; 0x2cae <TIMER_setCallBack>

	BUZZER_turnON(BUZZER);
    1204:	85 e0       	ldi	r24, 0x05	; 5
    1206:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_turnON>
	LED_turnON(LED_RED);
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LED_turnON>

	/*Start Timer to count until reach 60 sec*/
	TIMER_init(&delay);
    1210:	88 e6       	ldi	r24, 0x68	; 104
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TIMER_init>

	 /*Wait until alarm is finished*/
	while(!g_alarmIsONFlag);
    1218:	80 91 82 00 	lds	r24, 0x0082
    121c:	88 23       	and	r24, r24
    121e:	e1 f3       	breq	.-8      	; 0x1218 <alarmProgram+0x36>

	/*Stop timer*/
	TIMER_deInit (delay.number);
    1220:	80 91 68 00 	lds	r24, 0x0068
    1224:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <TIMER_deInit>

	/*Alarm is finished*/
	g_alarmIsONFlag = FALSE ;
    1228:	10 92 82 00 	sts	0x0082, r1

	BUZZER_turnOFF(BUZZER);
    122c:	85 e0       	ldi	r24, 0x05	; 5
    122e:	0e 94 dd 05 	call	0xbba	; 0xbba <BUZZER_turnOFF>
	LED_turnOFF(LED_RED);
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	0e 94 17 13 	call	0x262e	; 0x262e <LED_turnOFF>

}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <comparePassword>:
/*
 * Description: Function to compare the passwords
 */

uint8 comparePassword(const uint8 * password1,const uint8 * password2)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	27 97       	sbiw	r28, 0x07	; 7
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	9c 83       	std	Y+4, r25	; 0x04
    1254:	8b 83       	std	Y+3, r24	; 0x03
    1256:	7e 83       	std	Y+6, r23	; 0x06
    1258:	6d 83       	std	Y+5, r22	; 0x05
    uint8 matchFlag=0,i=0;  // integer variables declaration
    125a:	1a 82       	std	Y+2, r1	; 0x02
    125c:	19 82       	std	Y+1, r1	; 0x01
    125e:	1a c0       	rjmp	.+52     	; 0x1294 <comparePassword+0x56>
    while((password1[i]!='\0') && (password2[i]!='\0'))  // loop on 2 passwords
    {
       if(password1[i]!=password2[i])
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	fc 01       	movw	r30, r24
    126c:	e2 0f       	add	r30, r18
    126e:	f3 1f       	adc	r31, r19
    1270:	40 81       	ld	r20, Z
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	fc 01       	movw	r30, r24
    127e:	e2 0f       	add	r30, r18
    1280:	f3 1f       	adc	r31, r19
    1282:	80 81       	ld	r24, Z
    1284:	48 17       	cp	r20, r24
    1286:	19 f0       	breq	.+6      	; 0x128e <comparePassword+0x50>
       {
    	   matchFlag=1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	19 c0       	rjmp	.+50     	; 0x12c0 <comparePassword+0x82>
           break;
       }
       i++;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	89 83       	std	Y+1, r24	; 0x01
 */

uint8 comparePassword(const uint8 * password1,const uint8 * password2)
{
    uint8 matchFlag=0,i=0;  // integer variables declaration
    while((password1[i]!='\0') && (password2[i]!='\0'))  // loop on 2 passwords
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	fc 01       	movw	r30, r24
    12a0:	e2 0f       	add	r30, r18
    12a2:	f3 1f       	adc	r31, r19
    12a4:	80 81       	ld	r24, Z
    12a6:	88 23       	and	r24, r24
    12a8:	59 f0       	breq	.+22     	; 0x12c0 <comparePassword+0x82>
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	fc 01       	movw	r30, r24
    12b6:	e2 0f       	add	r30, r18
    12b8:	f3 1f       	adc	r31, r19
    12ba:	80 81       	ld	r24, Z
    12bc:	88 23       	and	r24, r24
    12be:	81 f6       	brne	.-96     	; 0x1260 <comparePassword+0x22>
    	   matchFlag=1;
           break;
       }
       i++;
    }
    if(matchFlag==0)
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	88 23       	and	r24, r24
    12c4:	11 f4       	brne	.+4      	; 0x12ca <comparePassword+0x8c>
    {
    	return 0;
    12c6:	1f 82       	std	Y+7, r1	; 0x07
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <comparePassword+0x90>
    }

    else
    {
    	return 1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	8f 83       	std	Y+7, r24	; 0x07
    12ce:	8f 81       	ldd	r24, Y+7	; 0x07
    }

}
    12d0:	27 96       	adiw	r28, 0x07	; 7
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <_delayForMoveingTheDoor>:
 * Description:
 * Function to start a delay of 15 sec to make sure that the door
 * is fully opened
 */
void _delayForMoveingTheDoor(void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	g_tick ++ ;
    12ea:	80 91 84 00 	lds	r24, 0x0084
    12ee:	8f 5f       	subi	r24, 0xFF	; 255
    12f0:	80 93 84 00 	sts	0x0084, r24
	if (g_tick == NUMBER_OF_COMPARE_MATCH_PER_5_SECOND)
    12f4:	80 91 84 00 	lds	r24, 0x0084
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	29 f4       	brne	.+10     	; 0x1306 <_delayForMoveingTheDoor+0x24>
	{
		g_tick = 0 ;
    12fc:	10 92 84 00 	sts	0x0084, r1
		g_doorIsMovingFlag = TRUE ;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 85 00 	sts	0x0085, r24
	}
}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <DOOR_init>:

void DOOR_init(void)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	/*Configure of motor*/
	MOTOR_init();
    1314:	0e 94 57 13 	call	0x26ae	; 0x26ae <MOTOR_init>
	LED_init(LED_GREEN);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	0e 94 dd 12 	call	0x25ba	; 0x25ba <LED_init>

	/*Set Timer call back function*/
	TIMER_setCallBack(delay.number,_delayForMoveingTheDoor);
    131e:	80 91 6f 00 	lds	r24, 0x006F
    1322:	21 e7       	ldi	r18, 0x71	; 113
    1324:	39 e0       	ldi	r19, 0x09	; 9
    1326:	b9 01       	movw	r22, r18
    1328:	0e 94 57 16 	call	0x2cae	; 0x2cae <TIMER_setCallBack>
}
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <DOOR_isOpened>:
 * Description:
 * Function to ROTATE the motor clockwise to open the door
 * in 15 sec
 */
void DOOR_isOpened(void)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	2e 97       	sbiw	r28, 0x0e	; 14
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
	/*Start to open the door*/
	MOTOR_Rotate(CLOCKWISE);
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	0e 94 8b 13 	call	0x2716	; 0x2716 <MOTOR_Rotate>

	/*Turn on green LED*/
	LED_turnON(LED_GREEN);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LED_turnON>

	/*Start Timer to count until reach 15 sec*/
	TIMER_init(&delay);
    1352:	8f e6       	ldi	r24, 0x6F	; 111
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TIMER_init>

	 /*Wait until door is full open*/
	while(!g_doorIsMovingFlag);
    135a:	80 91 85 00 	lds	r24, 0x0085
    135e:	88 23       	and	r24, r24
    1360:	e1 f3       	breq	.-8      	; 0x135a <DOOR_isOpened+0x28>

	/*Stop timer*/
	TIMER_deInit (delay.number);
    1362:	80 91 6f 00 	lds	r24, 0x006F
    1366:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <TIMER_deInit>

	/*Door is fully moved*/
	g_doorIsMovingFlag = FALSE ;
    136a:	10 92 85 00 	sts	0x0085, r1

	/*Stop the movement of motor*/
	MOTOR_Stop();
    136e:	0e 94 0e 14 	call	0x281c	; 0x281c <MOTOR_Stop>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	aa ef       	ldi	r26, 0xFA	; 250
    1378:	b4 e4       	ldi	r27, 0x44	; 68
    137a:	8b 87       	std	Y+11, r24	; 0x0b
    137c:	9c 87       	std	Y+12, r25	; 0x0c
    137e:	ad 87       	std	Y+13, r26	; 0x0d
    1380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1382:	6b 85       	ldd	r22, Y+11	; 0x0b
    1384:	7c 85       	ldd	r23, Y+12	; 0x0c
    1386:	8d 85       	ldd	r24, Y+13	; 0x0d
    1388:	9e 85       	ldd	r25, Y+14	; 0x0e
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4a ef       	ldi	r20, 0xFA	; 250
    1390:	54 e4       	ldi	r21, 0x44	; 68
    1392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	8f 83       	std	Y+7, r24	; 0x07
    139c:	98 87       	std	Y+8, r25	; 0x08
    139e:	a9 87       	std	Y+9, r26	; 0x09
    13a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a2:	6f 81       	ldd	r22, Y+7	; 0x07
    13a4:	78 85       	ldd	r23, Y+8	; 0x08
    13a6:	89 85       	ldd	r24, Y+9	; 0x09
    13a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e8       	ldi	r20, 0x80	; 128
    13b0:	5f e3       	ldi	r21, 0x3F	; 63
    13b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b6:	88 23       	and	r24, r24
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <DOOR_isOpened+0x92>
		__ticks = 1;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9e 83       	std	Y+6, r25	; 0x06
    13c0:	8d 83       	std	Y+5, r24	; 0x05
    13c2:	3f c0       	rjmp	.+126    	; 0x1442 <DOOR_isOpened+0x110>
	else if (__tmp > 65535)
    13c4:	6f 81       	ldd	r22, Y+7	; 0x07
    13c6:	78 85       	ldd	r23, Y+8	; 0x08
    13c8:	89 85       	ldd	r24, Y+9	; 0x09
    13ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	4f e7       	ldi	r20, 0x7F	; 127
    13d2:	57 e4       	ldi	r21, 0x47	; 71
    13d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13d8:	18 16       	cp	r1, r24
    13da:	4c f5       	brge	.+82     	; 0x142e <DOOR_isOpened+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13de:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e2       	ldi	r20, 0x20	; 32
    13ea:	51 e4       	ldi	r21, 0x41	; 65
    13ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9e 83       	std	Y+6, r25	; 0x06
    1402:	8d 83       	std	Y+5, r24	; 0x05
    1404:	0f c0       	rjmp	.+30     	; 0x1424 <DOOR_isOpened+0xf2>
    1406:	88 ec       	ldi	r24, 0xC8	; 200
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9c 83       	std	Y+4, r25	; 0x04
    140c:	8b 83       	std	Y+3, r24	; 0x03
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <DOOR_isOpened+0xe0>
    1416:	9c 83       	std	Y+4, r25	; 0x04
    1418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	9e 83       	std	Y+6, r25	; 0x06
    1422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1424:	8d 81       	ldd	r24, Y+5	; 0x05
    1426:	9e 81       	ldd	r25, Y+6	; 0x06
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	69 f7       	brne	.-38     	; 0x1406 <DOOR_isOpened+0xd4>
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <DOOR_isOpened+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142e:	6f 81       	ldd	r22, Y+7	; 0x07
    1430:	78 85       	ldd	r23, Y+8	; 0x08
    1432:	89 85       	ldd	r24, Y+9	; 0x09
    1434:	9a 85       	ldd	r25, Y+10	; 0x0a
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <DOOR_isOpened+0x11c>
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 2000 seconds */
	_delay_ms(2000);
}
    1456:	2e 96       	adiw	r28, 0x0e	; 14
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <DOOR_isClosed>:
 * Description:
 * Function to ROTATE the motor anti-clockwise to close the door
 * in 15 sec
 */
void DOOR_isClosed(void)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	/*Start to close the door*/
	MOTOR_Rotate(ANTICLOCKWISE);
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	0e 94 8b 13 	call	0x2716	; 0x2716 <MOTOR_Rotate>

	/*Start Timer to count until reach 15 sec*/
	TIMER_init(&delay);
    1476:	8f e6       	ldi	r24, 0x6F	; 111
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <TIMER_init>

	 /*Wait until door is full open*/
	while(!g_doorIsMovingFlag);
    147e:	80 91 85 00 	lds	r24, 0x0085
    1482:	88 23       	and	r24, r24
    1484:	e1 f3       	breq	.-8      	; 0x147e <DOOR_isClosed+0x16>

	/*Stop timer*/
	TIMER_deInit (delay.number);
    1486:	80 91 6f 00 	lds	r24, 0x006F
    148a:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <TIMER_deInit>

	/*Door is fully moved*/
	g_doorIsMovingFlag = FALSE ;
    148e:	10 92 85 00 	sts	0x0085, r1

	/*Turn off green led*/
	LED_turnOFF(LED_GREEN);
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	0e 94 17 13 	call	0x262e	; 0x262e <LED_turnOFF>

	/*Stop the movement of motor*/
	MOTOR_Stop();
    1498:	0e 94 0e 14 	call	0x281c	; 0x281c <MOTOR_Stop>
}
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init(0x01,400000);
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5a e1       	ldi	r21, 0x1A	; 26
    14b0:	66 e0       	ldi	r22, 0x06	; 6
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	0e 94 75 0d 	call	0x1aea	; 0x1aea <TWI_init>
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <EEPROM_writeByte+0x6>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <EEPROM_writeByte+0x8>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	9a 83       	std	Y+2, r25	; 0x02
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_Start();
    14d0:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <TWI_Start>
    if (TWI_getStatus() != TW_START)
    14d4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    14d8:	88 30       	cpi	r24, 0x08	; 8
    14da:	19 f0       	breq	.+6      	; 0x14e2 <EEPROM_writeByte+0x24>
        return ERROR1;
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	8c 83       	std	Y+4, r24	; 0x04
    14e0:	2b c0       	rjmp	.+86     	; 0x1538 <EEPROM_writeByte+0x7a>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_Write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	80 70       	andi	r24, 0x00	; 0
    14e8:	97 70       	andi	r25, 0x07	; 7
    14ea:	88 0f       	add	r24, r24
    14ec:	89 2f       	mov	r24, r25
    14ee:	88 1f       	adc	r24, r24
    14f0:	99 0b       	sbc	r25, r25
    14f2:	91 95       	neg	r25
    14f4:	80 6a       	ori	r24, 0xA0	; 160
    14f6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TWI_Write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    14fa:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    14fe:	88 31       	cpi	r24, 0x18	; 24
    1500:	19 f0       	breq	.+6      	; 0x1508 <EEPROM_writeByte+0x4a>
        return ERROR2;
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	8c 83       	std	Y+4, r24	; 0x04
    1506:	18 c0       	rjmp	.+48     	; 0x1538 <EEPROM_writeByte+0x7a>
		 
    /* Send the required memory location address */
    TWI_Write((uint8)(u16addr));
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TWI_Write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    150e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    1512:	88 32       	cpi	r24, 0x28	; 40
    1514:	19 f0       	breq	.+6      	; 0x151c <EEPROM_writeByte+0x5e>
        return ERROR3;
    1516:	84 e0       	ldi	r24, 0x04	; 4
    1518:	8c 83       	std	Y+4, r24	; 0x04
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <EEPROM_writeByte+0x7a>
		
    /* write byte to eeprom */
    TWI_Write(u8data);
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TWI_Write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1522:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    1526:	88 32       	cpi	r24, 0x28	; 40
    1528:	19 f0       	breq	.+6      	; 0x1530 <EEPROM_writeByte+0x72>
        return ERROR4;
    152a:	85 e0       	ldi	r24, 0x05	; 5
    152c:	8c 83       	std	Y+4, r24	; 0x04
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <EEPROM_writeByte+0x7a>

    /* Send the Stop Bit */
    TWI_Stop();
    1530:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <TWI_Stop>
	
    return SUCCESS;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	8c 83       	std	Y+4, r24	; 0x04
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
}
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <EEPROM_readByte+0x6>
    154e:	00 d0       	rcall	.+0      	; 0x1550 <EEPROM_readByte+0x8>
    1550:	0f 92       	push	r0
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	7c 83       	std	Y+4, r23	; 0x04
    155c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_Start();
    155e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <TWI_Start>
    if (TWI_getStatus() != TW_START)
    1562:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    1566:	88 30       	cpi	r24, 0x08	; 8
    1568:	11 f0       	breq	.+4      	; 0x156e <EEPROM_readByte+0x26>
        return ERROR;
    156a:	1d 82       	std	Y+5, r1	; 0x05
    156c:	44 c0       	rjmp	.+136    	; 0x15f6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	80 70       	andi	r24, 0x00	; 0
    1574:	97 70       	andi	r25, 0x07	; 7
    1576:	88 0f       	add	r24, r24
    1578:	89 2f       	mov	r24, r25
    157a:	88 1f       	adc	r24, r24
    157c:	99 0b       	sbc	r25, r25
    157e:	91 95       	neg	r25
    1580:	80 6a       	ori	r24, 0xA0	; 160
    1582:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TWI_Write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1586:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    158a:	88 31       	cpi	r24, 0x18	; 24
    158c:	11 f0       	breq	.+4      	; 0x1592 <EEPROM_readByte+0x4a>
        return ERROR;
    158e:	1d 82       	std	Y+5, r1	; 0x05
    1590:	32 c0       	rjmp	.+100    	; 0x15f6 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_Write((uint8)(u16addr));
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TWI_Write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1598:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    159c:	88 32       	cpi	r24, 0x28	; 40
    159e:	11 f0       	breq	.+4      	; 0x15a4 <EEPROM_readByte+0x5c>
        return ERROR;
    15a0:	1d 82       	std	Y+5, r1	; 0x05
    15a2:	29 c0       	rjmp	.+82     	; 0x15f6 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_Start();
    15a4:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <TWI_Start>
    if (TWI_getStatus() != TW_REP_START)
    15a8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    15ac:	80 31       	cpi	r24, 0x10	; 16
    15ae:	11 f0       	breq	.+4      	; 0x15b4 <EEPROM_readByte+0x6c>
        return ERROR;
    15b0:	1d 82       	std	Y+5, r1	; 0x05
    15b2:	21 c0       	rjmp	.+66     	; 0x15f6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_Write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	80 70       	andi	r24, 0x00	; 0
    15ba:	97 70       	andi	r25, 0x07	; 7
    15bc:	88 0f       	add	r24, r24
    15be:	89 2f       	mov	r24, r25
    15c0:	88 1f       	adc	r24, r24
    15c2:	99 0b       	sbc	r25, r25
    15c4:	91 95       	neg	r25
    15c6:	81 6a       	ori	r24, 0xA1	; 161
    15c8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TWI_Write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    15cc:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    15d0:	80 34       	cpi	r24, 0x40	; 64
    15d2:	11 f0       	breq	.+4      	; 0x15d8 <EEPROM_readByte+0x90>
        return ERROR;
    15d4:	1d 82       	std	Y+5, r1	; 0x05
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    15d8:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <TWI_readWithNACK>
    15dc:	eb 81       	ldd	r30, Y+3	; 0x03
    15de:	fc 81       	ldd	r31, Y+4	; 0x04
    15e0:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    15e2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <TWI_getStatus>
    15e6:	88 35       	cpi	r24, 0x58	; 88
    15e8:	11 f0       	breq	.+4      	; 0x15ee <EEPROM_readByte+0xa6>
        return ERROR;
    15ea:	1d 82       	std	Y+5, r1	; 0x05
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_Stop();
    15ee:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <TWI_Stop>
    return SUCCESS;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	8d 83       	std	Y+5, r24	; 0x05
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <EEPROM_writeString>:


void EEPROM_writeString(uint16 u16addr,const uint8* Str)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	a1 97       	sbiw	r28, 0x21	; 33
    1612:	0f b6       	in	r0, 0x3f	; 63
    1614:	f8 94       	cli
    1616:	de bf       	out	0x3e, r29	; 62
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	9f 8f       	std	Y+31, r25	; 0x1f
    161e:	8e 8f       	std	Y+30, r24	; 0x1e
    1620:	79 a3       	std	Y+33, r23	; 0x21
    1622:	68 a3       	std	Y+32, r22	; 0x20
	uint8 i = 0;
    1624:	1d 8e       	std	Y+29, r1	; 0x1d
    1626:	8a c0       	rjmp	.+276    	; 0x173c <EEPROM_writeString+0x134>
	while(Str[i]!='\0')
	{
		EEPROM_writeByte(u16addr+i,Str[i]);
    1628:	8d 8d       	ldd	r24, Y+29	; 0x1d
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1630:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1632:	a9 01       	movw	r20, r18
    1634:	48 0f       	add	r20, r24
    1636:	59 1f       	adc	r21, r25
    1638:	8d 8d       	ldd	r24, Y+29	; 0x1d
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	88 a1       	ldd	r24, Y+32	; 0x20
    1640:	99 a1       	ldd	r25, Y+33	; 0x21
    1642:	fc 01       	movw	r30, r24
    1644:	e2 0f       	add	r30, r18
    1646:	f3 1f       	adc	r31, r19
    1648:	20 81       	ld	r18, Z
    164a:	ca 01       	movw	r24, r20
    164c:	62 2f       	mov	r22, r18
    164e:	0e 94 5f 0a 	call	0x14be	; 0x14be <EEPROM_writeByte>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a0 ea       	ldi	r26, 0xA0	; 160
    1658:	b2 e4       	ldi	r27, 0x42	; 66
    165a:	89 8f       	std	Y+25, r24	; 0x19
    165c:	9a 8f       	std	Y+26, r25	; 0x1a
    165e:	ab 8f       	std	Y+27, r26	; 0x1b
    1660:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1662:	69 8d       	ldd	r22, Y+25	; 0x19
    1664:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1668:	9c 8d       	ldd	r25, Y+28	; 0x1c
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	4a ef       	ldi	r20, 0xFA	; 250
    1670:	54 e4       	ldi	r21, 0x44	; 68
    1672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	8d 8b       	std	Y+21, r24	; 0x15
    167c:	9e 8b       	std	Y+22, r25	; 0x16
    167e:	af 8b       	std	Y+23, r26	; 0x17
    1680:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1682:	6d 89       	ldd	r22, Y+21	; 0x15
    1684:	7e 89       	ldd	r23, Y+22	; 0x16
    1686:	8f 89       	ldd	r24, Y+23	; 0x17
    1688:	98 8d       	ldd	r25, Y+24	; 0x18
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e8       	ldi	r20, 0x80	; 128
    1690:	5f e3       	ldi	r21, 0x3F	; 63
    1692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1696:	88 23       	and	r24, r24
    1698:	2c f4       	brge	.+10     	; 0x16a4 <EEPROM_writeString+0x9c>
		__ticks = 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	9c 8b       	std	Y+20, r25	; 0x14
    16a0:	8b 8b       	std	Y+19, r24	; 0x13
    16a2:	3f c0       	rjmp	.+126    	; 0x1722 <EEPROM_writeString+0x11a>
	else if (__tmp > 65535)
    16a4:	6d 89       	ldd	r22, Y+21	; 0x15
    16a6:	7e 89       	ldd	r23, Y+22	; 0x16
    16a8:	8f 89       	ldd	r24, Y+23	; 0x17
    16aa:	98 8d       	ldd	r25, Y+24	; 0x18
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	3f ef       	ldi	r19, 0xFF	; 255
    16b0:	4f e7       	ldi	r20, 0x7F	; 127
    16b2:	57 e4       	ldi	r21, 0x47	; 71
    16b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16b8:	18 16       	cp	r1, r24
    16ba:	4c f5       	brge	.+82     	; 0x170e <EEPROM_writeString+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16bc:	69 8d       	ldd	r22, Y+25	; 0x19
    16be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e2       	ldi	r20, 0x20	; 32
    16ca:	51 e4       	ldi	r21, 0x41	; 65
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	bc 01       	movw	r22, r24
    16d6:	cd 01       	movw	r24, r26
    16d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	9c 8b       	std	Y+20, r25	; 0x14
    16e2:	8b 8b       	std	Y+19, r24	; 0x13
    16e4:	0f c0       	rjmp	.+30     	; 0x1704 <EEPROM_writeString+0xfc>
    16e6:	88 ec       	ldi	r24, 0xC8	; 200
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9a 8b       	std	Y+18, r25	; 0x12
    16ec:	89 8b       	std	Y+17, r24	; 0x11
    16ee:	89 89       	ldd	r24, Y+17	; 0x11
    16f0:	9a 89       	ldd	r25, Y+18	; 0x12
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <EEPROM_writeString+0xea>
    16f6:	9a 8b       	std	Y+18, r25	; 0x12
    16f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fa:	8b 89       	ldd	r24, Y+19	; 0x13
    16fc:	9c 89       	ldd	r25, Y+20	; 0x14
    16fe:	01 97       	sbiw	r24, 0x01	; 1
    1700:	9c 8b       	std	Y+20, r25	; 0x14
    1702:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1704:	8b 89       	ldd	r24, Y+19	; 0x13
    1706:	9c 89       	ldd	r25, Y+20	; 0x14
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	69 f7       	brne	.-38     	; 0x16e6 <EEPROM_writeString+0xde>
    170c:	14 c0       	rjmp	.+40     	; 0x1736 <EEPROM_writeString+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170e:	6d 89       	ldd	r22, Y+21	; 0x15
    1710:	7e 89       	ldd	r23, Y+22	; 0x16
    1712:	8f 89       	ldd	r24, Y+23	; 0x17
    1714:	98 8d       	ldd	r25, Y+24	; 0x18
    1716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9c 8b       	std	Y+20, r25	; 0x14
    1720:	8b 8b       	std	Y+19, r24	; 0x13
    1722:	8b 89       	ldd	r24, Y+19	; 0x13
    1724:	9c 89       	ldd	r25, Y+20	; 0x14
    1726:	98 8b       	std	Y+16, r25	; 0x10
    1728:	8f 87       	std	Y+15, r24	; 0x0f
    172a:	8f 85       	ldd	r24, Y+15	; 0x0f
    172c:	98 89       	ldd	r25, Y+16	; 0x10
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <EEPROM_writeString+0x126>
    1732:	98 8b       	std	Y+16, r25	; 0x10
    1734:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(80);
		i++;
    1736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1738:	8f 5f       	subi	r24, 0xFF	; 255
    173a:	8d 8f       	std	Y+29, r24	; 0x1d


void EEPROM_writeString(uint16 u16addr,const uint8* Str)
{
	uint8 i = 0;
	while(Str[i]!='\0')
    173c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	88 a1       	ldd	r24, Y+32	; 0x20
    1744:	99 a1       	ldd	r25, Y+33	; 0x21
    1746:	fc 01       	movw	r30, r24
    1748:	e2 0f       	add	r30, r18
    174a:	f3 1f       	adc	r31, r19
    174c:	80 81       	ld	r24, Z
    174e:	88 23       	and	r24, r24
    1750:	09 f0       	breq	.+2      	; 0x1754 <EEPROM_writeString+0x14c>
    1752:	6a cf       	rjmp	.-300    	; 0x1628 <EEPROM_writeString+0x20>
	{
		EEPROM_writeByte(u16addr+i,Str[i]);
		_delay_ms(80);
		i++;
	}
	EEPROM_writeByte(u16addr+i,Str[i]);
    1754:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    175c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    175e:	a9 01       	movw	r20, r18
    1760:	48 0f       	add	r20, r24
    1762:	59 1f       	adc	r21, r25
    1764:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	88 a1       	ldd	r24, Y+32	; 0x20
    176c:	99 a1       	ldd	r25, Y+33	; 0x21
    176e:	fc 01       	movw	r30, r24
    1770:	e2 0f       	add	r30, r18
    1772:	f3 1f       	adc	r31, r19
    1774:	20 81       	ld	r18, Z
    1776:	ca 01       	movw	r24, r20
    1778:	62 2f       	mov	r22, r18
    177a:	0e 94 5f 0a 	call	0x14be	; 0x14be <EEPROM_writeByte>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 ea       	ldi	r26, 0xA0	; 160
    1784:	b2 e4       	ldi	r27, 0x42	; 66
    1786:	8b 87       	std	Y+11, r24	; 0x0b
    1788:	9c 87       	std	Y+12, r25	; 0x0c
    178a:	ad 87       	std	Y+13, r26	; 0x0d
    178c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1790:	7c 85       	ldd	r23, Y+12	; 0x0c
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	9e 85       	ldd	r25, Y+14	; 0x0e
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	4a ef       	ldi	r20, 0xFA	; 250
    179c:	54 e4       	ldi	r21, 0x44	; 68
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	8f 83       	std	Y+7, r24	; 0x07
    17a8:	98 87       	std	Y+8, r25	; 0x08
    17aa:	a9 87       	std	Y+9, r26	; 0x09
    17ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ae:	6f 81       	ldd	r22, Y+7	; 0x07
    17b0:	78 85       	ldd	r23, Y+8	; 0x08
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <EEPROM_writeString+0x1c8>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    17ce:	3f c0       	rjmp	.+126    	; 0x184e <EEPROM_writeString+0x246>
	else if (__tmp > 65535)
    17d0:	6f 81       	ldd	r22, Y+7	; 0x07
    17d2:	78 85       	ldd	r23, Y+8	; 0x08
    17d4:	89 85       	ldd	r24, Y+9	; 0x09
    17d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	3f ef       	ldi	r19, 0xFF	; 255
    17dc:	4f e7       	ldi	r20, 0x7F	; 127
    17de:	57 e4       	ldi	r21, 0x47	; 71
    17e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e4:	18 16       	cp	r1, r24
    17e6:	4c f5       	brge	.+82     	; 0x183a <EEPROM_writeString+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	51 e4       	ldi	r21, 0x41	; 65
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	0f c0       	rjmp	.+30     	; 0x1830 <EEPROM_writeString+0x228>
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <EEPROM_writeString+0x216>
    1822:	9c 83       	std	Y+4, r25	; 0x04
    1824:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	9e 81       	ldd	r25, Y+6	; 0x06
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	69 f7       	brne	.-38     	; 0x1812 <EEPROM_writeString+0x20a>
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <EEPROM_writeString+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183a:	6f 81       	ldd	r22, Y+7	; 0x07
    183c:	78 85       	ldd	r23, Y+8	; 0x08
    183e:	89 85       	ldd	r24, Y+9	; 0x09
    1840:	9a 85       	ldd	r25, Y+10	; 0x0a
    1842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	8d 83       	std	Y+5, r24	; 0x05
    184e:	8d 81       	ldd	r24, Y+5	; 0x05
    1850:	9e 81       	ldd	r25, Y+6	; 0x06
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <EEPROM_writeString+0x252>
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(80);
}
    1862:	a1 96       	adiw	r28, 0x21	; 33
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <EEPROM_readString>:


void EEPROM_readString(uint16 u16addr,uint8 * Str)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	a1 97       	sbiw	r28, 0x21	; 33
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	9f 8f       	std	Y+31, r25	; 0x1f
    188a:	8e 8f       	std	Y+30, r24	; 0x1e
    188c:	79 a3       	std	Y+33, r23	; 0x21
    188e:	68 a3       	std	Y+32, r22	; 0x20
	uint8 i = 0;
    1890:	1d 8e       	std	Y+29, r1	; 0x1d
	EEPROM_readByte(u16addr+(uint16)i,&Str[i]);
    1892:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	8e 8d       	ldd	r24, Y+30	; 0x1e
    189a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    189c:	a9 01       	movw	r20, r18
    189e:	48 0f       	add	r20, r24
    18a0:	59 1f       	adc	r21, r25
    18a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	88 a1       	ldd	r24, Y+32	; 0x20
    18aa:	99 a1       	ldd	r25, Y+33	; 0x21
    18ac:	28 0f       	add	r18, r24
    18ae:	39 1f       	adc	r19, r25
    18b0:	ca 01       	movw	r24, r20
    18b2:	b9 01       	movw	r22, r18
    18b4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <EEPROM_readByte>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e2       	ldi	r26, 0x20	; 32
    18be:	b1 e4       	ldi	r27, 0x41	; 65
    18c0:	89 8f       	std	Y+25, r24	; 0x19
    18c2:	9a 8f       	std	Y+26, r25	; 0x1a
    18c4:	ab 8f       	std	Y+27, r26	; 0x1b
    18c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	69 8d       	ldd	r22, Y+25	; 0x19
    18ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a ef       	ldi	r20, 0xFA	; 250
    18d6:	54 e4       	ldi	r21, 0x44	; 68
    18d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8d 8b       	std	Y+21, r24	; 0x15
    18e2:	9e 8b       	std	Y+22, r25	; 0x16
    18e4:	af 8b       	std	Y+23, r26	; 0x17
    18e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18e8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ea:	7e 89       	ldd	r23, Y+22	; 0x16
    18ec:	8f 89       	ldd	r24, Y+23	; 0x17
    18ee:	98 8d       	ldd	r25, Y+24	; 0x18
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <EEPROM_readString+0x96>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9c 8b       	std	Y+20, r25	; 0x14
    1906:	8b 8b       	std	Y+19, r24	; 0x13
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <EEPROM_readString+0x114>
	else if (__tmp > 65535)
    190a:	6d 89       	ldd	r22, Y+21	; 0x15
    190c:	7e 89       	ldd	r23, Y+22	; 0x16
    190e:	8f 89       	ldd	r24, Y+23	; 0x17
    1910:	98 8d       	ldd	r25, Y+24	; 0x18
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <EEPROM_readString+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	69 8d       	ldd	r22, Y+25	; 0x19
    1924:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1926:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1928:	9c 8d       	ldd	r25, Y+28	; 0x1c
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	0f c0       	rjmp	.+30     	; 0x196a <EEPROM_readString+0xf6>
    194c:	88 ec       	ldi	r24, 0xC8	; 200
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9a 8b       	std	Y+18, r25	; 0x12
    1952:	89 8b       	std	Y+17, r24	; 0x11
    1954:	89 89       	ldd	r24, Y+17	; 0x11
    1956:	9a 89       	ldd	r25, Y+18	; 0x12
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <EEPROM_readString+0xe4>
    195c:	9a 8b       	std	Y+18, r25	; 0x12
    195e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8b 89       	ldd	r24, Y+19	; 0x13
    1962:	9c 89       	ldd	r25, Y+20	; 0x14
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8b 89       	ldd	r24, Y+19	; 0x13
    196c:	9c 89       	ldd	r25, Y+20	; 0x14
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <EEPROM_readString+0xd8>
    1972:	9d c0       	rjmp	.+314    	; 0x1aae <EEPROM_readString+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	6d 89       	ldd	r22, Y+21	; 0x15
    1976:	7e 89       	ldd	r23, Y+22	; 0x16
    1978:	8f 89       	ldd	r24, Y+23	; 0x17
    197a:	98 8d       	ldd	r25, Y+24	; 0x18
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9c 8b       	std	Y+20, r25	; 0x14
    1986:	8b 8b       	std	Y+19, r24	; 0x13
    1988:	8b 89       	ldd	r24, Y+19	; 0x13
    198a:	9c 89       	ldd	r25, Y+20	; 0x14
    198c:	98 8b       	std	Y+16, r25	; 0x10
    198e:	8f 87       	std	Y+15, r24	; 0x0f
    1990:	8f 85       	ldd	r24, Y+15	; 0x0f
    1992:	98 89       	ldd	r25, Y+16	; 0x10
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <EEPROM_readString+0x120>
    1998:	98 8b       	std	Y+16, r25	; 0x10
    199a:	8f 87       	std	Y+15, r24	; 0x0f
    199c:	88 c0       	rjmp	.+272    	; 0x1aae <EEPROM_readString+0x23a>
	_delay_ms(10);
	while(Str[i]!='\0')
	{
		i++;
    199e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	8d 8f       	std	Y+29, r24	; 0x1d
		EEPROM_readByte(u16addr+i,&Str[i]);
    19a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19ae:	a9 01       	movw	r20, r18
    19b0:	48 0f       	add	r20, r24
    19b2:	59 1f       	adc	r21, r25
    19b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	88 a1       	ldd	r24, Y+32	; 0x20
    19bc:	99 a1       	ldd	r25, Y+33	; 0x21
    19be:	28 0f       	add	r18, r24
    19c0:	39 1f       	adc	r19, r25
    19c2:	ca 01       	movw	r24, r20
    19c4:	b9 01       	movw	r22, r18
    19c6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <EEPROM_readByte>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a0 e2       	ldi	r26, 0x20	; 32
    19d0:	b1 e4       	ldi	r27, 0x41	; 65
    19d2:	8b 87       	std	Y+11, r24	; 0x0b
    19d4:	9c 87       	std	Y+12, r25	; 0x0c
    19d6:	ad 87       	std	Y+13, r26	; 0x0d
    19d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19da:	6b 85       	ldd	r22, Y+11	; 0x0b
    19dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19de:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	4a ef       	ldi	r20, 0xFA	; 250
    19e8:	54 e4       	ldi	r21, 0x44	; 68
    19ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	8f 83       	std	Y+7, r24	; 0x07
    19f4:	98 87       	std	Y+8, r25	; 0x08
    19f6:	a9 87       	std	Y+9, r26	; 0x09
    19f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19fa:	6f 81       	ldd	r22, Y+7	; 0x07
    19fc:	78 85       	ldd	r23, Y+8	; 0x08
    19fe:	89 85       	ldd	r24, Y+9	; 0x09
    1a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e8       	ldi	r20, 0x80	; 128
    1a08:	5f e3       	ldi	r21, 0x3F	; 63
    1a0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a0e:	88 23       	and	r24, r24
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <EEPROM_readString+0x1a8>
		__ticks = 1;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	3f c0       	rjmp	.+126    	; 0x1a9a <EEPROM_readString+0x226>
	else if (__tmp > 65535)
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	3f ef       	ldi	r19, 0xFF	; 255
    1a28:	4f e7       	ldi	r20, 0x7F	; 127
    1a2a:	57 e4       	ldi	r21, 0x47	; 71
    1a2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a30:	18 16       	cp	r1, r24
    1a32:	4c f5       	brge	.+82     	; 0x1a86 <EEPROM_readString+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e2       	ldi	r20, 0x20	; 32
    1a42:	51 e4       	ldi	r21, 0x41	; 65
    1a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	cd 01       	movw	r24, r26
    1a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a54:	dc 01       	movw	r26, r24
    1a56:	cb 01       	movw	r24, r22
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	0f c0       	rjmp	.+30     	; 0x1a7c <EEPROM_readString+0x208>
    1a5e:	88 ec       	ldi	r24, 0xC8	; 200
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9c 83       	std	Y+4, r25	; 0x04
    1a64:	8b 83       	std	Y+3, r24	; 0x03
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <EEPROM_readString+0x1f6>
    1a6e:	9c 83       	std	Y+4, r25	; 0x04
    1a70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	69 f7       	brne	.-38     	; 0x1a5e <EEPROM_readString+0x1ea>
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <EEPROM_readString+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a86:	6f 81       	ldd	r22, Y+7	; 0x07
    1a88:	78 85       	ldd	r23, Y+8	; 0x08
    1a8a:	89 85       	ldd	r24, Y+9	; 0x09
    1a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <EEPROM_readString+0x232>
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
void EEPROM_readString(uint16 u16addr,uint8 * Str)
{
	uint8 i = 0;
	EEPROM_readByte(u16addr+(uint16)i,&Str[i]);
	_delay_ms(10);
	while(Str[i]!='\0')
    1aae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	88 a1       	ldd	r24, Y+32	; 0x20
    1ab6:	99 a1       	ldd	r25, Y+33	; 0x21
    1ab8:	fc 01       	movw	r30, r24
    1aba:	e2 0f       	add	r30, r18
    1abc:	f3 1f       	adc	r31, r19
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 23       	and	r24, r24
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <EEPROM_readString+0x252>
    1ac4:	6c cf       	rjmp	.-296    	; 0x199e <EEPROM_readString+0x12a>
	{
		i++;
		EEPROM_readByte(u16addr+i,&Str[i]);
		_delay_ms(10);
	}
	Str[i] = '\0' ;
    1ac6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	88 a1       	ldd	r24, Y+32	; 0x20
    1ace:	99 a1       	ldd	r25, Y+33	; 0x21
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	e2 0f       	add	r30, r18
    1ad4:	f3 1f       	adc	r31, r19
    1ad6:	10 82       	st	Z, r1
}
    1ad8:	a1 96       	adiw	r28, 0x21	; 33
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <TWI_init>:
#include "i2c.h"
#define BUAD_PRESCALER(I2C_BUADRATE) ((((F_CPU/I2C_BUADRATE)-16)/2UL))


void TWI_init(uint8 address,uint32 Buadrate)
{
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <TWI_init+0xa>
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <TWI_init+0xc>
    1af6:	0f 92       	push	r0
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	4a 83       	std	Y+2, r20	; 0x02
    1b00:	5b 83       	std	Y+3, r21	; 0x03
    1b02:	6c 83       	std	Y+4, r22	; 0x04
    1b04:	7d 83       	std	Y+5, r23	; 0x05
    /* Configure bit Rate: 400.000 kbps, using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = BUAD_PRESCALER(Buadrate);
    1b06:	00 e2       	ldi	r16, 0x20	; 32
    1b08:	10 e0       	ldi	r17, 0x00	; 0
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	92 e1       	ldi	r25, 0x12	; 18
    1b0e:	aa e7       	ldi	r26, 0x7A	; 122
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	2a 81       	ldd	r18, Y+2	; 0x02
    1b14:	3b 81       	ldd	r19, Y+3	; 0x03
    1b16:	4c 81       	ldd	r20, Y+4	; 0x04
    1b18:	5d 81       	ldd	r21, Y+5	; 0x05
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 3e 18 	call	0x307c	; 0x307c <__udivmodsi4>
    1b22:	da 01       	movw	r26, r20
    1b24:	c9 01       	movw	r24, r18
    1b26:	40 97       	sbiw	r24, 0x10	; 16
    1b28:	a1 09       	sbc	r26, r1
    1b2a:	b1 09       	sbc	r27, r1
    1b2c:	b6 95       	lsr	r27
    1b2e:	a7 95       	ror	r26
    1b30:	97 95       	ror	r25
    1b32:	87 95       	ror	r24
    1b34:	f8 01       	movw	r30, r16
    1b36:	80 83       	st	Z, r24
	TWSR = 0x00;
    1b38:	e1 e2       	ldi	r30, 0x21	; 33
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	10 82       	st	Z, r1

	/*Two wire bus address, configure my address when another master call
	 * me as a slave
	 *Turn off  general call recognetion*/
	TWAR = (address<<1); /*Shift address by one to put in 7 MSB bit in TWAR*/
    1b3e:	e2 e2       	ldi	r30, 0x22	; 34
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	88 0f       	add	r24, r24
    1b46:	80 83       	st	Z, r24
	/****TWCR Description:
	 * TWEN = 1, Enable TWI operations and activate TWI interface
	 */
	TWCR = (1<<TWEN);
    1b48:	e6 e5       	ldi	r30, 0x56	; 86
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	80 83       	st	Z, r24
}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	08 95       	ret

00001b64 <TWI_Start>:
	TWCR = (1<<TWEN);
}
#endif

void TWI_Start(void)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT bi  before sending start bit
	 * Send start bit by set TWSTA
	 * Enable TWI operations by set TWEN
	 */
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1b6c:	e6 e5       	ldi	r30, 0x56	; 86
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	84 ea       	ldi	r24, 0xA4	; 164
    1b72:	80 83       	st	Z, r24
	/*Wait until start bit is sent (TWINT flag is set)*/
	while (BIT_IS_CLEAR(TWCR,TWINT));
    1b74:	e6 e5       	ldi	r30, 0x56	; 86
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 23       	and	r24, r24
    1b7c:	dc f7       	brge	.-10     	; 0x1b74 <TWI_Start+0x10>
}
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <TWI_Stop>:

void TWI_Stop(void)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT before sending stop bit
	 * Send stop bit by set TWSTO
	 * Enable TWI operations by set TWEN
	 */
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
    1b8c:	e6 e5       	ldi	r30, 0x56	; 86
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	84 e9       	ldi	r24, 0x94	; 148
    1b92:	80 83       	st	Z, r24
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <TWI_Write>:

void TWI_Write(uint8 data)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	0f 92       	push	r0
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	89 83       	std	Y+1, r24	; 0x01
	/*Put data in TWDR register*/
	TWDR = data ;
    1ba6:	e3 e2       	ldi	r30, 0x23	; 35
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT before sending data
	 * Enable TWI operations by set TWEN
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    1bae:	e6 e5       	ldi	r30, 0x56	; 86
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	84 e8       	ldi	r24, 0x84	; 132
    1bb4:	80 83       	st	Z, r24
	/*Wait until data is sent (TWINT flag is set)*/
	while (BIT_IS_CLEAR(TWCR,TWINT));
    1bb6:	e6 e5       	ldi	r30, 0x56	; 86
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	88 23       	and	r24, r24
    1bbe:	dc f7       	brge	.-10     	; 0x1bb6 <TWI_Write+0x1c>
}
    1bc0:	0f 90       	pop	r0
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT before receiving data
	 * Send sending ACK after sending or receving data by set TWEA
	 * Enable TWI operations by set TWEN
	 */
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
    1bd0:	e6 e5       	ldi	r30, 0x56	; 86
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	84 ec       	ldi	r24, 0xC4	; 196
    1bd6:	80 83       	st	Z, r24
	/*Wait until data is received (TWINT flag is set)*/
	while (BIT_IS_CLEAR(TWCR,TWINT));
    1bd8:	e6 e5       	ldi	r30, 0x56	; 86
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	88 23       	and	r24, r24
    1be0:	dc f7       	brge	.-10     	; 0x1bd8 <TWI_readWithACK+0x10>
	/*read the data in TWDR*/
	return TWDR;
    1be2:	e3 e2       	ldi	r30, 0x23	; 35
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
}
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT before receiving data
	 * Enable TWI operations by set TWEN
	 */
	TWCR = (1<<TWINT) | (1<<TWEN);
    1bf6:	e6 e5       	ldi	r30, 0x56	; 86
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	84 e8       	ldi	r24, 0x84	; 132
    1bfc:	80 83       	st	Z, r24
	/*Wait until data is received (TWINT flag is set)*/
	while (BIT_IS_CLEAR(TWCR,TWINT));
    1bfe:	e6 e5       	ldi	r30, 0x56	; 86
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	88 23       	and	r24, r24
    1c06:	dc f7       	brge	.-10     	; 0x1bfe <TWI_readWithNACK+0x10>
	/*read the data in TWDR*/
	return TWDR;
    1c08:	e3 e2       	ldi	r30, 0x23	; 35
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
}
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <TWI_getStatus>:
uint8 TWI_getStatus(void)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/*Mask first 3 LSB with zero to read the 5 MSB clearly (status bits)*/
	status = (TWSR & 0xF8);
    1c1e:	e1 e2       	ldi	r30, 0x21	; 33
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	88 7f       	andi	r24, 0xF8	; 248
    1c26:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1c3a:	ea e3       	ldi	r30, 0x3A	; 58
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1c42:	a7 e3       	ldi	r26, 0x37	; 55
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e7 e3       	ldi	r30, 0x37	; 55
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 6e       	ori	r24, 0xE0	; 224
    1c4e:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1c50:	88 e3       	ldi	r24, 0x38	; 56
    1c52:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1c56:	8c e0       	ldi	r24, 0x0C	; 12
    1c58:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
}
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	e9 97       	sbiw	r28, 0x39	; 57
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1c7e:	a8 e3       	ldi	r26, 0x38	; 56
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e8 e3       	ldi	r30, 0x38	; 56
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8f 77       	andi	r24, 0x7F	; 127
    1c8a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1c8c:	a8 e3       	ldi	r26, 0x38	; 56
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e8 e3       	ldi	r30, 0x38	; 56
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	8f 7b       	andi	r24, 0xBF	; 191
    1c98:	8c 93       	st	X, r24
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ca0:	bf e3       	ldi	r27, 0x3F	; 63
    1ca2:	8d ab       	std	Y+53, r24	; 0x35
    1ca4:	9e ab       	std	Y+54, r25	; 0x36
    1ca6:	af ab       	std	Y+55, r26	; 0x37
    1ca8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	6d a9       	ldd	r22, Y+53	; 0x35
    1cac:	7e a9       	ldd	r23, Y+54	; 0x36
    1cae:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb0:	98 ad       	ldd	r25, Y+56	; 0x38
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4a ef       	ldi	r20, 0xFA	; 250
    1cb8:	54 e4       	ldi	r21, 0x44	; 68
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	89 ab       	std	Y+49, r24	; 0x31
    1cc4:	9a ab       	std	Y+50, r25	; 0x32
    1cc6:	ab ab       	std	Y+51, r26	; 0x33
    1cc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cca:	69 a9       	ldd	r22, Y+49	; 0x31
    1ccc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cce:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <LCD_sendCommand+0x84>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	98 ab       	std	Y+48, r25	; 0x30
    1ce8:	8f a7       	std	Y+47, r24	; 0x2f
    1cea:	3f c0       	rjmp	.+126    	; 0x1d6a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1cec:	69 a9       	ldd	r22, Y+49	; 0x31
    1cee:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf0:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf2:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	57 e4       	ldi	r21, 0x47	; 71
    1cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	4c f5       	brge	.+82     	; 0x1d56 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	6d a9       	ldd	r22, Y+53	; 0x35
    1d06:	7e a9       	ldd	r23, Y+54	; 0x36
    1d08:	8f a9       	ldd	r24, Y+55	; 0x37
    1d0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	98 ab       	std	Y+48, r25	; 0x30
    1d2a:	8f a7       	std	Y+47, r24	; 0x2f
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <LCD_sendCommand+0xe4>
    1d2e:	88 ec       	ldi	r24, 0xC8	; 200
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9e a7       	std	Y+46, r25	; 0x2e
    1d34:	8d a7       	std	Y+45, r24	; 0x2d
    1d36:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d38:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_sendCommand+0xd2>
    1d3e:	9e a7       	std	Y+46, r25	; 0x2e
    1d40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d44:	98 a9       	ldd	r25, Y+48	; 0x30
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	98 ab       	std	Y+48, r25	; 0x30
    1d4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f7       	brne	.-38     	; 0x1d2e <LCD_sendCommand+0xc6>
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	69 a9       	ldd	r22, Y+49	; 0x31
    1d58:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	98 ab       	std	Y+48, r25	; 0x30
    1d68:	8f a7       	std	Y+47, r24	; 0x2f
    1d6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6e:	9c a7       	std	Y+44, r25	; 0x2c
    1d70:	8b a7       	std	Y+43, r24	; 0x2b
    1d72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d74:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_sendCommand+0x10e>
    1d7a:	9c a7       	std	Y+44, r25	; 0x2c
    1d7c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1d7e:	a8 e3       	ldi	r26, 0x38	; 56
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e8 e3       	ldi	r30, 0x38	; 56
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	80 62       	ori	r24, 0x20	; 32
    1d8a:	8c 93       	st	X, r24
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	a0 e8       	ldi	r26, 0x80	; 128
    1d92:	bf e3       	ldi	r27, 0x3F	; 63
    1d94:	8f a3       	std	Y+39, r24	; 0x27
    1d96:	98 a7       	std	Y+40, r25	; 0x28
    1d98:	a9 a7       	std	Y+41, r26	; 0x29
    1d9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1da0:	89 a5       	ldd	r24, Y+41	; 0x29
    1da2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	4a ef       	ldi	r20, 0xFA	; 250
    1daa:	54 e4       	ldi	r21, 0x44	; 68
    1dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8b a3       	std	Y+35, r24	; 0x23
    1db6:	9c a3       	std	Y+36, r25	; 0x24
    1db8:	ad a3       	std	Y+37, r26	; 0x25
    1dba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e8       	ldi	r20, 0x80	; 128
    1dca:	5f e3       	ldi	r21, 0x3F	; 63
    1dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd0:	88 23       	and	r24, r24
    1dd2:	2c f4       	brge	.+10     	; 0x1dde <LCD_sendCommand+0x176>
		__ticks = 1;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9a a3       	std	Y+34, r25	; 0x22
    1dda:	89 a3       	std	Y+33, r24	; 0x21
    1ddc:	3f c0       	rjmp	.+126    	; 0x1e5c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1dde:	6b a1       	ldd	r22, Y+35	; 0x23
    1de0:	7c a1       	ldd	r23, Y+36	; 0x24
    1de2:	8d a1       	ldd	r24, Y+37	; 0x25
    1de4:	9e a1       	ldd	r25, Y+38	; 0x26
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	3f ef       	ldi	r19, 0xFF	; 255
    1dea:	4f e7       	ldi	r20, 0x7F	; 127
    1dec:	57 e4       	ldi	r21, 0x47	; 71
    1dee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df2:	18 16       	cp	r1, r24
    1df4:	4c f5       	brge	.+82     	; 0x1e48 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df6:	6f a1       	ldd	r22, Y+39	; 0x27
    1df8:	78 a5       	ldd	r23, Y+40	; 0x28
    1dfa:	89 a5       	ldd	r24, Y+41	; 0x29
    1dfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e2       	ldi	r20, 0x20	; 32
    1e04:	51 e4       	ldi	r21, 0x41	; 65
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	9a a3       	std	Y+34, r25	; 0x22
    1e1c:	89 a3       	std	Y+33, r24	; 0x21
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <LCD_sendCommand+0x1d6>
    1e20:	88 ec       	ldi	r24, 0xC8	; 200
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	98 a3       	std	Y+32, r25	; 0x20
    1e26:	8f 8f       	std	Y+31, r24	; 0x1f
    1e28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_sendCommand+0x1c4>
    1e30:	98 a3       	std	Y+32, r25	; 0x20
    1e32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e34:	89 a1       	ldd	r24, Y+33	; 0x21
    1e36:	9a a1       	ldd	r25, Y+34	; 0x22
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	9a a3       	std	Y+34, r25	; 0x22
    1e3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e40:	9a a1       	ldd	r25, Y+34	; 0x22
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	69 f7       	brne	.-38     	; 0x1e20 <LCD_sendCommand+0x1b8>
    1e46:	14 c0       	rjmp	.+40     	; 0x1e70 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e48:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	9a a3       	std	Y+34, r25	; 0x22
    1e5a:	89 a3       	std	Y+33, r24	; 0x21
    1e5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e60:	9e 8f       	std	Y+30, r25	; 0x1e
    1e62:	8d 8f       	std	Y+29, r24	; 0x1d
    1e64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_sendCommand+0x200>
    1e6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1e70:	eb e3       	ldi	r30, 0x3B	; 59
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	89 ad       	ldd	r24, Y+57	; 0x39
    1e76:	80 83       	st	Z, r24
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e8       	ldi	r26, 0x80	; 128
    1e7e:	bf e3       	ldi	r27, 0x3F	; 63
    1e80:	89 8f       	std	Y+25, r24	; 0x19
    1e82:	9a 8f       	std	Y+26, r25	; 0x1a
    1e84:	ab 8f       	std	Y+27, r26	; 0x1b
    1e86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e88:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a ef       	ldi	r20, 0xFA	; 250
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8d 8b       	std	Y+21, r24	; 0x15
    1ea2:	9e 8b       	std	Y+22, r25	; 0x16
    1ea4:	af 8b       	std	Y+23, r26	; 0x17
    1ea6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ea8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1eac:	8f 89       	ldd	r24, Y+23	; 0x17
    1eae:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <LCD_sendCommand+0x262>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9c 8b       	std	Y+20, r25	; 0x14
    1ec6:	8b 8b       	std	Y+19, r24	; 0x13
    1ec8:	3f c0       	rjmp	.+126    	; 0x1f48 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1eca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ece:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	3f ef       	ldi	r19, 0xFF	; 255
    1ed6:	4f e7       	ldi	r20, 0x7F	; 127
    1ed8:	57 e4       	ldi	r21, 0x47	; 71
    1eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ede:	18 16       	cp	r1, r24
    1ee0:	4c f5       	brge	.+82     	; 0x1f34 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ee8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e2       	ldi	r20, 0x20	; 32
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	bc 01       	movw	r22, r24
    1efc:	cd 01       	movw	r24, r26
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9c 8b       	std	Y+20, r25	; 0x14
    1f08:	8b 8b       	std	Y+19, r24	; 0x13
    1f0a:	0f c0       	rjmp	.+30     	; 0x1f2a <LCD_sendCommand+0x2c2>
    1f0c:	88 ec       	ldi	r24, 0xC8	; 200
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	9a 8b       	std	Y+18, r25	; 0x12
    1f12:	89 8b       	std	Y+17, r24	; 0x11
    1f14:	89 89       	ldd	r24, Y+17	; 0x11
    1f16:	9a 89       	ldd	r25, Y+18	; 0x12
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_sendCommand+0x2b0>
    1f1c:	9a 8b       	std	Y+18, r25	; 0x12
    1f1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f20:	8b 89       	ldd	r24, Y+19	; 0x13
    1f22:	9c 89       	ldd	r25, Y+20	; 0x14
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	9c 8b       	std	Y+20, r25	; 0x14
    1f28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	69 f7       	brne	.-38     	; 0x1f0c <LCD_sendCommand+0x2a4>
    1f32:	14 c0       	rjmp	.+40     	; 0x1f5c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f34:	6d 89       	ldd	r22, Y+21	; 0x15
    1f36:	7e 89       	ldd	r23, Y+22	; 0x16
    1f38:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	9c 8b       	std	Y+20, r25	; 0x14
    1f46:	8b 8b       	std	Y+19, r24	; 0x13
    1f48:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4c:	98 8b       	std	Y+16, r25	; 0x10
    1f4e:	8f 87       	std	Y+15, r24	; 0x0f
    1f50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f52:	98 89       	ldd	r25, Y+16	; 0x10
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_sendCommand+0x2ec>
    1f58:	98 8b       	std	Y+16, r25	; 0x10
    1f5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1f5c:	a8 e3       	ldi	r26, 0x38	; 56
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e8 e3       	ldi	r30, 0x38	; 56
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8f 7d       	andi	r24, 0xDF	; 223
    1f68:	8c 93       	st	X, r24
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e8       	ldi	r26, 0x80	; 128
    1f70:	bf e3       	ldi	r27, 0x3F	; 63
    1f72:	8b 87       	std	Y+11, r24	; 0x0b
    1f74:	9c 87       	std	Y+12, r25	; 0x0c
    1f76:	ad 87       	std	Y+13, r26	; 0x0d
    1f78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4a ef       	ldi	r20, 0xFA	; 250
    1f88:	54 e4       	ldi	r21, 0x44	; 68
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8f 83       	std	Y+7, r24	; 0x07
    1f94:	98 87       	std	Y+8, r25	; 0x08
    1f96:	a9 87       	std	Y+9, r26	; 0x09
    1f98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9c:	78 85       	ldd	r23, Y+8	; 0x08
    1f9e:	89 85       	ldd	r24, Y+9	; 0x09
    1fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <LCD_sendCommand+0x354>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
    1fba:	3f c0       	rjmp	.+126    	; 0x203a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbe:	78 85       	ldd	r23, Y+8	; 0x08
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	4c f5       	brge	.+82     	; 0x2026 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <LCD_sendCommand+0x3b4>
    1ffe:	88 ec       	ldi	r24, 0xC8	; 200
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_sendCommand+0x3a2>
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	9e 81       	ldd	r25, Y+6	; 0x06
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <LCD_sendCommand+0x396>
    2024:	14 c0       	rjmp	.+40     	; 0x204e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	8d 81       	ldd	r24, Y+5	; 0x05
    203c:	9e 81       	ldd	r25, Y+6	; 0x06
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_sendCommand+0x3de>
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    204e:	e9 96       	adiw	r28, 0x39	; 57
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	e9 97       	sbiw	r28, 0x39	; 57
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2076:	a8 e3       	ldi	r26, 0x38	; 56
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e8 e3       	ldi	r30, 0x38	; 56
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	80 68       	ori	r24, 0x80	; 128
    2082:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2084:	a8 e3       	ldi	r26, 0x38	; 56
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e8 e3       	ldi	r30, 0x38	; 56
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8f 7b       	andi	r24, 0xBF	; 191
    2090:	8c 93       	st	X, r24
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e8       	ldi	r26, 0x80	; 128
    2098:	bf e3       	ldi	r27, 0x3F	; 63
    209a:	8d ab       	std	Y+53, r24	; 0x35
    209c:	9e ab       	std	Y+54, r25	; 0x36
    209e:	af ab       	std	Y+55, r26	; 0x37
    20a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	6d a9       	ldd	r22, Y+53	; 0x35
    20a4:	7e a9       	ldd	r23, Y+54	; 0x36
    20a6:	8f a9       	ldd	r24, Y+55	; 0x37
    20a8:	98 ad       	ldd	r25, Y+56	; 0x38
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	4a ef       	ldi	r20, 0xFA	; 250
    20b0:	54 e4       	ldi	r21, 0x44	; 68
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	89 ab       	std	Y+49, r24	; 0x31
    20bc:	9a ab       	std	Y+50, r25	; 0x32
    20be:	ab ab       	std	Y+51, r26	; 0x33
    20c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20c2:	69 a9       	ldd	r22, Y+49	; 0x31
    20c4:	7a a9       	ldd	r23, Y+50	; 0x32
    20c6:	8b a9       	ldd	r24, Y+51	; 0x33
    20c8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	2c f4       	brge	.+10     	; 0x20e4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	98 ab       	std	Y+48, r25	; 0x30
    20e0:	8f a7       	std	Y+47, r24	; 0x2f
    20e2:	3f c0       	rjmp	.+126    	; 0x2162 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    20e4:	69 a9       	ldd	r22, Y+49	; 0x31
    20e6:	7a a9       	ldd	r23, Y+50	; 0x32
    20e8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ea:	9c a9       	ldd	r25, Y+52	; 0x34
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	3f ef       	ldi	r19, 0xFF	; 255
    20f0:	4f e7       	ldi	r20, 0x7F	; 127
    20f2:	57 e4       	ldi	r21, 0x47	; 71
    20f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f8:	18 16       	cp	r1, r24
    20fa:	4c f5       	brge	.+82     	; 0x214e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	6d a9       	ldd	r22, Y+53	; 0x35
    20fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2100:	8f a9       	ldd	r24, Y+55	; 0x37
    2102:	98 ad       	ldd	r25, Y+56	; 0x38
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	98 ab       	std	Y+48, r25	; 0x30
    2122:	8f a7       	std	Y+47, r24	; 0x2f
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <LCD_displayCharacter+0xe4>
    2126:	88 ec       	ldi	r24, 0xC8	; 200
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9e a7       	std	Y+46, r25	; 0x2e
    212c:	8d a7       	std	Y+45, r24	; 0x2d
    212e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2130:	9e a5       	ldd	r25, Y+46	; 0x2e
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <LCD_displayCharacter+0xd2>
    2136:	9e a7       	std	Y+46, r25	; 0x2e
    2138:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8f a5       	ldd	r24, Y+47	; 0x2f
    213c:	98 a9       	ldd	r25, Y+48	; 0x30
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	98 ab       	std	Y+48, r25	; 0x30
    2142:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8f a5       	ldd	r24, Y+47	; 0x2f
    2146:	98 a9       	ldd	r25, Y+48	; 0x30
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <LCD_displayCharacter+0xc6>
    214c:	14 c0       	rjmp	.+40     	; 0x2176 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	69 a9       	ldd	r22, Y+49	; 0x31
    2150:	7a a9       	ldd	r23, Y+50	; 0x32
    2152:	8b a9       	ldd	r24, Y+51	; 0x33
    2154:	9c a9       	ldd	r25, Y+52	; 0x34
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	98 ab       	std	Y+48, r25	; 0x30
    2160:	8f a7       	std	Y+47, r24	; 0x2f
    2162:	8f a5       	ldd	r24, Y+47	; 0x2f
    2164:	98 a9       	ldd	r25, Y+48	; 0x30
    2166:	9c a7       	std	Y+44, r25	; 0x2c
    2168:	8b a7       	std	Y+43, r24	; 0x2b
    216a:	8b a5       	ldd	r24, Y+43	; 0x2b
    216c:	9c a5       	ldd	r25, Y+44	; 0x2c
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_displayCharacter+0x10e>
    2172:	9c a7       	std	Y+44, r25	; 0x2c
    2174:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2176:	a8 e3       	ldi	r26, 0x38	; 56
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e8 e3       	ldi	r30, 0x38	; 56
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	80 62       	ori	r24, 0x20	; 32
    2182:	8c 93       	st	X, r24
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a0 e8       	ldi	r26, 0x80	; 128
    218a:	bf e3       	ldi	r27, 0x3F	; 63
    218c:	8f a3       	std	Y+39, r24	; 0x27
    218e:	98 a7       	std	Y+40, r25	; 0x28
    2190:	a9 a7       	std	Y+41, r26	; 0x29
    2192:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	6f a1       	ldd	r22, Y+39	; 0x27
    2196:	78 a5       	ldd	r23, Y+40	; 0x28
    2198:	89 a5       	ldd	r24, Y+41	; 0x29
    219a:	9a a5       	ldd	r25, Y+42	; 0x2a
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8b a3       	std	Y+35, r24	; 0x23
    21ae:	9c a3       	std	Y+36, r25	; 0x24
    21b0:	ad a3       	std	Y+37, r26	; 0x25
    21b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21b4:	6b a1       	ldd	r22, Y+35	; 0x23
    21b6:	7c a1       	ldd	r23, Y+36	; 0x24
    21b8:	8d a1       	ldd	r24, Y+37	; 0x25
    21ba:	9e a1       	ldd	r25, Y+38	; 0x26
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9a a3       	std	Y+34, r25	; 0x22
    21d2:	89 a3       	std	Y+33, r24	; 0x21
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    21d6:	6b a1       	ldd	r22, Y+35	; 0x23
    21d8:	7c a1       	ldd	r23, Y+36	; 0x24
    21da:	8d a1       	ldd	r24, Y+37	; 0x25
    21dc:	9e a1       	ldd	r25, Y+38	; 0x26
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	6f a1       	ldd	r22, Y+39	; 0x27
    21f0:	78 a5       	ldd	r23, Y+40	; 0x28
    21f2:	89 a5       	ldd	r24, Y+41	; 0x29
    21f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9a a3       	std	Y+34, r25	; 0x22
    2214:	89 a3       	std	Y+33, r24	; 0x21
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <LCD_displayCharacter+0x1d6>
    2218:	88 ec       	ldi	r24, 0xC8	; 200
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	98 a3       	std	Y+32, r25	; 0x20
    221e:	8f 8f       	std	Y+31, r24	; 0x1f
    2220:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2222:	98 a1       	ldd	r25, Y+32	; 0x20
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_displayCharacter+0x1c4>
    2228:	98 a3       	std	Y+32, r25	; 0x20
    222a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	89 a1       	ldd	r24, Y+33	; 0x21
    222e:	9a a1       	ldd	r25, Y+34	; 0x22
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	9a a3       	std	Y+34, r25	; 0x22
    2234:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	89 a1       	ldd	r24, Y+33	; 0x21
    2238:	9a a1       	ldd	r25, Y+34	; 0x22
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <LCD_displayCharacter+0x1b8>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	6b a1       	ldd	r22, Y+35	; 0x23
    2242:	7c a1       	ldd	r23, Y+36	; 0x24
    2244:	8d a1       	ldd	r24, Y+37	; 0x25
    2246:	9e a1       	ldd	r25, Y+38	; 0x26
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9a a3       	std	Y+34, r25	; 0x22
    2252:	89 a3       	std	Y+33, r24	; 0x21
    2254:	89 a1       	ldd	r24, Y+33	; 0x21
    2256:	9a a1       	ldd	r25, Y+34	; 0x22
    2258:	9e 8f       	std	Y+30, r25	; 0x1e
    225a:	8d 8f       	std	Y+29, r24	; 0x1d
    225c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    225e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_displayCharacter+0x200>
    2264:	9e 8f       	std	Y+30, r25	; 0x1e
    2266:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    2268:	eb e3       	ldi	r30, 0x3B	; 59
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	89 ad       	ldd	r24, Y+57	; 0x39
    226e:	80 83       	st	Z, r24
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 e8       	ldi	r26, 0x80	; 128
    2276:	bf e3       	ldi	r27, 0x3F	; 63
    2278:	89 8f       	std	Y+25, r24	; 0x19
    227a:	9a 8f       	std	Y+26, r25	; 0x1a
    227c:	ab 8f       	std	Y+27, r26	; 0x1b
    227e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	69 8d       	ldd	r22, Y+25	; 0x19
    2282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a ef       	ldi	r20, 0xFA	; 250
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8d 8b       	std	Y+21, r24	; 0x15
    229a:	9e 8b       	std	Y+22, r25	; 0x16
    229c:	af 8b       	std	Y+23, r26	; 0x17
    229e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22a0:	6d 89       	ldd	r22, Y+21	; 0x15
    22a2:	7e 89       	ldd	r23, Y+22	; 0x16
    22a4:	8f 89       	ldd	r24, Y+23	; 0x17
    22a6:	98 8d       	ldd	r25, Y+24	; 0x18
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9c 8b       	std	Y+20, r25	; 0x14
    22be:	8b 8b       	std	Y+19, r24	; 0x13
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    22c2:	6d 89       	ldd	r22, Y+21	; 0x15
    22c4:	7e 89       	ldd	r23, Y+22	; 0x16
    22c6:	8f 89       	ldd	r24, Y+23	; 0x17
    22c8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	69 8d       	ldd	r22, Y+25	; 0x19
    22dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9c 8b       	std	Y+20, r25	; 0x14
    2300:	8b 8b       	std	Y+19, r24	; 0x13
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <LCD_displayCharacter+0x2c2>
    2304:	88 ec       	ldi	r24, 0xC8	; 200
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9a 8b       	std	Y+18, r25	; 0x12
    230a:	89 8b       	std	Y+17, r24	; 0x11
    230c:	89 89       	ldd	r24, Y+17	; 0x11
    230e:	9a 89       	ldd	r25, Y+18	; 0x12
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_displayCharacter+0x2b0>
    2314:	9a 8b       	std	Y+18, r25	; 0x12
    2316:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	8b 89       	ldd	r24, Y+19	; 0x13
    231a:	9c 89       	ldd	r25, Y+20	; 0x14
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9c 8b       	std	Y+20, r25	; 0x14
    2320:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	8b 89       	ldd	r24, Y+19	; 0x13
    2324:	9c 89       	ldd	r25, Y+20	; 0x14
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <LCD_displayCharacter+0x2a4>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6d 89       	ldd	r22, Y+21	; 0x15
    232e:	7e 89       	ldd	r23, Y+22	; 0x16
    2330:	8f 89       	ldd	r24, Y+23	; 0x17
    2332:	98 8d       	ldd	r25, Y+24	; 0x18
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9c 8b       	std	Y+20, r25	; 0x14
    233e:	8b 8b       	std	Y+19, r24	; 0x13
    2340:	8b 89       	ldd	r24, Y+19	; 0x13
    2342:	9c 89       	ldd	r25, Y+20	; 0x14
    2344:	98 8b       	std	Y+16, r25	; 0x10
    2346:	8f 87       	std	Y+15, r24	; 0x0f
    2348:	8f 85       	ldd	r24, Y+15	; 0x0f
    234a:	98 89       	ldd	r25, Y+16	; 0x10
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_displayCharacter+0x2ec>
    2350:	98 8b       	std	Y+16, r25	; 0x10
    2352:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2354:	a8 e3       	ldi	r26, 0x38	; 56
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e8 e3       	ldi	r30, 0x38	; 56
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8f 7d       	andi	r24, 0xDF	; 223
    2360:	8c 93       	st	X, r24
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a0 e8       	ldi	r26, 0x80	; 128
    2368:	bf e3       	ldi	r27, 0x3F	; 63
    236a:	8b 87       	std	Y+11, r24	; 0x0b
    236c:	9c 87       	std	Y+12, r25	; 0x0c
    236e:	ad 87       	std	Y+13, r26	; 0x0d
    2370:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	6b 85       	ldd	r22, Y+11	; 0x0b
    2374:	7c 85       	ldd	r23, Y+12	; 0x0c
    2376:	8d 85       	ldd	r24, Y+13	; 0x0d
    2378:	9e 85       	ldd	r25, Y+14	; 0x0e
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a ef       	ldi	r20, 0xFA	; 250
    2380:	54 e4       	ldi	r21, 0x44	; 68
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8f 83       	std	Y+7, r24	; 0x07
    238c:	98 87       	std	Y+8, r25	; 0x08
    238e:	a9 87       	std	Y+9, r26	; 0x09
    2390:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	2c f4       	brge	.+10     	; 0x23b4 <LCD_displayCharacter+0x354>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	4c f5       	brge	.+82     	; 0x241e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <LCD_displayCharacter+0x3b4>
    23f6:	88 ec       	ldi	r24, 0xC8	; 200
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	9c 81       	ldd	r25, Y+4	; 0x04
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <LCD_displayCharacter+0x3a2>
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f7       	brne	.-38     	; 0x23f6 <LCD_displayCharacter+0x396>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241e:	6f 81       	ldd	r22, Y+7	; 0x07
    2420:	78 85       	ldd	r23, Y+8	; 0x08
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD_displayCharacter+0x3de>
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2446:	e9 96       	adiw	r28, 0x39	; 57
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <LCD_displayString+0x6>
    245e:	0f 92       	push	r0
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
    2464:	9b 83       	std	Y+3, r25	; 0x03
    2466:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2468:	19 82       	std	Y+1, r1	; 0x01
    246a:	0e c0       	rjmp	.+28     	; 0x2488 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	9b 81       	ldd	r25, Y+3	; 0x03
    2476:	fc 01       	movw	r30, r24
    2478:	e2 0f       	add	r30, r18
    247a:	f3 1f       	adc	r31, r19
    247c:	80 81       	ld	r24, Z
    247e:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_displayCharacter>
		i++;
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	8f 5f       	subi	r24, 0xFF	; 255
    2486:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	9b 81       	ldd	r25, Y+3	; 0x03
    2492:	fc 01       	movw	r30, r24
    2494:	e2 0f       	add	r30, r18
    2496:	f3 1f       	adc	r31, r19
    2498:	80 81       	ld	r24, Z
    249a:	88 23       	and	r24, r24
    249c:	39 f7       	brne	.-50     	; 0x246c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <LCD_goToRowColumn+0x6>
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <LCD_goToRowColumn+0x8>
    24b2:	0f 92       	push	r0
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	8a 83       	std	Y+2, r24	; 0x02
    24ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	3d 83       	std	Y+5, r19	; 0x05
    24c4:	2c 83       	std	Y+4, r18	; 0x04
    24c6:	8c 81       	ldd	r24, Y+4	; 0x04
    24c8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ca:	81 30       	cpi	r24, 0x01	; 1
    24cc:	91 05       	cpc	r25, r1
    24ce:	c1 f0       	breq	.+48     	; 0x2500 <LCD_goToRowColumn+0x56>
    24d0:	2c 81       	ldd	r18, Y+4	; 0x04
    24d2:	3d 81       	ldd	r19, Y+5	; 0x05
    24d4:	22 30       	cpi	r18, 0x02	; 2
    24d6:	31 05       	cpc	r19, r1
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <LCD_goToRowColumn+0x3a>
    24da:	8c 81       	ldd	r24, Y+4	; 0x04
    24dc:	9d 81       	ldd	r25, Y+5	; 0x05
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	61 f0       	breq	.+24     	; 0x24fa <LCD_goToRowColumn+0x50>
    24e2:	19 c0       	rjmp	.+50     	; 0x2516 <LCD_goToRowColumn+0x6c>
    24e4:	2c 81       	ldd	r18, Y+4	; 0x04
    24e6:	3d 81       	ldd	r19, Y+5	; 0x05
    24e8:	22 30       	cpi	r18, 0x02	; 2
    24ea:	31 05       	cpc	r19, r1
    24ec:	69 f0       	breq	.+26     	; 0x2508 <LCD_goToRowColumn+0x5e>
    24ee:	8c 81       	ldd	r24, Y+4	; 0x04
    24f0:	9d 81       	ldd	r25, Y+5	; 0x05
    24f2:	83 30       	cpi	r24, 0x03	; 3
    24f4:	91 05       	cpc	r25, r1
    24f6:	61 f0       	breq	.+24     	; 0x2510 <LCD_goToRowColumn+0x66>
    24f8:	0e c0       	rjmp	.+28     	; 0x2516 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	89 83       	std	Y+1, r24	; 0x01
    24fe:	0b c0       	rjmp	.+22     	; 0x2516 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	80 5c       	subi	r24, 0xC0	; 192
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	07 c0       	rjmp	.+14     	; 0x2516 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	80 5f       	subi	r24, 0xF0	; 240
    250c:	89 83       	std	Y+1, r24	; 0x01
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	80 5b       	subi	r24, 0xB0	; 176
    2514:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	80 68       	ori	r24, 0x80	; 128
    251a:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	00 d0       	rcall	.+0      	; 0x2534 <LCD_displayStringRowColumn+0x6>
    2534:	00 d0       	rcall	.+0      	; 0x2536 <LCD_displayStringRowColumn+0x8>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	6a 83       	std	Y+2, r22	; 0x02
    253e:	5c 83       	std	Y+4, r21	; 0x04
    2540:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	6a 81       	ldd	r22, Y+2	; 0x02
    2546:	0e 94 55 12 	call	0x24aa	; 0x24aa <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	9c 81       	ldd	r25, Y+4	; 0x04
    254e:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_displayString>
}
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	62 97       	sbiw	r28, 0x12	; 18
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	9a 8b       	std	Y+18, r25	; 0x12
    2576:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2578:	89 89       	ldd	r24, Y+17	; 0x11
    257a:	9a 89       	ldd	r25, Y+18	; 0x12
    257c:	9e 01       	movw	r18, r28
    257e:	2f 5f       	subi	r18, 0xFF	; 255
    2580:	3f 4f       	sbci	r19, 0xFF	; 255
    2582:	b9 01       	movw	r22, r18
    2584:	4a e0       	ldi	r20, 0x0A	; 10
    2586:	50 e0       	ldi	r21, 0x00	; 0
    2588:	0e 94 97 18 	call	0x312e	; 0x312e <itoa>
   LCD_displayString(buff);
    258c:	ce 01       	movw	r24, r28
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	0e 94 2c 12 	call	0x2458	; 0x2458 <LCD_displayString>
}
    2594:	62 96       	adiw	r28, 0x12	; 18
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <LED_init>:
 *******************************************************************************/

#include "led.h"

void LED_init(uint8 LED)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	0f 92       	push	r0
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LED_PORT_DIR, LED);
    25c6:	aa e3       	ldi	r26, 0x3A	; 58
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	ea e3       	ldi	r30, 0x3A	; 58
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	48 2f       	mov	r20, r24
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 2e       	mov	r0, r18
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <LED_init+0x2a>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <LED_init+0x26>
    25e8:	84 2b       	or	r24, r20
    25ea:	8c 93       	st	X, r24
}
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <LED_turnON>:

void LED_turnON(uint8 LED)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	0f 92       	push	r0
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(LED_PORT_OUT, LED);
    2600:	ab e3       	ldi	r26, 0x3B	; 59
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	eb e3       	ldi	r30, 0x3B	; 59
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	48 2f       	mov	r20, r24
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	02 2e       	mov	r0, r18
    2618:	02 c0       	rjmp	.+4      	; 0x261e <LED_turnON+0x2a>
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	0a 94       	dec	r0
    2620:	e2 f7       	brpl	.-8      	; 0x261a <LED_turnON+0x26>
    2622:	84 2b       	or	r24, r20
    2624:	8c 93       	st	X, r24
}
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <LED_turnOFF>:

void LED_turnOFF(uint8 LED)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(LED_PORT_OUT, LED);
    263a:	ab e3       	ldi	r26, 0x3B	; 59
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	eb e3       	ldi	r30, 0x3B	; 59
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	48 2f       	mov	r20, r24
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	02 2e       	mov	r0, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <LED_turnOFF+0x2a>
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	0a 94       	dec	r0
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <LED_turnOFF+0x26>
    265c:	80 95       	com	r24
    265e:	84 23       	and	r24, r20
    2660:	8c 93       	st	X, r24

}
    2662:	0f 90       	pop	r0
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <main>:
#include "control_unit_programs.h"



int main ()
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
	/*Enable global interrupts in MC. */
	SREG  |= (1<<7);
    2672:	af e5       	ldi	r26, 0x5F	; 95
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	ef e5       	ldi	r30, 0x5F	; 95
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	80 68       	ori	r24, 0x80	; 128
    267e:	8c 93       	st	X, r24

	startupProgram();
    2680:	0e 94 10 06 	call	0xc20	; 0xc20 <startupProgram>

	while (1)
	{
		EEPROM_readByte(PROGRAM_ADDRESS,&flagProgram);
    2684:	20 e8       	ldi	r18, 0x80	; 128
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	80 e5       	ldi	r24, 0x50	; 80
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	b9 01       	movw	r22, r18
    268e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <EEPROM_readByte>
		if (flagProgram == FIRST_PROGRAM)
    2692:	80 91 80 00 	lds	r24, 0x0080
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	19 f4       	brne	.+6      	; 0x26a0 <main+0x36>
		{
			firstProgram();
    269a:	0e 94 dd 06 	call	0xdba	; 0xdba <firstProgram>
    269e:	f2 cf       	rjmp	.-28     	; 0x2684 <main+0x1a>
		}
		else if (flagProgram == SECOND_PROGRAM)
    26a0:	80 91 80 00 	lds	r24, 0x0080
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	71 f7       	brne	.-36     	; 0x2684 <main+0x1a>
		{
			defaultProgram();
    26a8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <defaultProgram>
    26ac:	eb cf       	rjmp	.-42     	; 0x2684 <main+0x1a>

000026ae <MOTOR_init>:
static void MOTOR_setModeClockWise(uint8 a_IN1, uint8 a_IN2);
static void MOTOR_setModeAntiClockWise(uint8 a_IN1, uint8 a_IN2);


void MOTOR_init(void)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	MOTOR_PORT_DIR |= (1<<motor.m_IN1)| (1<<motor.m_IN2) | (1<<motor.m_EN) ;
    26b6:	a7 e3       	ldi	r26, 0x37	; 55
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e7 e3       	ldi	r30, 0x37	; 55
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	58 2f       	mov	r21, r24
    26c2:	80 91 76 00 	lds	r24, 0x0076
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <MOTOR_init+0x26>
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	2a 95       	dec	r18
    26d6:	e2 f7       	brpl	.-8      	; 0x26d0 <MOTOR_init+0x22>
    26d8:	48 2f       	mov	r20, r24
    26da:	80 91 77 00 	lds	r24, 0x0077
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <MOTOR_init+0x3e>
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	2a 95       	dec	r18
    26ee:	e2 f7       	brpl	.-8      	; 0x26e8 <MOTOR_init+0x3a>
    26f0:	48 2b       	or	r20, r24
    26f2:	80 91 78 00 	lds	r24, 0x0078
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	02 2e       	mov	r0, r18
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <MOTOR_init+0x58>
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	0a 94       	dec	r0
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <MOTOR_init+0x54>
    270a:	84 2b       	or	r24, r20
    270c:	85 2b       	or	r24, r21
    270e:	8c 93       	st	X, r24
}
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <MOTOR_Rotate>:

void MOTOR_Rotate(uint8 mode)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	89 83       	std	Y+1, r24	; 0x01


	if (mode == CLOCKWISE)
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	41 f4       	brne	.+16     	; 0x2738 <MOTOR_Rotate+0x22>
	{
		MOTOR_setModeClockWise(motor.m_IN1,motor.m_IN2);
    2728:	80 91 76 00 	lds	r24, 0x0076
    272c:	90 91 77 00 	lds	r25, 0x0077
    2730:	69 2f       	mov	r22, r25
    2732:	0e 94 aa 13 	call	0x2754	; 0x2754 <MOTOR_setModeClockWise>
    2736:	07 c0       	rjmp	.+14     	; 0x2746 <MOTOR_Rotate+0x30>
	}
	else //(mode == ANTICLOCKWISE)
	{
		MOTOR_setModeAntiClockWise(motor.m_IN1,motor.m_IN2);
    2738:	80 91 76 00 	lds	r24, 0x0076
    273c:	90 91 77 00 	lds	r25, 0x0077
    2740:	69 2f       	mov	r22, r25
    2742:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <MOTOR_setModeAntiClockWise>
	}
	Timer0_PWM_Init(128); //generate duty cycle (adc_value/1023)% to get half motor speed
    2746:	80 e8       	ldi	r24, 0x80	; 128
    2748:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <Timer0_PWM_Init>

}
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <MOTOR_setModeClockWise>:

static void MOTOR_setModeClockWise(uint8 a_IN1, uint8 a_IN2)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	00 d0       	rcall	.+0      	; 0x275a <MOTOR_setModeClockWise+0x6>
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	89 83       	std	Y+1, r24	; 0x01
    2760:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT  (MOTOR_PORT_OUT,a_IN1);
    2762:	a8 e3       	ldi	r26, 0x38	; 56
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e8 e3       	ldi	r30, 0x38	; 56
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	48 2f       	mov	r20, r24
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	02 c0       	rjmp	.+4      	; 0x277e <MOTOR_setModeClockWise+0x2a>
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	2a 95       	dec	r18
    2780:	e2 f7       	brpl	.-8      	; 0x277a <MOTOR_setModeClockWise+0x26>
    2782:	84 2b       	or	r24, r20
    2784:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT_OUT,a_IN2);
    2786:	a8 e3       	ldi	r26, 0x38	; 56
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e8 e3       	ldi	r30, 0x38	; 56
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	48 2f       	mov	r20, r24
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	02 2e       	mov	r0, r18
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <MOTOR_setModeClockWise+0x50>
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	0a 94       	dec	r0
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <MOTOR_setModeClockWise+0x4c>
    27a8:	80 95       	com	r24
    27aa:	84 23       	and	r24, r20
    27ac:	8c 93       	st	X, r24
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <MOTOR_setModeAntiClockWise>:

static void MOTOR_setModeAntiClockWise(uint8 a_IN1, uint8 a_IN2)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <MOTOR_setModeAntiClockWise+0x6>
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT  (MOTOR_PORT_OUT,a_IN2);
    27c6:	a8 e3       	ldi	r26, 0x38	; 56
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e8 e3       	ldi	r30, 0x38	; 56
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	48 2f       	mov	r20, r24
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <MOTOR_setModeAntiClockWise+0x2a>
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	2a 95       	dec	r18
    27e4:	e2 f7       	brpl	.-8      	; 0x27de <MOTOR_setModeAntiClockWise+0x26>
    27e6:	84 2b       	or	r24, r20
    27e8:	8c 93       	st	X, r24
	CLEAR_BIT(MOTOR_PORT_OUT,a_IN1);
    27ea:	a8 e3       	ldi	r26, 0x38	; 56
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e8 e3       	ldi	r30, 0x38	; 56
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	48 2f       	mov	r20, r24
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	02 2e       	mov	r0, r18
    2802:	02 c0       	rjmp	.+4      	; 0x2808 <MOTOR_setModeAntiClockWise+0x50>
    2804:	88 0f       	add	r24, r24
    2806:	99 1f       	adc	r25, r25
    2808:	0a 94       	dec	r0
    280a:	e2 f7       	brpl	.-8      	; 0x2804 <MOTOR_setModeAntiClockWise+0x4c>
    280c:	80 95       	com	r24
    280e:	84 23       	and	r24, r20
    2810:	8c 93       	st	X, r24
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <MOTOR_Stop>:



void MOTOR_Stop(void)
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
	TIMER0_PWM_deInit();
    2824:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <TIMER0_PWM_deInit>
}
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	08 95       	ret

0000282e <__vector_9>:

/**********************************************************
 *                          ISRs                          *
 **********************************************************/
ISR(TIMER0_OVF_vect)
{
    282e:	1f 92       	push	r1
    2830:	0f 92       	push	r0
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	0f 92       	push	r0
    2836:	11 24       	eor	r1, r1
    2838:	2f 93       	push	r18
    283a:	3f 93       	push	r19
    283c:	4f 93       	push	r20
    283e:	5f 93       	push	r21
    2840:	6f 93       	push	r22
    2842:	7f 93       	push	r23
    2844:	8f 93       	push	r24
    2846:	9f 93       	push	r25
    2848:	af 93       	push	r26
    284a:	bf 93       	push	r27
    284c:	ef 93       	push	r30
    284e:	ff 93       	push	r31
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER0] != NULL_PTR)
    2858:	80 91 86 00 	lds	r24, 0x0086
    285c:	90 91 87 00 	lds	r25, 0x0087
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	29 f0       	breq	.+10     	; 0x286e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER0])();
    2864:	e0 91 86 00 	lds	r30, 0x0086
    2868:	f0 91 87 00 	lds	r31, 0x0087
    286c:	09 95       	icall
	}
}
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	ff 91       	pop	r31
    2874:	ef 91       	pop	r30
    2876:	bf 91       	pop	r27
    2878:	af 91       	pop	r26
    287a:	9f 91       	pop	r25
    287c:	8f 91       	pop	r24
    287e:	7f 91       	pop	r23
    2880:	6f 91       	pop	r22
    2882:	5f 91       	pop	r21
    2884:	4f 91       	pop	r20
    2886:	3f 91       	pop	r19
    2888:	2f 91       	pop	r18
    288a:	0f 90       	pop	r0
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	0f 90       	pop	r0
    2890:	1f 90       	pop	r1
    2892:	18 95       	reti

00002894 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2894:	1f 92       	push	r1
    2896:	0f 92       	push	r0
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	0f 92       	push	r0
    289c:	11 24       	eor	r1, r1
    289e:	2f 93       	push	r18
    28a0:	3f 93       	push	r19
    28a2:	4f 93       	push	r20
    28a4:	5f 93       	push	r21
    28a6:	6f 93       	push	r22
    28a8:	7f 93       	push	r23
    28aa:	8f 93       	push	r24
    28ac:	9f 93       	push	r25
    28ae:	af 93       	push	r26
    28b0:	bf 93       	push	r27
    28b2:	ef 93       	push	r30
    28b4:	ff 93       	push	r31
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER0] != NULL_PTR)
    28be:	80 91 86 00 	lds	r24, 0x0086
    28c2:	90 91 87 00 	lds	r25, 0x0087
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	29 f0       	breq	.+10     	; 0x28d4 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER0])();
    28ca:	e0 91 86 00 	lds	r30, 0x0086
    28ce:	f0 91 87 00 	lds	r31, 0x0087
    28d2:	09 95       	icall
	}
}
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	ff 91       	pop	r31
    28da:	ef 91       	pop	r30
    28dc:	bf 91       	pop	r27
    28de:	af 91       	pop	r26
    28e0:	9f 91       	pop	r25
    28e2:	8f 91       	pop	r24
    28e4:	7f 91       	pop	r23
    28e6:	6f 91       	pop	r22
    28e8:	5f 91       	pop	r21
    28ea:	4f 91       	pop	r20
    28ec:	3f 91       	pop	r19
    28ee:	2f 91       	pop	r18
    28f0:	0f 90       	pop	r0
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	0f 90       	pop	r0
    28f6:	1f 90       	pop	r1
    28f8:	18 95       	reti

000028fa <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    28fa:	1f 92       	push	r1
    28fc:	0f 92       	push	r0
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	0f 92       	push	r0
    2902:	11 24       	eor	r1, r1
    2904:	2f 93       	push	r18
    2906:	3f 93       	push	r19
    2908:	4f 93       	push	r20
    290a:	5f 93       	push	r21
    290c:	6f 93       	push	r22
    290e:	7f 93       	push	r23
    2910:	8f 93       	push	r24
    2912:	9f 93       	push	r25
    2914:	af 93       	push	r26
    2916:	bf 93       	push	r27
    2918:	ef 93       	push	r30
    291a:	ff 93       	push	r31
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER1] != NULL_PTR)
    2924:	80 91 88 00 	lds	r24, 0x0088
    2928:	90 91 89 00 	lds	r25, 0x0089
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	29 f0       	breq	.+10     	; 0x293a <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER1])();
    2930:	e0 91 88 00 	lds	r30, 0x0088
    2934:	f0 91 89 00 	lds	r31, 0x0089
    2938:	09 95       	icall
	}
}
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	ff 91       	pop	r31
    2940:	ef 91       	pop	r30
    2942:	bf 91       	pop	r27
    2944:	af 91       	pop	r26
    2946:	9f 91       	pop	r25
    2948:	8f 91       	pop	r24
    294a:	7f 91       	pop	r23
    294c:	6f 91       	pop	r22
    294e:	5f 91       	pop	r21
    2950:	4f 91       	pop	r20
    2952:	3f 91       	pop	r19
    2954:	2f 91       	pop	r18
    2956:	0f 90       	pop	r0
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	0f 90       	pop	r0
    295c:	1f 90       	pop	r1
    295e:	18 95       	reti

00002960 <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    2960:	1f 92       	push	r1
    2962:	0f 92       	push	r0
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	0f 92       	push	r0
    2968:	11 24       	eor	r1, r1
    296a:	2f 93       	push	r18
    296c:	3f 93       	push	r19
    296e:	4f 93       	push	r20
    2970:	5f 93       	push	r21
    2972:	6f 93       	push	r22
    2974:	7f 93       	push	r23
    2976:	8f 93       	push	r24
    2978:	9f 93       	push	r25
    297a:	af 93       	push	r26
    297c:	bf 93       	push	r27
    297e:	ef 93       	push	r30
    2980:	ff 93       	push	r31
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER1] != NULL_PTR)
    298a:	80 91 88 00 	lds	r24, 0x0088
    298e:	90 91 89 00 	lds	r25, 0x0089
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	29 f0       	breq	.+10     	; 0x29a0 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER1])();
    2996:	e0 91 88 00 	lds	r30, 0x0088
    299a:	f0 91 89 00 	lds	r31, 0x0089
    299e:	09 95       	icall
	}
}
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	ff 91       	pop	r31
    29a6:	ef 91       	pop	r30
    29a8:	bf 91       	pop	r27
    29aa:	af 91       	pop	r26
    29ac:	9f 91       	pop	r25
    29ae:	8f 91       	pop	r24
    29b0:	7f 91       	pop	r23
    29b2:	6f 91       	pop	r22
    29b4:	5f 91       	pop	r21
    29b6:	4f 91       	pop	r20
    29b8:	3f 91       	pop	r19
    29ba:	2f 91       	pop	r18
    29bc:	0f 90       	pop	r0
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	0f 90       	pop	r0
    29c2:	1f 90       	pop	r1
    29c4:	18 95       	reti

000029c6 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    29c6:	1f 92       	push	r1
    29c8:	0f 92       	push	r0
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	0f 92       	push	r0
    29ce:	11 24       	eor	r1, r1
    29d0:	2f 93       	push	r18
    29d2:	3f 93       	push	r19
    29d4:	4f 93       	push	r20
    29d6:	5f 93       	push	r21
    29d8:	6f 93       	push	r22
    29da:	7f 93       	push	r23
    29dc:	8f 93       	push	r24
    29de:	9f 93       	push	r25
    29e0:	af 93       	push	r26
    29e2:	bf 93       	push	r27
    29e4:	ef 93       	push	r30
    29e6:	ff 93       	push	r31
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER2] != NULL_PTR)
    29f0:	80 91 8a 00 	lds	r24, 0x008A
    29f4:	90 91 8b 00 	lds	r25, 0x008B
    29f8:	00 97       	sbiw	r24, 0x00	; 0
    29fa:	29 f0       	breq	.+10     	; 0x2a06 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER2])();
    29fc:	e0 91 8a 00 	lds	r30, 0x008A
    2a00:	f0 91 8b 00 	lds	r31, 0x008B
    2a04:	09 95       	icall
	}
}
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	ff 91       	pop	r31
    2a0c:	ef 91       	pop	r30
    2a0e:	bf 91       	pop	r27
    2a10:	af 91       	pop	r26
    2a12:	9f 91       	pop	r25
    2a14:	8f 91       	pop	r24
    2a16:	7f 91       	pop	r23
    2a18:	6f 91       	pop	r22
    2a1a:	5f 91       	pop	r21
    2a1c:	4f 91       	pop	r20
    2a1e:	3f 91       	pop	r19
    2a20:	2f 91       	pop	r18
    2a22:	0f 90       	pop	r0
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	0f 90       	pop	r0
    2a28:	1f 90       	pop	r1
    2a2a:	18 95       	reti

00002a2c <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    2a2c:	1f 92       	push	r1
    2a2e:	0f 92       	push	r0
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	0f 92       	push	r0
    2a34:	11 24       	eor	r1, r1
    2a36:	2f 93       	push	r18
    2a38:	3f 93       	push	r19
    2a3a:	4f 93       	push	r20
    2a3c:	5f 93       	push	r21
    2a3e:	6f 93       	push	r22
    2a40:	7f 93       	push	r23
    2a42:	8f 93       	push	r24
    2a44:	9f 93       	push	r25
    2a46:	af 93       	push	r26
    2a48:	bf 93       	push	r27
    2a4a:	ef 93       	push	r30
    2a4c:	ff 93       	push	r31
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr[TIMER2] != NULL_PTR)
    2a56:	80 91 8a 00 	lds	r24, 0x008A
    2a5a:	90 91 8b 00 	lds	r25, 0x008B
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	29 f0       	breq	.+10     	; 0x2a6c <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr[TIMER2])();
    2a62:	e0 91 8a 00 	lds	r30, 0x008A
    2a66:	f0 91 8b 00 	lds	r31, 0x008B
    2a6a:	09 95       	icall
	}
}
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	ff 91       	pop	r31
    2a72:	ef 91       	pop	r30
    2a74:	bf 91       	pop	r27
    2a76:	af 91       	pop	r26
    2a78:	9f 91       	pop	r25
    2a7a:	8f 91       	pop	r24
    2a7c:	7f 91       	pop	r23
    2a7e:	6f 91       	pop	r22
    2a80:	5f 91       	pop	r21
    2a82:	4f 91       	pop	r20
    2a84:	3f 91       	pop	r19
    2a86:	2f 91       	pop	r18
    2a88:	0f 90       	pop	r0
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	0f 90       	pop	r0
    2a8e:	1f 90       	pop	r1
    2a90:	18 95       	reti

00002a92 <TIMER_init>:

/*
 * Description: Function to initiate timers
 */
void TIMER_init(TIMER_Config * timerParam)
{
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <TIMER_init+0x6>
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
    2a9c:	9a 83       	std	Y+2, r25	; 0x02
    2a9e:	89 83       	std	Y+1, r24	; 0x01
	if (timerParam->number == TIMER0)
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	80 81       	ld	r24, Z
    2aa6:	88 23       	and	r24, r24
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <TIMER_init+0x1a>
    2aaa:	4b c0       	rjmp	.+150    	; 0x2b42 <TIMER_init+0xb0>
	{
		/*Configure Timer0 Control register
		 * 1. Non PWM mode FOC0=1
		 * 2. Timer Mode and clock is an input
		 */
		TCCR0 = (1<<FOC0) ;
    2aac:	e3 e5       	ldi	r30, 0x53	; 83
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 e8       	ldi	r24, 0x80	; 128
    2ab2:	80 83       	st	Z, r24
		/*Select clock prescaler for timer*/
		TCCR0 = (TCCR0 & 0xF8) | (timerParam->clock);
    2ab4:	a3 e5       	ldi	r26, 0x53	; 83
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e3 e5       	ldi	r30, 0x53	; 83
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	98 2f       	mov	r25, r24
    2ac0:	98 7f       	andi	r25, 0xF8	; 248
    2ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	89 2b       	or	r24, r25
    2aca:	8c 93       	st	X, r24

		/*Set inital value for the timer*/
		TCNT0 = timerParam->initVal ;
    2acc:	a2 e5       	ldi	r26, 0x52	; 82
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad4:	83 81       	ldd	r24, Z+3	; 0x03
    2ad6:	94 81       	ldd	r25, Z+4	; 0x04
    2ad8:	8c 93       	st	X, r24

		if (timerParam->mode == Normal_Mode)
    2ada:	e9 81       	ldd	r30, Y+1	; 0x01
    2adc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ade:	81 81       	ldd	r24, Z+1	; 0x01
    2ae0:	88 23       	and	r24, r24
    2ae2:	41 f4       	brne	.+16     	; 0x2af4 <TIMER_init+0x62>
		{
			/*Enable Timer0 Overflow Interrupt*/
			TIMSK |= (1<<TOIE0);
    2ae4:	a9 e5       	ldi	r26, 0x59	; 89
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e9 e5       	ldi	r30, 0x59	; 89
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	81 60       	ori	r24, 0x01	; 1
    2af0:	8c 93       	st	X, r24
    2af2:	d8 c0       	rjmp	.+432    	; 0x2ca4 <TIMER_init+0x212>
		}
		else if (timerParam->mode == Compare_Mode)
    2af4:	e9 81       	ldd	r30, Y+1	; 0x01
    2af6:	fa 81       	ldd	r31, Y+2	; 0x02
    2af8:	81 81       	ldd	r24, Z+1	; 0x01
    2afa:	82 30       	cpi	r24, 0x02	; 2
    2afc:	09 f0       	breq	.+2      	; 0x2b00 <TIMER_init+0x6e>
    2afe:	d2 c0       	rjmp	.+420    	; 0x2ca4 <TIMER_init+0x212>
		{
			/*select Compare mode for Timer0*/
			TCCR0 = (TCCR0 & 0xF7) | ((timerParam->mode)<<2);
    2b00:	a3 e5       	ldi	r26, 0x53	; 83
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e3 e5       	ldi	r30, 0x53	; 83
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	27 7f       	andi	r18, 0xF7	; 247
    2b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b10:	fa 81       	ldd	r31, Y+2	; 0x02
    2b12:	81 81       	ldd	r24, Z+1	; 0x01
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	82 2b       	or	r24, r18
    2b22:	8c 93       	st	X, r24
			/*Set the compare value for Timer0*/
			OCR0 = timerParam->compVal ;
    2b24:	ac e5       	ldi	r26, 0x5C	; 92
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2c:	85 81       	ldd	r24, Z+5	; 0x05
    2b2e:	96 81       	ldd	r25, Z+6	; 0x06
    2b30:	8c 93       	st	X, r24
			/*Enable Timer0 Compare Interrupt*/
			TIMSK |= (1<<OCIE0);
    2b32:	a9 e5       	ldi	r26, 0x59	; 89
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e9 e5       	ldi	r30, 0x59	; 89
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	82 60       	ori	r24, 0x02	; 2
    2b3e:	8c 93       	st	X, r24
    2b40:	b1 c0       	rjmp	.+354    	; 0x2ca4 <TIMER_init+0x212>
		}
	}
	else if (timerParam->number == TIMER1)
    2b42:	e9 81       	ldd	r30, Y+1	; 0x01
    2b44:	fa 81       	ldd	r31, Y+2	; 0x02
    2b46:	80 81       	ld	r24, Z
    2b48:	81 30       	cpi	r24, 0x01	; 1
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <TIMER_init+0xbc>
    2b4c:	5c c0       	rjmp	.+184    	; 0x2c06 <TIMER_init+0x174>
		/*Configure Timer1 Control register
		 * 1. Set Force Output Compare to avoid working with PWM mode
		 * FOC1A=1,FOC1B=1
		 * 2. Timer Mode and clock is an input
		 */
		TCCR1A |= (1<<FOC1A)| (1<<FOC1B);
    2b4e:	af e4       	ldi	r26, 0x4F	; 79
    2b50:	b0 e0       	ldi	r27, 0x00	; 0
    2b52:	ef e4       	ldi	r30, 0x4F	; 79
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z
    2b58:	8c 60       	ori	r24, 0x0C	; 12
    2b5a:	8c 93       	st	X, r24

		/*Select clock prescaler for Timer1*/
		TCCR1B |= (TCCR1B & 0xF8) | (timerParam->clock);
    2b5c:	ae e4       	ldi	r26, 0x4E	; 78
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	ee e4       	ldi	r30, 0x4E	; 78
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	28 2f       	mov	r18, r24
    2b68:	ee e4       	ldi	r30, 0x4E	; 78
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	98 2f       	mov	r25, r24
    2b70:	98 7f       	andi	r25, 0xF8	; 248
    2b72:	e9 81       	ldd	r30, Y+1	; 0x01
    2b74:	fa 81       	ldd	r31, Y+2	; 0x02
    2b76:	82 81       	ldd	r24, Z+2	; 0x02
    2b78:	89 2b       	or	r24, r25
    2b7a:	82 2b       	or	r24, r18
    2b7c:	8c 93       	st	X, r24

		/*Set initial value for the Timer1*/
		TCNT1 = timerParam->initVal ;
    2b7e:	ac e4       	ldi	r26, 0x4C	; 76
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e9 81       	ldd	r30, Y+1	; 0x01
    2b84:	fa 81       	ldd	r31, Y+2	; 0x02
    2b86:	83 81       	ldd	r24, Z+3	; 0x03
    2b88:	94 81       	ldd	r25, Z+4	; 0x04
    2b8a:	11 96       	adiw	r26, 0x01	; 1
    2b8c:	9c 93       	st	X, r25
    2b8e:	8e 93       	st	-X, r24

		if (timerParam->mode == Normal_Mode)
    2b90:	e9 81       	ldd	r30, Y+1	; 0x01
    2b92:	fa 81       	ldd	r31, Y+2	; 0x02
    2b94:	81 81       	ldd	r24, Z+1	; 0x01
    2b96:	88 23       	and	r24, r24
    2b98:	41 f4       	brne	.+16     	; 0x2baa <TIMER_init+0x118>
		{
			/*Enable Timer1 Overflow Interrupt*/
			TIMSK |= (1<<TOIE1);
    2b9a:	a9 e5       	ldi	r26, 0x59	; 89
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e9 e5       	ldi	r30, 0x59	; 89
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	84 60       	ori	r24, 0x04	; 4
    2ba6:	8c 93       	st	X, r24
    2ba8:	7d c0       	rjmp	.+250    	; 0x2ca4 <TIMER_init+0x212>
		}
		else if (timerParam->mode == Compare_Mode)
    2baa:	e9 81       	ldd	r30, Y+1	; 0x01
    2bac:	fa 81       	ldd	r31, Y+2	; 0x02
    2bae:	81 81       	ldd	r24, Z+1	; 0x01
    2bb0:	82 30       	cpi	r24, 0x02	; 2
    2bb2:	09 f0       	breq	.+2      	; 0x2bb6 <TIMER_init+0x124>
    2bb4:	77 c0       	rjmp	.+238    	; 0x2ca4 <TIMER_init+0x212>
		{
			/*select Compare mode for Timer1*/
			TCCR1B |= (TCCR1B & 0xF7) | ((timerParam->mode)<<2);
    2bb6:	ae e4       	ldi	r26, 0x4E	; 78
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	ee e4       	ldi	r30, 0x4E	; 78
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	38 2f       	mov	r19, r24
    2bc2:	ee e4       	ldi	r30, 0x4E	; 78
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	28 2f       	mov	r18, r24
    2bca:	27 7f       	andi	r18, 0xF7	; 247
    2bcc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bce:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd0:	81 81       	ldd	r24, Z+1	; 0x01
    2bd2:	88 2f       	mov	r24, r24
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	82 2b       	or	r24, r18
    2be0:	83 2b       	or	r24, r19
    2be2:	8c 93       	st	X, r24
			/*Set the compare value for timer1*/
			OCR1A = timerParam->compVal ;
    2be4:	aa e4       	ldi	r26, 0x4A	; 74
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bea:	fa 81       	ldd	r31, Y+2	; 0x02
    2bec:	85 81       	ldd	r24, Z+5	; 0x05
    2bee:	96 81       	ldd	r25, Z+6	; 0x06
    2bf0:	11 96       	adiw	r26, 0x01	; 1
    2bf2:	9c 93       	st	X, r25
    2bf4:	8e 93       	st	-X, r24
			/*Enable Timer1 Compare Interrupt*/
			TIMSK |= (1<<OCIE1A);
    2bf6:	a9 e5       	ldi	r26, 0x59	; 89
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e9 e5       	ldi	r30, 0x59	; 89
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	80 61       	ori	r24, 0x10	; 16
    2c02:	8c 93       	st	X, r24
    2c04:	4f c0       	rjmp	.+158    	; 0x2ca4 <TIMER_init+0x212>
		}
	}
	else if (timerParam->number == TIMER2)
    2c06:	e9 81       	ldd	r30, Y+1	; 0x01
    2c08:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0a:	80 81       	ld	r24, Z
    2c0c:	82 30       	cpi	r24, 0x02	; 2
    2c0e:	09 f0       	breq	.+2      	; 0x2c12 <TIMER_init+0x180>
    2c10:	49 c0       	rjmp	.+146    	; 0x2ca4 <TIMER_init+0x212>
	{
		/*Configure Timer0 Control register
		 * 1. Non PWM mode FOC0=1
		 * 2. Timer Mode and clock is an input
		 */
		TCCR2 = (1<<FOC2) ;
    2c12:	e5 e4       	ldi	r30, 0x45	; 69
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 e8       	ldi	r24, 0x80	; 128
    2c18:	80 83       	st	Z, r24

		/*Select clock prescaler for Timer2*/
		TCCR2 = (TCCR2 & 0xF8) | (timerParam->clock);
    2c1a:	a5 e4       	ldi	r26, 0x45	; 69
    2c1c:	b0 e0       	ldi	r27, 0x00	; 0
    2c1e:	e5 e4       	ldi	r30, 0x45	; 69
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	98 2f       	mov	r25, r24
    2c26:	98 7f       	andi	r25, 0xF8	; 248
    2c28:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2c:	82 81       	ldd	r24, Z+2	; 0x02
    2c2e:	89 2b       	or	r24, r25
    2c30:	8c 93       	st	X, r24

		/*Set inital value for the Timer2*/
		TCNT2 = timerParam->initVal ;
    2c32:	a4 e4       	ldi	r26, 0x44	; 68
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e9 81       	ldd	r30, Y+1	; 0x01
    2c38:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3a:	83 81       	ldd	r24, Z+3	; 0x03
    2c3c:	94 81       	ldd	r25, Z+4	; 0x04
    2c3e:	8c 93       	st	X, r24

		if (timerParam->mode == Normal_Mode)
    2c40:	e9 81       	ldd	r30, Y+1	; 0x01
    2c42:	fa 81       	ldd	r31, Y+2	; 0x02
    2c44:	81 81       	ldd	r24, Z+1	; 0x01
    2c46:	88 23       	and	r24, r24
    2c48:	41 f4       	brne	.+16     	; 0x2c5a <TIMER_init+0x1c8>
		{
			/*Enable Timer2 Overflow Interrupt*/
			TIMSK |= (1<<TOIE2);
    2c4a:	a9 e5       	ldi	r26, 0x59	; 89
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e9 e5       	ldi	r30, 0x59	; 89
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	80 64       	ori	r24, 0x40	; 64
    2c56:	8c 93       	st	X, r24
    2c58:	25 c0       	rjmp	.+74     	; 0x2ca4 <TIMER_init+0x212>
		}
		else if (timerParam->mode == Compare_Mode)
    2c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5e:	81 81       	ldd	r24, Z+1	; 0x01
    2c60:	82 30       	cpi	r24, 0x02	; 2
    2c62:	01 f5       	brne	.+64     	; 0x2ca4 <TIMER_init+0x212>
		{
			/*select Compare mode for Timer2*/
			TCCR2 = (TCCR2 & 0xF7) | ((timerParam->mode)<<2);
    2c64:	a5 e4       	ldi	r26, 0x45	; 69
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e5 e4       	ldi	r30, 0x45	; 69
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	28 2f       	mov	r18, r24
    2c70:	27 7f       	andi	r18, 0xF7	; 247
    2c72:	e9 81       	ldd	r30, Y+1	; 0x01
    2c74:	fa 81       	ldd	r31, Y+2	; 0x02
    2c76:	81 81       	ldd	r24, Z+1	; 0x01
    2c78:	88 2f       	mov	r24, r24
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	82 2b       	or	r24, r18
    2c86:	8c 93       	st	X, r24
			/*Set the compare value for timer2*/
			OCR2 = timerParam->compVal ;
    2c88:	a3 e4       	ldi	r26, 0x43	; 67
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c90:	85 81       	ldd	r24, Z+5	; 0x05
    2c92:	96 81       	ldd	r25, Z+6	; 0x06
    2c94:	8c 93       	st	X, r24
			/*Enable Timer2 Compare Interrupt*/
			TIMSK |= (1<<OCIE2);
    2c96:	a9 e5       	ldi	r26, 0x59	; 89
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e9 e5       	ldi	r30, 0x59	; 89
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	80 68       	ori	r24, 0x80	; 128
    2ca2:	8c 93       	st	X, r24
		}
	}
}
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <TIMER_setCallBack>:

/*
 * Description: Function to set call back address
 */
void TIMER_setCallBack(const Timer_Number a_number,void(*a_ptrFunc)(void))
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <TIMER_setCallBack+0x6>
    2cb4:	0f 92       	push	r0
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	7b 83       	std	Y+3, r23	; 0x03
    2cbe:	6a 83       	std	Y+2, r22	; 0x02
	/*Put the call back fucntion address of the appliaction in the call back global pointer*/
	g_callBackPtr[a_number] = a_ptrFunc ;
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	88 2f       	mov	r24, r24
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	2a 81       	ldd	r18, Y+2	; 0x02
    2cc8:	3b 81       	ldd	r19, Y+3	; 0x03
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	fc 01       	movw	r30, r24
    2cd0:	ea 57       	subi	r30, 0x7A	; 122
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	31 83       	std	Z+1, r19	; 0x01
    2cd6:	20 83       	st	Z, r18
}
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <TIMER_clearTimerValue>:

/*
 * Description: Function to clear the value of the timer
 */
void TIMER_clearTimerValue(Timer_Number number)
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	0f 92       	push	r0
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	89 83       	std	Y+1, r24	; 0x01
	if (number == TIMER0)
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	88 23       	and	r24, r24
    2cf4:	21 f4       	brne	.+8      	; 0x2cfe <TIMER_clearTimerValue+0x1a>
	{
		TCNT0 = 0 ;
    2cf6:	e2 e5       	ldi	r30, 0x52	; 82
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	10 82       	st	Z, r1
    2cfc:	0e c0       	rjmp	.+28     	; 0x2d1a <TIMER_clearTimerValue+0x36>
	}
	else if (number == TIMER1)
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	81 30       	cpi	r24, 0x01	; 1
    2d02:	29 f4       	brne	.+10     	; 0x2d0e <TIMER_clearTimerValue+0x2a>
	{
		TCNT1 = 0 ;
    2d04:	ec e4       	ldi	r30, 0x4C	; 76
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	11 82       	std	Z+1, r1	; 0x01
    2d0a:	10 82       	st	Z, r1
    2d0c:	06 c0       	rjmp	.+12     	; 0x2d1a <TIMER_clearTimerValue+0x36>
	}
	else if (number == TIMER2)
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	82 30       	cpi	r24, 0x02	; 2
    2d12:	19 f4       	brne	.+6      	; 0x2d1a <TIMER_clearTimerValue+0x36>
	{
		TCNT2 = 0 ;
    2d14:	e4 e4       	ldi	r30, 0x44	; 68
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	10 82       	st	Z, r1
	}
}
    2d1a:	0f 90       	pop	r0
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <TIMER_getTimerValue>:

/*
 * Description: Function to get the current value of the timer
 */
uint16 TIMER_getTimerValue(Timer_Number number)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <TIMER_getTimerValue+0x6>
    2d28:	0f 92       	push	r0
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 timerVal = 0 ;
    2d30:	1a 82       	std	Y+2, r1	; 0x02
    2d32:	19 82       	std	Y+1, r1	; 0x01
	if (number == TIMER0)
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	88 23       	and	r24, r24
    2d38:	41 f4       	brne	.+16     	; 0x2d4a <TIMER_getTimerValue+0x28>
	{
		timerVal = TCNT0;
    2d3a:	e2 e5       	ldi	r30, 0x52	; 82
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	88 2f       	mov	r24, r24
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	89 83       	std	Y+1, r24	; 0x01
    2d48:	14 c0       	rjmp	.+40     	; 0x2d72 <TIMER_getTimerValue+0x50>
	}
	else if (number == TIMER1)
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	39 f4       	brne	.+14     	; 0x2d5e <TIMER_getTimerValue+0x3c>
	{
		timerVal = TCNT1 ;
    2d50:	ec e4       	ldi	r30, 0x4C	; 76
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	0a c0       	rjmp	.+20     	; 0x2d72 <TIMER_getTimerValue+0x50>
	}
	else if (number == TIMER2)
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	82 30       	cpi	r24, 0x02	; 2
    2d62:	39 f4       	brne	.+14     	; 0x2d72 <TIMER_getTimerValue+0x50>
	{
		timerVal = TCNT2;
    2d64:	e4 e4       	ldi	r30, 0x44	; 68
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	88 2f       	mov	r24, r24
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	89 83       	std	Y+1, r24	; 0x01
	}
	return timerVal ;
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	08 95       	ret

00002d82 <TIMER_deInit>:

/*
 * Description: Function to stop the timers*/

void TIMER_deInit (Timer_Number number)
{
    2d82:	df 93       	push	r29
    2d84:	cf 93       	push	r28
    2d86:	0f 92       	push	r0
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	89 83       	std	Y+1, r24	; 0x01
	if (number == TIMER0)
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	88 23       	and	r24, r24
    2d92:	89 f4       	brne	.+34     	; 0x2db6 <TIMER_deInit+0x34>
	{
		TCCR0 = 0 ;
    2d94:	e3 e5       	ldi	r30, 0x53	; 83
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	10 82       	st	Z, r1
		TCNT0 = 0 ;
    2d9a:	e2 e5       	ldi	r30, 0x52	; 82
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	10 82       	st	Z, r1
		OCR0  = 0 ;
    2da0:	ec e5       	ldi	r30, 0x5C	; 92
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	10 82       	st	Z, r1
		/*Disable interrupt for timer 0*/
		TIMSK &= ~(1<<TOIE0) & (~(1<<OCIE0));
    2da6:	a9 e5       	ldi	r26, 0x59	; 89
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	e9 e5       	ldi	r30, 0x59	; 89
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	8c 7f       	andi	r24, 0xFC	; 252
    2db2:	8c 93       	st	X, r24
    2db4:	2c c0       	rjmp	.+88     	; 0x2e0e <TIMER_deInit+0x8c>
	}
	else if (number == TIMER1)
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	b1 f4       	brne	.+44     	; 0x2de8 <TIMER_deInit+0x66>
	{
		TCCR1A = 0 ;
    2dbc:	ef e4       	ldi	r30, 0x4F	; 79
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	10 82       	st	Z, r1
		TCCR1B = 0 ;
    2dc2:	ee e4       	ldi	r30, 0x4E	; 78
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	10 82       	st	Z, r1
		TCNT1 = 0 ;
    2dc8:	ec e4       	ldi	r30, 0x4C	; 76
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	11 82       	std	Z+1, r1	; 0x01
    2dce:	10 82       	st	Z, r1
		OCR1A  = 0 ;
    2dd0:	ea e4       	ldi	r30, 0x4A	; 74
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	11 82       	std	Z+1, r1	; 0x01
    2dd6:	10 82       	st	Z, r1
		/*Disable interrupt for timer 1*/
		TIMSK &= ~(1<<OCIE1A) & (~(1<<TOIE1));
    2dd8:	a9 e5       	ldi	r26, 0x59	; 89
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	e9 e5       	ldi	r30, 0x59	; 89
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	8b 7e       	andi	r24, 0xEB	; 235
    2de4:	8c 93       	st	X, r24
    2de6:	13 c0       	rjmp	.+38     	; 0x2e0e <TIMER_deInit+0x8c>
	}
	else if (number == TIMER2)
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	82 30       	cpi	r24, 0x02	; 2
    2dec:	81 f4       	brne	.+32     	; 0x2e0e <TIMER_deInit+0x8c>
	{
		TCCR2 = 0 ;
    2dee:	e5 e4       	ldi	r30, 0x45	; 69
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	10 82       	st	Z, r1
		TCNT2 = 0 ;
    2df4:	e4 e4       	ldi	r30, 0x44	; 68
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	10 82       	st	Z, r1
		OCR2  = 0 ;
    2dfa:	e3 e4       	ldi	r30, 0x43	; 67
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	10 82       	st	Z, r1
		/*Disable interrupt for timer 2*/
		TIMSK &= ~(1<<TOIE2) & (~(1<<OCIE2));
    2e00:	a9 e5       	ldi	r26, 0x59	; 89
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e9 e5       	ldi	r30, 0x59	; 89
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	8f 73       	andi	r24, 0x3F	; 63
    2e0c:	8c 93       	st	X, r24
	}
}
    2e0e:	0f 90       	pop	r0
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <Timer0_PWM_Init>:

#include "timer_pwm.h"


void Timer0_PWM_Init(uint8 set_duty_cycle)
{
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	0f 92       	push	r0
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	89 83       	std	Y+1, r24	; 0x01
	/*Set Timer Initial value*/
	TCNT0 = 0;
    2e22:	e2 e5       	ldi	r30, 0x52	; 82
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	10 82       	st	Z, r1

	/* Set Compare Value*/
	OCR0  = set_duty_cycle;
    2e28:	ec e5       	ldi	r30, 0x5C	; 92
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	80 83       	st	Z, r24

	/*set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.*/
	DDRB  = DDRB | (1<<PB3);
    2e30:	a7 e3       	ldi	r26, 0x37	; 55
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	e7 e3       	ldi	r30, 0x37	; 55
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	88 60       	ori	r24, 0x08	; 8
    2e3c:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/64 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01)| (1<<CS00);
    2e3e:	e3 e5       	ldi	r30, 0x53	; 83
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	8b e6       	ldi	r24, 0x6B	; 107
    2e44:	80 83       	st	Z, r24
}
    2e46:	0f 90       	pop	r0
    2e48:	cf 91       	pop	r28
    2e4a:	df 91       	pop	r29
    2e4c:	08 95       	ret

00002e4e <TIMER0_PWM_deInit>:
void TIMER0_PWM_deInit()
{
    2e4e:	df 93       	push	r29
    2e50:	cf 93       	push	r28
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0 ;
    2e56:	e3 e5       	ldi	r30, 0x53	; 83
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	10 82       	st	Z, r1
	TCNT0 = 0 ;
    2e5c:	e2 e5       	ldi	r30, 0x52	; 82
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	10 82       	st	Z, r1
	OCR0 = 0 ;
    2e62:	ec e5       	ldi	r30, 0x5C	; 92
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	10 82       	st	Z, r1
}
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <UART_init>:

/**********************************************************
 *                   Function Definitions                 *
 **********************************************************/
void UART_init(UART * uartParam)
{
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <UART_init+0xa>
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	9a 83       	std	Y+2, r25	; 0x02
    2e7e:	89 83       	std	Y+1, r24	; 0x01
	/**********UCSRA Configuration:
	 * U2X = 1, Set U2X to reduce the divisor of the baud rate divider from 16 to 8*/
	UCSRA = (1<<U2X);
    2e80:	eb e2       	ldi	r30, 0x2B	; 43
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	82 e0       	ldi	r24, 0x02	; 2
    2e86:	80 83       	st	Z, r24
	 * TXEN  = 1, Writing this bit to one enables the USART Transmitter
	 * UCSZ2 = 0, Writing this bit to zero to use 8-data bit mode
	 * RXB8  = 0, Writing this bit to zero to use 8-data bit mode
	 * TXB8  = 0, Writing this bit to zero to use 8-data bit mode
	 ****************************************************************************/
	UCSRB |= (1<<RXEN) | (1<<TXEN) ;
    2e88:	aa e2       	ldi	r26, 0x2A	; 42
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	ea e2       	ldi	r30, 0x2A	; 42
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	88 61       	ori	r24, 0x18	; 24
    2e94:	8c 93       	st	X, r24
	/*************UCSRC Configuration:
	 * URSEL = 1, Writing this bit to one to write in the UCSRC
	 * UMSEL = 0, Writing this bit to zero to use Asynchronous mode
	 * UCPOL  = 0, Writing this bit to zero cause we use Asynchronous mode
	 ***************************************************************************/
	UCSRC |= (1<<URSEL);
    2e96:	a0 e4       	ldi	r26, 0x40	; 64
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e0 e4       	ldi	r30, 0x40	; 64
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	80 68       	ori	r24, 0x80	; 128
    2ea2:	8c 93       	st	X, r24

	/*Set bit stop settings if we use 2 stop bit mode*/
	if (uartParam->stopBit == 2)
    2ea4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea8:	84 81       	ldd	r24, Z+4	; 0x04
    2eaa:	82 30       	cpi	r24, 0x02	; 2
    2eac:	39 f4       	brne	.+14     	; 0x2ebc <UART_init+0x4e>
	{
		UCSRC |= (1<<USBS);
    2eae:	a0 e4       	ldi	r26, 0x40	; 64
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	e0 e4       	ldi	r30, 0x40	; 64
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	88 60       	ori	r24, 0x08	; 8
    2eba:	8c 93       	st	X, r24
	}
	/*Set parity mode*/
	UCSRC = (UCSRC & 0xCF) | (uartParam->paritySelect & 0x30);
    2ebc:	a0 e4       	ldi	r26, 0x40	; 64
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e0 e4       	ldi	r30, 0x40	; 64
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	98 2f       	mov	r25, r24
    2ec8:	9f 7c       	andi	r25, 0xCF	; 207
    2eca:	e9 81       	ldd	r30, Y+1	; 0x01
    2ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ece:	86 81       	ldd	r24, Z+6	; 0x06
    2ed0:	80 73       	andi	r24, 0x30	; 48
    2ed2:	89 2b       	or	r24, r25
    2ed4:	8c 93       	st	X, r24
	/*Set the character size Mode*/
	UCSRC = (UCSRC & 0xF9) | (uartParam->dataMode & 0x06);
    2ed6:	a0 e4       	ldi	r26, 0x40	; 64
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e0 e4       	ldi	r30, 0x40	; 64
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	98 2f       	mov	r25, r24
    2ee2:	99 7f       	andi	r25, 0xF9	; 249
    2ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee8:	85 81       	ldd	r24, Z+5	; 0x05
    2eea:	86 70       	andi	r24, 0x06	; 6
    2eec:	89 2b       	or	r24, r25
    2eee:	8c 93       	st	X, r24

	/****************************************************************************/
	/* First 8 bits from the BAUD_PRESCALER inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALER(uartParam->BAUDRATE)>>8;
    2ef0:	00 e4       	ldi	r16, 0x40	; 64
    2ef2:	10 e0       	ldi	r17, 0x00	; 0
    2ef4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef8:	80 81       	ld	r24, Z
    2efa:	91 81       	ldd	r25, Z+1	; 0x01
    2efc:	a2 81       	ldd	r26, Z+2	; 0x02
    2efe:	b3 81       	ldd	r27, Z+3	; 0x03
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	aa 1f       	adc	r26, r26
    2f06:	bb 1f       	adc	r27, r27
    2f08:	88 0f       	add	r24, r24
    2f0a:	99 1f       	adc	r25, r25
    2f0c:	aa 1f       	adc	r26, r26
    2f0e:	bb 1f       	adc	r27, r27
    2f10:	88 0f       	add	r24, r24
    2f12:	99 1f       	adc	r25, r25
    2f14:	aa 1f       	adc	r26, r26
    2f16:	bb 1f       	adc	r27, r27
    2f18:	9c 01       	movw	r18, r24
    2f1a:	ad 01       	movw	r20, r26
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	92 e1       	ldi	r25, 0x12	; 18
    2f20:	aa e7       	ldi	r26, 0x7A	; 122
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	bc 01       	movw	r22, r24
    2f26:	cd 01       	movw	r24, r26
    2f28:	0e 94 3e 18 	call	0x307c	; 0x307c <__udivmodsi4>
    2f2c:	da 01       	movw	r26, r20
    2f2e:	c9 01       	movw	r24, r18
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	a1 09       	sbc	r26, r1
    2f34:	b1 09       	sbc	r27, r1
    2f36:	89 2f       	mov	r24, r25
    2f38:	9a 2f       	mov	r25, r26
    2f3a:	ab 2f       	mov	r26, r27
    2f3c:	bb 27       	eor	r27, r27
    2f3e:	f8 01       	movw	r30, r16
    2f40:	80 83       	st	Z, r24
	UBRRL = BAUD_PRESCALER(uartParam->BAUDRATE);
    2f42:	09 e2       	ldi	r16, 0x29	; 41
    2f44:	10 e0       	ldi	r17, 0x00	; 0
    2f46:	e9 81       	ldd	r30, Y+1	; 0x01
    2f48:	fa 81       	ldd	r31, Y+2	; 0x02
    2f4a:	80 81       	ld	r24, Z
    2f4c:	91 81       	ldd	r25, Z+1	; 0x01
    2f4e:	a2 81       	ldd	r26, Z+2	; 0x02
    2f50:	b3 81       	ldd	r27, Z+3	; 0x03
    2f52:	88 0f       	add	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	aa 1f       	adc	r26, r26
    2f58:	bb 1f       	adc	r27, r27
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	aa 1f       	adc	r26, r26
    2f60:	bb 1f       	adc	r27, r27
    2f62:	88 0f       	add	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	aa 1f       	adc	r26, r26
    2f68:	bb 1f       	adc	r27, r27
    2f6a:	9c 01       	movw	r18, r24
    2f6c:	ad 01       	movw	r20, r26
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	92 e1       	ldi	r25, 0x12	; 18
    2f72:	aa e7       	ldi	r26, 0x7A	; 122
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 3e 18 	call	0x307c	; 0x307c <__udivmodsi4>
    2f7e:	da 01       	movw	r26, r20
    2f80:	c9 01       	movw	r24, r18
    2f82:	81 50       	subi	r24, 0x01	; 1
    2f84:	f8 01       	movw	r30, r16
    2f86:	80 83       	st	Z, r24

}
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	1f 91       	pop	r17
    2f92:	0f 91       	pop	r16
    2f94:	08 95       	ret

00002f96 <UART_sendByte>:

void UART_sendByte(uint8 a_data)
{
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	0f 92       	push	r0
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    2fa0:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set to one, the buffer is empty, and therefore ready to be written,
	 * so wait until is set and write the data into UDR register
	 */
	while (BIT_IS_CLEAR(UCSRA,UDRE));
    2fa2:	eb e2       	ldi	r30, 0x2B	; 43
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	88 2f       	mov	r24, r24
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	80 72       	andi	r24, 0x20	; 32
    2fae:	90 70       	andi	r25, 0x00	; 0
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	b9 f3       	breq	.-18     	; 0x2fa2 <UART_sendByte+0xc>
	UDR=a_data;
    2fb4:	ec e2       	ldi	r30, 0x2C	; 44
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = a_data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2fbc:	0f 90       	pop	r0
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
	/*RXC flag is set when when he receive a byte,and therefore ready to be read,
	 * so wait until is set and read the data from UDR register
	 */
	while (BIT_IS_CLEAR(UCSRA,RXC));
    2fcc:	eb e2       	ldi	r30, 0x2B	; 43
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	88 23       	and	r24, r24
    2fd4:	dc f7       	brge	.-10     	; 0x2fcc <UART_receiveByte+0x8>
	return UDR;
    2fd6:	ec e2       	ldi	r30, 0x2C	; 44
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
}
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <UART_sendString>:

void UART_sendString(const uint8 * Str)
{
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <UART_sendString+0x6>
    2fe8:	0f 92       	push	r0
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	9b 83       	std	Y+3, r25	; 0x03
    2ff0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0 ;
    2ff2:	19 82       	std	Y+1, r1	; 0x01
    2ff4:	0e c0       	rjmp	.+28     	; 0x3012 <UART_sendString+0x30>
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    3000:	fc 01       	movw	r30, r24
    3002:	e2 0f       	add	r30, r18
    3004:	f3 1f       	adc	r31, r19
    3006:	80 81       	ld	r24, Z
    3008:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <UART_sendByte>
		i++;
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	8f 5f       	subi	r24, 0xFF	; 255
    3010:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 * Str)
{
	uint8 i = 0 ;
	while (Str[i] != '\0')
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	8a 81       	ldd	r24, Y+2	; 0x02
    301a:	9b 81       	ldd	r25, Y+3	; 0x03
    301c:	fc 01       	movw	r30, r24
    301e:	e2 0f       	add	r30, r18
    3020:	f3 1f       	adc	r31, r19
    3022:	80 81       	ld	r24, Z
    3024:	88 23       	and	r24, r24
    3026:	39 f7       	brne	.-50     	; 0x2ff6 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <UART_receiveString>:

void UART_receiveString(uint8 * Str)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	00 d0       	rcall	.+0      	; 0x303a <UART_receiveString+0x6>
    303a:	cd b7       	in	r28, 0x3d	; 61
    303c:	de b7       	in	r29, 0x3e	; 62
    303e:	9a 83       	std	Y+2, r25	; 0x02
    3040:	89 83       	std	Y+1, r24	; 0x01
	*Str = UART_receiveByte();
    3042:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <UART_receiveByte>
    3046:	e9 81       	ldd	r30, Y+1	; 0x01
    3048:	fa 81       	ldd	r31, Y+2	; 0x02
    304a:	80 83       	st	Z, r24
    304c:	0a c0       	rjmp	.+20     	; 0x3062 <UART_receiveString+0x2e>
	while (*Str != '#')
	{
		Str++;
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	01 96       	adiw	r24, 0x01	; 1
    3054:	9a 83       	std	Y+2, r25	; 0x02
    3056:	89 83       	std	Y+1, r24	; 0x01
		*Str=UART_receiveByte();
    3058:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <UART_receiveByte>
    305c:	e9 81       	ldd	r30, Y+1	; 0x01
    305e:	fa 81       	ldd	r31, Y+2	; 0x02
    3060:	80 83       	st	Z, r24
}

void UART_receiveString(uint8 * Str)
{
	*Str = UART_receiveByte();
	while (*Str != '#')
    3062:	e9 81       	ldd	r30, Y+1	; 0x01
    3064:	fa 81       	ldd	r31, Y+2	; 0x02
    3066:	80 81       	ld	r24, Z
    3068:	83 32       	cpi	r24, 0x23	; 35
    306a:	89 f7       	brne	.-30     	; 0x304e <UART_receiveString+0x1a>
	{
		Str++;
		*Str=UART_receiveByte();
	}
	*Str = '\0';
    306c:	e9 81       	ldd	r30, Y+1	; 0x01
    306e:	fa 81       	ldd	r31, Y+2	; 0x02
    3070:	10 82       	st	Z, r1
}
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <__udivmodsi4>:
    307c:	a1 e2       	ldi	r26, 0x21	; 33
    307e:	1a 2e       	mov	r1, r26
    3080:	aa 1b       	sub	r26, r26
    3082:	bb 1b       	sub	r27, r27
    3084:	fd 01       	movw	r30, r26
    3086:	0d c0       	rjmp	.+26     	; 0x30a2 <__udivmodsi4_ep>

00003088 <__udivmodsi4_loop>:
    3088:	aa 1f       	adc	r26, r26
    308a:	bb 1f       	adc	r27, r27
    308c:	ee 1f       	adc	r30, r30
    308e:	ff 1f       	adc	r31, r31
    3090:	a2 17       	cp	r26, r18
    3092:	b3 07       	cpc	r27, r19
    3094:	e4 07       	cpc	r30, r20
    3096:	f5 07       	cpc	r31, r21
    3098:	20 f0       	brcs	.+8      	; 0x30a2 <__udivmodsi4_ep>
    309a:	a2 1b       	sub	r26, r18
    309c:	b3 0b       	sbc	r27, r19
    309e:	e4 0b       	sbc	r30, r20
    30a0:	f5 0b       	sbc	r31, r21

000030a2 <__udivmodsi4_ep>:
    30a2:	66 1f       	adc	r22, r22
    30a4:	77 1f       	adc	r23, r23
    30a6:	88 1f       	adc	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	1a 94       	dec	r1
    30ac:	69 f7       	brne	.-38     	; 0x3088 <__udivmodsi4_loop>
    30ae:	60 95       	com	r22
    30b0:	70 95       	com	r23
    30b2:	80 95       	com	r24
    30b4:	90 95       	com	r25
    30b6:	9b 01       	movw	r18, r22
    30b8:	ac 01       	movw	r20, r24
    30ba:	bd 01       	movw	r22, r26
    30bc:	cf 01       	movw	r24, r30
    30be:	08 95       	ret

000030c0 <__prologue_saves__>:
    30c0:	2f 92       	push	r2
    30c2:	3f 92       	push	r3
    30c4:	4f 92       	push	r4
    30c6:	5f 92       	push	r5
    30c8:	6f 92       	push	r6
    30ca:	7f 92       	push	r7
    30cc:	8f 92       	push	r8
    30ce:	9f 92       	push	r9
    30d0:	af 92       	push	r10
    30d2:	bf 92       	push	r11
    30d4:	cf 92       	push	r12
    30d6:	df 92       	push	r13
    30d8:	ef 92       	push	r14
    30da:	ff 92       	push	r15
    30dc:	0f 93       	push	r16
    30de:	1f 93       	push	r17
    30e0:	cf 93       	push	r28
    30e2:	df 93       	push	r29
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	ca 1b       	sub	r28, r26
    30ea:	db 0b       	sbc	r29, r27
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
    30f6:	09 94       	ijmp

000030f8 <__epilogue_restores__>:
    30f8:	2a 88       	ldd	r2, Y+18	; 0x12
    30fa:	39 88       	ldd	r3, Y+17	; 0x11
    30fc:	48 88       	ldd	r4, Y+16	; 0x10
    30fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3100:	6e 84       	ldd	r6, Y+14	; 0x0e
    3102:	7d 84       	ldd	r7, Y+13	; 0x0d
    3104:	8c 84       	ldd	r8, Y+12	; 0x0c
    3106:	9b 84       	ldd	r9, Y+11	; 0x0b
    3108:	aa 84       	ldd	r10, Y+10	; 0x0a
    310a:	b9 84       	ldd	r11, Y+9	; 0x09
    310c:	c8 84       	ldd	r12, Y+8	; 0x08
    310e:	df 80       	ldd	r13, Y+7	; 0x07
    3110:	ee 80       	ldd	r14, Y+6	; 0x06
    3112:	fd 80       	ldd	r15, Y+5	; 0x05
    3114:	0c 81       	ldd	r16, Y+4	; 0x04
    3116:	1b 81       	ldd	r17, Y+3	; 0x03
    3118:	aa 81       	ldd	r26, Y+2	; 0x02
    311a:	b9 81       	ldd	r27, Y+1	; 0x01
    311c:	ce 0f       	add	r28, r30
    311e:	d1 1d       	adc	r29, r1
    3120:	0f b6       	in	r0, 0x3f	; 63
    3122:	f8 94       	cli
    3124:	de bf       	out	0x3e, r29	; 62
    3126:	0f be       	out	0x3f, r0	; 63
    3128:	cd bf       	out	0x3d, r28	; 61
    312a:	ed 01       	movw	r28, r26
    312c:	08 95       	ret

0000312e <itoa>:
    312e:	fb 01       	movw	r30, r22
    3130:	9f 01       	movw	r18, r30
    3132:	e8 94       	clt
    3134:	42 30       	cpi	r20, 0x02	; 2
    3136:	c4 f0       	brlt	.+48     	; 0x3168 <itoa+0x3a>
    3138:	45 32       	cpi	r20, 0x25	; 37
    313a:	b4 f4       	brge	.+44     	; 0x3168 <itoa+0x3a>
    313c:	4a 30       	cpi	r20, 0x0A	; 10
    313e:	29 f4       	brne	.+10     	; 0x314a <itoa+0x1c>
    3140:	97 fb       	bst	r25, 7
    3142:	1e f4       	brtc	.+6      	; 0x314a <itoa+0x1c>
    3144:	90 95       	com	r25
    3146:	81 95       	neg	r24
    3148:	9f 4f       	sbci	r25, 0xFF	; 255
    314a:	64 2f       	mov	r22, r20
    314c:	77 27       	eor	r23, r23
    314e:	0e 94 c8 18 	call	0x3190	; 0x3190 <__udivmodhi4>
    3152:	80 5d       	subi	r24, 0xD0	; 208
    3154:	8a 33       	cpi	r24, 0x3A	; 58
    3156:	0c f0       	brlt	.+2      	; 0x315a <itoa+0x2c>
    3158:	89 5d       	subi	r24, 0xD9	; 217
    315a:	81 93       	st	Z+, r24
    315c:	cb 01       	movw	r24, r22
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	a1 f7       	brne	.-24     	; 0x314a <itoa+0x1c>
    3162:	16 f4       	brtc	.+4      	; 0x3168 <itoa+0x3a>
    3164:	5d e2       	ldi	r21, 0x2D	; 45
    3166:	51 93       	st	Z+, r21
    3168:	10 82       	st	Z, r1
    316a:	c9 01       	movw	r24, r18
    316c:	0c 94 b8 18 	jmp	0x3170	; 0x3170 <strrev>

00003170 <strrev>:
    3170:	dc 01       	movw	r26, r24
    3172:	fc 01       	movw	r30, r24
    3174:	67 2f       	mov	r22, r23
    3176:	71 91       	ld	r23, Z+
    3178:	77 23       	and	r23, r23
    317a:	e1 f7       	brne	.-8      	; 0x3174 <strrev+0x4>
    317c:	32 97       	sbiw	r30, 0x02	; 2
    317e:	04 c0       	rjmp	.+8      	; 0x3188 <strrev+0x18>
    3180:	7c 91       	ld	r23, X
    3182:	6d 93       	st	X+, r22
    3184:	70 83       	st	Z, r23
    3186:	62 91       	ld	r22, -Z
    3188:	ae 17       	cp	r26, r30
    318a:	bf 07       	cpc	r27, r31
    318c:	c8 f3       	brcs	.-14     	; 0x3180 <strrev+0x10>
    318e:	08 95       	ret

00003190 <__udivmodhi4>:
    3190:	aa 1b       	sub	r26, r26
    3192:	bb 1b       	sub	r27, r27
    3194:	51 e1       	ldi	r21, 0x11	; 17
    3196:	07 c0       	rjmp	.+14     	; 0x31a6 <__udivmodhi4_ep>

00003198 <__udivmodhi4_loop>:
    3198:	aa 1f       	adc	r26, r26
    319a:	bb 1f       	adc	r27, r27
    319c:	a6 17       	cp	r26, r22
    319e:	b7 07       	cpc	r27, r23
    31a0:	10 f0       	brcs	.+4      	; 0x31a6 <__udivmodhi4_ep>
    31a2:	a6 1b       	sub	r26, r22
    31a4:	b7 0b       	sbc	r27, r23

000031a6 <__udivmodhi4_ep>:
    31a6:	88 1f       	adc	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	5a 95       	dec	r21
    31ac:	a9 f7       	brne	.-22     	; 0x3198 <__udivmodhi4_loop>
    31ae:	80 95       	com	r24
    31b0:	90 95       	com	r25
    31b2:	bc 01       	movw	r22, r24
    31b4:	cd 01       	movw	r24, r26
    31b6:	08 95       	ret

000031b8 <_exit>:
    31b8:	f8 94       	cli

000031ba <__stop_program>:
    31ba:	ff cf       	rjmp	.-2      	; 0x31ba <__stop_program>
